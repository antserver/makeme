/*
    doc.me -- Ejscript documentation build file
 */

Me.load({

    targets: {
        api: {
            action: `
                trace('Generate', 'Script library documentation')
                let bin = Cmd.locate('ejsmod').dirname
                let src = me.dir.src.join('src')
                let docmod = Path('').temp().replaceExt('mod')
                run(bin.join('ejsc') + ' --doc --bind --out ' + docmod + ' ../src/me.es ../src/configure.es')
                let edir = me.dir.src.join('doc/api/makeme')
                rmdir([edir.join('*.html'), edir.join('*.css'), edir.join('images/*')])
                run(bin.join('ejsmod') + ' --warn --html ' + edir + ' ' + docmod)
                cp(me.dir.src.join('doc/api/masters/*.html'), edir)
                cp(me.dir.src.join('doc/api/masters/*.jpg'), edir.join('images'))
                docmod.remove()
            `,
        },

        validate: {
            depends: [ 'gen-doc' ],
            action: `
                for each (f in Path('out').files('**/*.html')) {
                    let data = f.readString()
                    data = data.replace('700|Open', '').
                        replace(/appweb.download.html/g, 'download/appweb.html').
                        replace(/developers.contributors.html/g, 'scripts/contributors.esp').
                        replace(/nowrap="nowrap"/g, '').
                        replace(/https:..embedthis.com.appweb.licensing.html/g, 'https://embedthis.com/').
                        replace(/https:..embedthis.com.me.doc.guide.me.source.building.htm/g, 'https://embedthis.com/').
                        replace(/https:..embedthis.com.developers./g, 'https://embedthis.com/').

                        replace(/nowrap/g, '')
                    trace('Patch', f)
                    f.write(data)
                }
                trace('Listen', 'exp --nogen')
                Cmd.run('exp --nogen')
            `
        },
    },
})
