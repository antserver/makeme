/*
    embedthis.me -- Embedthis Me Environment
 */

Me.load({
    blend: [
        'embedthis-manifest.me',
    ],

    '+modules': [
        'embedthis.es',
    ],

    scripts: {
        postload: "
            if (me.platform.like == 'windows') {
                me.prefixes = me['windows-prefixes']
            }
        ",
    },

    internal: {
        platforms: [ 'local' ],
    },

    settings: {
        depth: App.getenv('BUILD_DEPTH') || 1,
    },

    'embedthis-prefixes': {
        root:       '/',
        base:       '${prefixes.root}/usr/local',
        data:       '${prefixes.root}',
        state:      '${prefixes.root}/var',

        app:        '${prefixes.base}/lib/${settings.name}',
        vapp:       '${prefixes.app}/${settings.version}',

        bin:        '${prefixes.base}/bin',
        inc:        '${prefixes.base}/include',
        lib:        '${prefixes.base}/lib',
        man:        '${prefixes.base}/share/man',
        sbin:       '${prefixes.base}/sbin',

        etc:        '${prefixes.data}/etc/${settings.name}',
        web:        '${prefixes.state}/www/${settings.name}-default',
        log:        '${prefixes.state}/log/${settings.name}',
        spool:      '${prefixes.state}/spool/${settings.name}',
        cache:      '${prefixes.state}/spool/${settings.name}/cache',

        src:        '${settings.name}-${settings.version}',
    },

    targets: {
        removeFiles: {
            home: '${TOP}',
            type: 'exe',
            rule: 'gui'
            sources: [ 'package/windows/removeFiles.c' ],
            platforms: [ 'local' ],
            enable: "me.platform.like == 'windows' && Path('package/windows/removeFiles.c').exists",
        },

        projects: {
            action: "genProjects()",
            home: '${TOP}',
        },

        /*
            Target to build a personal project for the current configuration
         */
        'mine': {
            action: "
                let cmd = Cmd.locate('me')
                let runopt = {dir: me.dir.src, show: true}
                /* Xcode and VS use separate profiles */
                if (me.platform.name == 'macosx-x64-debug') {
                    run(cmd + ' -q -d -platform macosx-x64-mine -configure . -gen xcode', runopt)
                } else if (me.platform.name == 'windows-x86-debug') {
                    run(cmd + ' -q -d -platform windows-x86-mine -configure . -gen vs', runopt)
                }
                run(cmd + ' -q -configure . ', runopt)
            ",
        },

        'projects-clobber': {
            action: "
                rm(['${dir.proj}/*.mk', '${dir.proj}/*.sh'])
                rmdir(['${dir.proj}/*-*-default'])
            "
        },

        upload: {
            action: "
                if (me.settings.depth < 2) {
                    trace('Info', 'Upload skipped at build depth ' + me.settings.depth)
                } else {
                    let s = me.settings
                    let uri = s.farmUri || App.getenv('BUILD_UPLOAD')
                    let key = s.farmKey || App.getenv('BUILD_KEY')
                    let branch = App.getenv('BUILD_BRANCH') || 'dev'
                    if (!key) {
                        throw 'Missing a farm authorization key'
                    }
                    if (!uri) {
                        throw 'Missing a farm upload URI'
                    }
                    let base = s.product + '-' + s.version
                    let files = me.dir.rel.files('*' + base + '*.pkg*')
                    files += me.dir.rel.files('*' + base + '*x86.exe.zip*')
                    if (App.getenv('BUILD_UPLOAD_SOURCE') == 'true') {
                        files += me.dir.rel.files('*' + base + '-src*')
                        files += me.dir.rel.files('*' + base + '-flat*')
                        files += me.dir.rel.files(s.product + '-flat.tgz')
                    }
                    for each (file in files) {
                        let http = new Http
                        trace('Upload', file.relativeTo(me.dir.rel) + ' size ' + 
                            (file.size / 1024 / 1024).toFixed(2) + ' MB')
                        http.upload(uri, file, {branch: branch, server: System.hostname, key: key})
                        if (http.status != 200) {
                            throw 'Cant upload ' + file + '\n' + http.response
                        }
                    }
                }
            ",
        },

        unit_test: {
            type: 'test',
            action: "
                if (!me.targets.test) {
                    let utest = me.extensions.utest ? me.extensions.utest.path : null
                    if (!utest) {
                        utest = Cmd.locate('utest', [me.dir.top.join(me.platform.name, 'bin/utest'), App.exeDir])
                    }
                    if (utest) {
                        if (me.dir.src.join('src').exists) {
                            run([utest, '-v', '-d', me.settings.depth], {noio: true, dir: me.dir.src.join('src')})
                        }
                    } else {
                        trace('Test', 'The utest program cannot be located')
                    }
                }
            ",
        }

        /*
            Documentation targets 
         */
        doc: {
            depends: ['patch', 'manpages', 'api', 'clean-doc', 'ssi'],
        },

        'patch': {},
        'api': {},
        'clean-doc': {},

        manpages: {
            depends: ['all'],
            action: "
                for each (file in ls(['${SRC}/doc/man/*.1', '${SRC}/doc/man/*.3'])) {
                    let name = file.basename
                    trace('Generate', 'Manual page for ' + name)
                    if (me.extensions.man.path && me.extensions.man2html.path) {
                        let response = run([me.extensions.man.path, file], {noshow: true})
                        file.replaceExt('txt').write(response.replace(/.\b/g, ''))
                        let cmd = Cmd([me.extensions.man2html.path, '-u'], {detach: true})
                        cmd.write(response)
                        cmd.finalize()
                        file.replaceExt('html').write(cmd.response)
                    }
                }
            ",
        },

        ssi: {
            action: "
                if (me.extensions.dsi.path) {
                    if (!me.dir.src.join('doc/dsi').exists) {
                        trace('Skip', 'No server side includes')
                    } else {
                        trace('Process', 'Html server side includes (dsi)')
                        let doc = me.dir.src.join('doc')
                        for each (file in ls('${SRC}/doc/**.html')) {
                            file = file.relativeTo(doc)
                            vtrace('Patch', file)
                            run([me.extensions.dsi.path, file], {dir: doc})
                        }
                    }
                } else {
                    trace('Skip', 'ssi bacause ' + me.extensions.dsi.diagnostic)
                }
            ",
        },

        tidy: {
            depends: ['doc', 'ssi'],
            enable: false,
            action: "
                if (me.extensions.dsi.path) {
                    trace('Tidy', 'HTML doc')
                    let doc = me.dir.src.join('doc')
                    for each (file in ls('${SRC}/doc/**html')) {
                        trace('Tidy', file)
                        file = file.relativeTo(doc)
                        run(me.extensions.tidy.path + ' -q -config tidy.conf ' + file)
                    }
                } else {
                    trace('Skip', 'tidy bacause ' + me.extensions.dsi.diagnostic)
                }
            ",
        },

        check: {
            action: "
                let missing = checkInstalled()
                if (missing) {
                    let existing = checkUninstalled()
                    if (existing) {
                        trace('Status', 'Product partially removed, existing: ' + existing.join(' '))
                        for each (f in existing) {
                            dump(f, f.files())
                        }
                    } else {
                        trace('Status', 'Not installed')
                    }
                } else {
                    trace('Status', 'Installed')
                }
            ",
        },

        checkInstalled: {
            action: "
                let missing = checkInstalled()
                if (missing) {
                    trace('Missing', missing)
                    throw 'Missing directories: \n' + missing.join('\n')
                } else {
                    trace('Installed', 'Products directories are created')
                }
            ",
        },

        checkUninstalled: {
            action: "
                let existing = checkUninstalled()
                if (existing) {
                    trace('Existing', existing)
                    throw 'Existing directories: \n' + existing.join('\n')
                } else {
                    trace('Info', 'Product is not installed')
                }
            ",
        },

        install: {
            home: '${TOP}',
            action: ' ',
            generate: ' ',
            depends: [ 'all', 'stop', 'installBinary', 'start' ],
        },

        installBinary: {
            home: '${TOP}',
            action: "installBinary()",
            depends: [ 'all' ],
            'generate-capture': true,
        },

        installPackage: {
            home: '${TOP}',
            action: "installPackage()",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}.match(/linux|macosx|windows/)",
            depends: ['packageBinary', 'packageSource', 'packagePak', 'packageCombo', 'packageFlat'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['all'],
            action: "packageBinary()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['all'],
            action: "packageSource()",
        },

        packagePak: {
            home: '${TOP}',
            depends: ['all'],
            action: "packagePak()",
        },

        packageCombo: {
            home: '${TOP}',
            depends: ['all'],
            action: "packageCombo()",
        },

        packageFlat: {
            home: '${TOP}',
            depends: ['all'],
            action: "packageFlat()",
        },

        publish: {
            home: '${TOP}',
            enable: "'${OS}.match(/linux|macosx|windows/)",
            action: "publish()",
        },

        cache: {
            home: '${TOP}',
            enable: "'${OS}.match(/linux|macosx|windows/)",
            depends: ['all'],
            action: "cache()",
        },

        uninstall: {
            home: '${TOP}',
            action: "uninstallBinary()",
            depends: [ 'all', 'stop' ],
            'generate-capture': true,
            generate: ' ',
        },

        uninstallPackage: {
            action: "uninstallPackage()",
        },

        whatInstalled: {
            action: "whatInstalled()",
        },

        upgrade: {
            home: '${TOP}',
            action: "sh('pak -f upgrade ; me build')",
        },

        sync: {
            home: '${TOP}',
            action: "sh('pak -f upgrade')",
        },

        status: {
            home: '${TOP}',
            action: "sh('git status')",
        },

        testPackage: {
            type: 'test',
            action: "
                let package = packageName()
                if (!package || !package.exists || me.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (me.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        trace('Test', me.settings.name + ' -V')
                        assert(Cmd.run([me.prefixes.bin.join(me.settings.name), '-V']).trim() == me.settings.version)
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            ",
        },

        /* Default stubs */
        start: { action: '', generate: ''},
        stop: { action: '',  generate: ''},
    },
})
