/*
    macosx.bit -- MAC OS X Settings
 */

Bit.load({
    blend: [    
        'unix.bit',
    ],

    ext: {
        'shlib': 'dylib',
        'shobj': 'dylib',
    },

    __UNUSED__defaults: {
        '+compiler': [ 
            '-Wall',
            '-Wno-deprecated-declarations',
        ],
        '+libraries': [ 'pthread', 'm' ],
        '+linker': [
            '-Wl,-rpath,@executable_path/',
            '-Wl,-rpath,@loader_path/',
        ],
    },

    scripts: {
        /* 
            This runs before blending defaults into targets
         */
        __UNUSED__preinherit: "
            let defaults = bit.defaults
            let arch = bit.platform.arch
            defaults.libpaths.push(bit.dir.bin)
            if (bit.settings.hasDynLoad) {
                defaults.libraries.push('dl')
            }
            if (bit.settings.preprocess) {
                defaults.compiler.push('-E')
            } else {
                if (!defaults['override-compiler']) {
                    if (bit.settings.debug) {
                        defaults.compiler += ['-g']
                        defaults.linker.push('-g')
                        defaults.defines.push('BIT_DEBUG')
                    } else if (bit.settings.tune == 'size') {
                        defaults.compiler += ['-Os']
                    } else {
                        defaults.compiler += ['-O3']
                    }
                    if (bit.settings.warnUnused) {
                        defaults.compiler.push('-Wno-unused-result')
                    }
                    if (bit.settings.warn64to32) {
                        defaults.compiler.push('-Wshorten-64-to-32')
                    }
                }
            }
        ",
    },

    rules: {
        'c->c':   '${packs.compiler.path} -E -arch ${CC_ARCH} ${CFLAGS} ${DEFINES} ${INCLUDES} ${PREPROCESS} ${INPUT}',
        'c->o':   '${packs.compiler.path} -c -o ${OUTPUT} -arch ${CC_ARCH} ${MTUNE} ${CFLAGS} ${DEFINES} ${INCLUDES} ${PREPROCESS} ${INPUT}',
        'cpp->o': '${packs.compiler.path} -c -o ${OUTPUT} -arch ${CC_ARCH} ${MTUNE} ${CFLAGS} ${DEFINES} ${INCLUDES} ${PREPROCESS} ${INPUT}',
        'shlib':  '${packs.compiler.path} -dynamiclib -o ${OUTPUT} -arch ${CC_ARCH} ${LDFLAGS} ${LIBPATHS} -install_name @rpath/${LIBNAME} -compatibility_version ${settings.version} -current_version ${settings.version} ${INPUT} ${LIBS}',
        'lib':    '${packs.lib.path} -cr ${OUTPUT} ${INPUT}',
        'exe':    '${packs.compiler.path} -o ${OUTPUT} -arch ${CC_ARCH} ${LDFLAGS} ${LIBPATHS} ${INPUT} ${LIBS}',
        'gui':    '${packs.compiler.path} -o ${OUTPUT} -arch ${CC_ARCH} ${LDFLAGS} ${LIBPATHS} ${INPUT} ${LIBS}',
    },
    platform: {
        'arch-map': {
            x86: 'i686',
            x64: 'x86_64',
        },
    },
})
