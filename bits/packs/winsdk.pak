/*
    winsdk.pak - Windows SDK
 */

pack('winsdk', 'Windows SDK')

let winsdk: Path
let search = bit.packs.winsdk.path
let newsdk, bin
if (!search) {
    /* Windows SDK 8 is now under /Program Files (x86)/Windows Kits/8.0 */
    search = bit.dir.programs.files('Windows Kits/*').sort().reverse()
    if (search.length) {
        newsdk = true
    } else {
        /* Old Windows SDK is now under /Program Files/Microsoft SDKs/Windows */
        search = bit.dir.programFiles.files('Microsoft SDKs/Windows/*').sort().reverse()
    }
    if (search.length == 0 && Config.OS == 'windows') {
        throw 'Can\'t find the Windows SDK. Download from http://msdn.microsoft.com/en-us/windows/desktop/hh852363.aspx'
    }
}

if (Config.OS != 'windows') {
    winsdk = '$(SDK)'
    bin = winsdk.join('Bin')
} else if (newsdk) {
    winsdk = probe('Include/um/WinBase.h', {fullpath: true, search: search})
    winsdk = winsdk.dirname.dirname.dirname
    bin = winsdk.join('Bin', bit.platform.arch).portable
} else {
    winsdk = probe('Include/WinBase.h', {fullpath: true, search: search})
    winsdk = winsdk.dirname.dirname
    bin = winsdk.join('Bin').portable
}

Bit.load({packs: { winsdk: { path: winsdk, search: bin }}})

if (newsdk) {
    bit.env.PATH = [ bin.join(bit.platform.arch) ]
    bit.env.INCLUDE = [ winsdk.join('Include/um').portable, winsdk.join('Include/shared') ]
    let winver = winsdk.basename.replace('.0', '')
    bit.env.LIB = [ winsdk.join('Lib', 'win' + winver, 'um', bit.platform.arch).portable ]
} else {
    if (bit.platform.arch == 'x64') {
        bit.env.PATH = [ bin.join('x64'), bin ]
    } else {
        bit.env.PATH = [ bin ]
    }
    bit.env.INCLUDE = [ winsdk.join('Include').portable ]
    if (bit.platform.arch == 'x64') {
        bit.env.LIB = [ winsdk.join('Lib/x64').portable ]
    } else {
        bit.env.LIB = [ winsdk.join('Lib').portable ]
    }
}
