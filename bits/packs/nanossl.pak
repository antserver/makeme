/*
    nanossl.pak -- Mocana NanoSSL package search
 */

pack('nanossl', 'Mocana NanoSSL (SSL)')

if (bit.packs.ssl && bit.packs.ssl.enable === false) {
    throw "SSL has been disabled"
}
if (bit.packs.est && bit.packs.est.enable && bit.packs.est.explicit && !bit.packs.nanossl.explicit) {
    throw "Disable nanossl. Defer to EST SSL"
}

let path: Path? = bit.packs.nanossl.path
if (!path) {
    if (bit.dir.packs.join('nanossl/latest').exists && Config.OS != 'windows') {
        path = bit.dir.packs.join('nanossl/latest')
    } else {
        let versions = sortVersions(bit.dir.packs.join('nanossl').files('nanossl-5*'))
        if (!versions.length || versions.length == 0) {
            throw 'Can\'t find Mocana NanoSSL'
        }
        path = versions[0]
    }
}

let dir, incdir, lib, search
if (bit.platform.os == 'windows') {
    search = [path.join('bin')]
    lib = probe('libssls.lib', {fullpath: true, search: search}).absolute
    search = [path.join('src')]
    incdir = probe('common/moptions.h', {search: search}).absolute
    mos = '__RTOS_WIN32__'

} else if (bit.platform.os == 'macosx') {
    search = [path.join('bin')]
    lib = probe('libssls.a', {fullpath: true, search: search}).absolute
    search = [path.join('src')]
    incdir = probe('common/moptions.h', {search: search}).absolute
    mos = '__RTOS_OSX__'

} else {
    search = [path.join('bin')]
    lib = probe('libssls.a', {fullpath: true, search: search}).absolute
    search = [path.join('src')]
    incdir = probe('common/moptions.h', {search: search}).absolute
    mos = '__RTOS_LINUX__'
}
let cfg = {
    dir: lib.parent,
    path: path,
    // '__ENABLE_MOCANA_SSL_ASYNC_SERVER_API__',
    // '__ENABLE_MOCANA_SSL_ASYNC_CLIENT_API__',
    // '__ENABLE_MOCANA_SSL_ASYNC_API_EXTENSIONS__',
    // '__ENABLE_MOCANA_SSL_CLIENT__',
    defines: [ 
        '__RTOS_OSX__', '__ENABLE_MOCANA_SSL_SERVER__', '__ENABLE_MOCANA_PEM_CONVERSION__',
        '__ENABLE_ALL_DEBUGGING__', '__ENABLE_MOCANA_DEBUG_CONSOLE__', '__MOCANA_DUMP_CONSOLE_TO_STDOUT__',
    ]
    includes: [ incdir ],
    libraries: [ 'ssls' ],
    libpaths: [ lib.parent ],
    imports: [ lib ]
}
let template = {packs: { nanossl: cfg, ssl: { name: 'nanossl', enable: true}}}
Bit.load(template)
