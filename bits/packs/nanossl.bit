/*
    nanossl.bit -- Mocana NanoSSL package search
 */

Bit.pack({
    nanossl: {
        description: 'Mocana NanoSSL',
        path: function (pack) {
            let path: Path? = bit.packs.nanossl.withpath
            if (!path) {
                if (bit.dir.packs.join('nanossl/latest').exists && Config.OS != 'windows') {
                    path = bit.dir.packs.join('nanossl/latest')
                } else {
                    let versions = sortVersions(bit.dir.packs.join('nanossl').files('nanossl-5*'))
                    if (!versions.length || versions.length == 0) {
                        throw 'Can\'t find Mocana NanoSSL'
                    }
                    path = versions[0]
                }
            }
            let search = [ path.join('bin') ]
            let lib = probe('libssls.' + bit.ext.lib, {fullpath: true, search: search}).absolute
            pack.libpaths = [ lib.parent ]
            pack.libraries = [ 'ssls' ]
            pack.imports = [ lib ]

            let incdir = probe('common/moptions.h', {search: [path.join('src')]}).absolute
            pack.includes = [ incdir ]

            if (bit.platform.os == 'windows') {
                mos = '__RTOS_WIN32__'
            } else if (bit.platform.os == 'macosx') {
                mos = '__RTOS_OSX__'
            } else {
                mos = '__RTOS_LINUX__'
            }
            /* 
                '__ENABLE_MOCANA_SSL_ASYNC_SERVER_API__', '__ENABLE_MOCANA_SSL_ASYNC_CLIENT_API__',
                '__ENABLE_MOCANA_SSL_ASYNC_API_EXTENSIONS__', '__ENABLE_MOCANA_SSL_CLIENT__', 
             */
            pack.defines = [ mos,  '__ENABLE_MOCANA_SSL_SERVER__', '__ENABLE_MOCANA_PEM_CONVERSION__',
                '__ENABLE_ALL_DEBUGGING__', '__ENABLE_MOCANA_DEBUG_CONSOLE__', '__MOCANA_DUMP_CONSOLE_TO_STDOUT__']
            return path
        },
        conflicts: [ 'est', 'matrixssl', 'openssl' ],
    },
})
