/*
    package.bit
 */

Bit.load({
    targets: {
        removeFiles: {
            enable: bit.platform.like == 'windows',
            type: 'exe',
            rule: 'gui'
            sources: [ 'windows/removeFiles.c' ],
            platforms: [ 'local' ],
        },

        deploy: {
            home: '${TOP}',
            action: 'packageDeploy()',
            depends: ['compile'],
            'generate-make': "
                mkdir -p $(BIT_VAPP_PREFIX)/bin $(BIT_VAPP_PREFIX)/man/man1
                rm -f $(BIT_APP_PREFIX)/latest $(BIT_VAPP_PREFIX)/bin/bit $(BIT_VAPP_PREFIX)/man/man1/bit.1 $(BIT_MAN_PREFIX)/man1/bit.1
                cp -R -P ${BIN}/bit* ${BIN}/ejs.mod ${BIN}/lib* ${BIN}/ca.crt $(BIT_VAPP_PREFIX)/bin
                cp doc/man/bit.1 $(BIT_VAPP_PREFIX)/man/man1
                ln -s $(BIT_VAPP_PREFIX)/man/man1/bit.1 $(BIT_MAN_PREFIX)/man1/bit.1
                ln -s $(BIT_VAPP_PREFIX)//bin/bit $(BIT_VAPP_PREFIX)/bin/bit
                ln -s $(VERSION) $(BIT_APP_PREFIX)/latest
            ",
            'generate-nmake': "
                @if not exist \"$(BIT_VAPP_PREFIX)\\bin\" md \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\bit.exe \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\bit.es \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\ejs.mod \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\lib*.dll \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\ca.crt \"$(BIT_VAPP_PREFIX)\\bin\"
                xcopy /I /S /Y /Q $(CONFIG)\\bin\\bits \"$(BIT_VAPP_PREFIX)\\bin\\bits\"
            ",
        },

        install: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",                      
            home: '${TOP}',
            action: "installBinary()",
            depends: ['compile', 'deploy'],
            'generate': ' ',
        },

        uninstall: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "uninstallBinary()"
            'generate-make': "
                rm -rf $(BIT_VAPP_PREFIX)/bin/bit $(BIT_MAN_PREFIX)/man1/bit.1 '$(BIT_APP_PREFIX)'
            ",
            'generate-nmake': "if exist \"$(BIT_APP_PREFIX)\" rd /Q /S \"$(BIT_APP_PREFIX)\"",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageComboFiles()",
        },

        testPackage: {
            type: 'test',
            action: "
                let package = packageName()
                if (!package || !package.exists || bit.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (bit.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = bit.settings
                        trace('Test', 'bit -V')
                        assert(Cmd.run([bit.prefixes.bin.join('bit'), '-V']).trim() == s.version + '-' + s.buildNumber)
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            ",
        },
    },
})
