/*
    package.bit
 */

Bit.load({
    targets: {
        removeFiles: {
            enable: bit.platform.like == 'windows',
            type: 'exe',
            rule: 'gui'
            sources: [ 'windows/removeFiles.c' ],
            depends: [ 'libmpr' ],
            platforms: [ 'local' ],
        },

        'root-install': {
            home: '${TOP}',
			action: '',
			depends: ['compile'],
            'generate-make': "
                rm -f $(BIT_PRD_PREFIX)/latest $(BIT_UBIN_PREFIX)/bit
                install -d -m 755 $(BIT_BIN_PREFIX)
                cp ${TOP}/doc/man/bit.1 $(BIT_MAN_PREFIX)
                cp -R -P ${BIN}/* $(BIT_BIN_PREFIX)
                rm -f $(BIT_BIN_PREFIX)/sqlite $(BIT_BIN_PREFIX)/makerom $(BIT_BIN_PREFIX)/ejsc $(BIT_BIN_PREFIX)/ejs $(BIT_BIN_PREFIX)/http
                ln -s $(BIT_VERSION) $(BIT_PRD_PREFIX)/latest
                for n in bit http; do \\
                    rm -f $(BIT_UBIN_PREFIX)/$$n ; \\
                    ln -s $(BIT_BIN_PREFIX)/$$n $(BIT_UBIN_PREFIX)/$$n ; \\
                done
            ",
            'generate-nmake': "
                xcopy /I /S /Y /Q $(CONFIG)\\bin \"$(BIT_BIN_PREFIX)\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.pdb\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.exp\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.lib\"
                del /Q \"$(BIT_BIN_PREFIX)\\sqlite.*\"
                del /Q \"$(BIT_BIN_PREFIX)\\makerom.*\"
                del /Q \"$(BIT_BIN_PREFIX)\\ejsc.*\"
                del /Q \"$(BIT_BIN_PREFIX)\\ejs.*\"
                del /Q \"$(BIT_BIN_PREFIX)\\http.*\"
            ",
        },

        install: {
            home: '${TOP}',
            depends: ['compile'],
            action: "installBinary()",
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk $(MAKEFLAGS) root-install",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-install",
        },

        'root-uninstall': {
            home: '${TOP}',
			action: '',
            'generate-make': "rm -fr $(BIT_PRD_PREFIX) $(BIT_MAN_PREFIX)/bit.1",
            'generate-nmake': "if exist \"$(BIT_PRD_PREFIX)\" rd /Q /S \"$(BIT_PRD_PREFIX)\"",
		},

        uninstall: {
            home: '${TOP}',
            action: "uninstallBinary()"
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk $(MAKEFLAGS) root-uninstall",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-uninstall",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        testPackage: {
            type: 'test',
            action: "
                let package = packageName()
                if (!package || !package.exists || bit.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (bit.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = bit.settings
                        trace('Test', 'bit -V')
                        assert(Cmd.run([bit.prefixes.bin.join('bit'), '-V']).trim() == s.version + '-' + s.buildNumber)
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            ",
        },
    },
})
