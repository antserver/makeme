/*
    openssl.me -- OpenSSL probe
 */

Me.extension({
    openssl: {
        description: 'OpenSSL',
        generate: function (extension) {
            extension.path = '/usr/src/openssl'
            extension.includes = [ '$(ME_COMP_OPENSSL_PATH)/include' ]
            extension.libpaths = [ '$(ME_COMP_OPENSSL_PATH)' ]
            if (me.platform.os == 'windows') {
                extension.libraries = [ 'libeay32.lib', 'ssleay32.lib' ]
            } else {
                extension.libraries = [ 'ssl', 'crypto' ]
            }
        },
        path: function (extension) {
            let path: Path? = extension.withpath
            if (!path) {
                if (me.dir.paks) {
                    path = me.dir.paks.join('openssl')
                }
                if (!path.exists) {
                    path = App.dir.join('../packages-' + me.platform.os + '-' + me.platform.arch, 'openssl')
                    path = path.files('openssl*').reverse()[0]
                    if (!path || !path.exists) {
                        path = '.'
                    }
                }
            }
            let search = [path]
            if (me.platform.arch == 'x64') {
                search += ['/usr/lib64', '/lib64']
            }
            search += ['/usr/lib', '/lib' ]
            search += Path('/usr/lib').files('*-linux-gnu') + Path('/lib').files('*-linux-gnu')
            let lib

            if (me.platform.os == 'windows') {
                search = [path.join('out32dll')]
                lib = probe('libeay32.dll', {fullpath: true, search: search, nopath: true}).absolute
                extension.libraries = [ 'libeay32.lib', 'ssleay32.lib' ]
                extension.libpaths = [ lib.parent ]
                extension.imports = [ lib.parent.join('libeay32.dll'), lib.parent.join('libeay32.lib'),
                                 lib.parent.join('ssleay32.dll'), lib.parent.join('ssleay32.lib') ]
                extension.includes = [ probe('openssl/ssl.h', {search: [path.join('inc32')]}).absolute ]

            } else {
                lib = probe('libcrypto.' + me.ext.shobj, {fullpath: true, search: search, nopath: true}).absolute
                extension.libraries = [ 'ssl', 'crypto' ]
                extension.libpaths = [ lib.parent ]
                extension.imports = lib.parent.files('libssl*.' + me.ext.shobj + '*') + 
                               lib.parent.files('libcrypto*.' + me.ext.shobj + '*')
                extension.includes = [ probe('openssl/ssl.h', {search: [ path.join('include'), '/usr/include']}).absolute ]
            }
            return lib.dirname
        },
        extensions: [ 'ssl' ],
        conflicts: [ 'est', 'matrixssl', 'nanossl' ],
    },
})

