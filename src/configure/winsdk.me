/*
    winsdk.me - Windows SDK Extension
 */

Me.load({
    targets: {
        winsdk: {
            description: 'Windows SDK',
            config: function (target) {
                if (Config.OS != 'windows') {
                    throw 'Winsdk only available on windows'
                }
                let env = {}
                let path: Path
                let search = target.withpath
                if (!search) {
                    /* Windows SDK 8 is under /Program Files (x86)/Windows Kits/8.0 */
                    search = me.dir.programFiles32.files('Windows Kits/*').sort().reverse()
                    if (search.length) {
                        target.winkit = true
                    } else {
                        /* Old Windows SDK is under /Program Files (x86)/Microsoft SDKs/Windows */
                        search = me.dir.programFiles32.files('Microsoft SDKs/Windows/*').sort().reverse()
                    }
                    if (search.length == 0 && Config.OS == 'windows') {
                        throw 'Cannot find the Windows SDK. Download from http://msdn.microsoft.com/en-us/windows/desktop/hh852363.aspx'
                    }
                }
                let bin
                if (target.winkit) {
                    path = probe('Include/um/WinBase.h', {fullpath: true, search: search})
                    path = path.dirname.dirname.dirname
                    bin = path.join('Bin', me.platform.arch).portable
                } else {
                    path = probe('Include/WinBase.h', {fullpath: true, search: search})
                    path = path.dirname.dirname
                    bin = path.join('Bin').portable
                }
                if (target.winkit) {
                    env.PATH = [ bin.join(me.platform.arch) ]
                    env.INCLUDE = [ path.join('Include/um').portable, path.join('Include/shared') ]
                    /* Ugh - MS change the directory name yet again */
                    let winver = path.join('Lib').files()[0].basename || ('win' + path.basename.replace('.0', ''))
                    env.LIB = [ path.join('Lib', winver, 'um', me.platform.arch).portable ]
                } else {
                    if (me.platform.arch == 'x64') {
                        env.PATH = [ bin.join('x64'), bin ]
                    } else {
                        env.PATH = [ bin ]
                    }
                    env.INCLUDE = [ path.join('Include').portable ]
                    if (me.platform.arch == 'x64') {
                        env.LIB = [ path.join('Lib/x64').portable ]
                    } else {
                        env.LIB = [ path.join('Lib').portable ]
                    }
                }
                return {
                    path:   path,
                    env:    env,
                    search: bin,
                }
            },
        },
    },
})
