#
#   bit-windows-default.nmake -- Makefile to build Embedthis Bit for windows
#

PRODUCT            = bit
VERSION            = 0.8.5
BUILD_NUMBER       = 0
PROFILE            = default
PA                 = $(PROCESSOR_ARCHITECTURE)

!IF "$(PA)" == "AMD64"
ARCH               = x64
ENTRY              = _DllMainCRTStartup
!ELSE
ARCH               = x86
ENTRY              = _DllMainCRTStartup@12
!ENDIF

OS                 = windows
CONFIG             = $(OS)-$(ARCH)-$(PROFILE)
LBIN               = $(CONFIG)\bin

BIT_PACK_EJSCRIPT  = 1
BIT_PACK_EST       = 1
BIT_PACK_SSL       = 1

!IF "$(BIT_PACK_EST)" == "1"
BIT_PACK_SSL = 1
!ENDIF

!IF "$(BIT_PACK_LIB)" == "1"
BIT_PACK_COMPILER = 1
!ENDIF

!IF "$(BIT_PACK_MATRIXSSL)" == "1"
BIT_PACK_SSL = 1
!ENDIF

!IF "$(BIT_PACK_NANOSSL)" == "1"
BIT_PACK_SSL = 1
!ENDIF

!IF "$(BIT_PACK_OPENSSL)" == "1"
BIT_PACK_SSL = 1
!ENDIF

!IF "$(BIT_PACK_RC)" == "1"
BIT_PACK_WINSDK = 1
!ENDIF


CC                 = cl
LD                 = link
RC                 = rc
CFLAGS             = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS             = -D_REENTRANT -D_MT -DBIT_DEBUG -DBIT_PACK_EJSCRIPT=$(BIT_PACK_EJSCRIPT) -DBIT_PACK_EST=$(BIT_PACK_EST) -DBIT_PACK_SSL=$(BIT_PACK_SSL) 
IFLAGS             = -I$(CONFIG)\inc
LDFLAGS            = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS           = -libpath:$(CONFIG)\bin
LIBS               = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

BIT_ROOT_PREFIX    = C:
BIT_BASE_PREFIX    = $(BIT_ROOT_PREFIX)\Program Files
BIT_APP_PREFIX     = $(BIT_BASE_PREFIX)\Embedthis Bit
BIT_VAPP_PREFIX    = $(BIT_APP_PREFIX)
BIT_DATA_PREFIX    = $(BIT_VAPP_PREFIX)
BIT_STATE_PREFIX   = $(BIT_VAPP_PREFIX)
BIT_BIN_PREFIX     = $(BIT_VAPP_PREFIX)\bin
BIT_INC_PREFIX     = $(BIT_VAPP_PREFIX)\inc
BIT_LIB_PREFIX     = $(BIT_VAPP_PREFIX)\lib
BIT_MAN_PREFIX     = $(BIT_VAPP_PREFIX)\man
BIT_ETC_PREFIX     = $(BIT_VAPP_PREFIX)
BIT_WEB_PREFIX     = $(BIT_VAPP_PREFIX)\web
BIT_LOG_PREFIX     = $(BIT_VAPP_PREFIX)\log
BIT_SPOOL_PREFIX   = $(BIT_VAPP_PREFIX)\tmp
BIT_CACHE_PREFIX   = $(BIT_VAPP_PREFIX)\cache
BIT_SRC_PREFIX     = $(BIT_VAPP_PREFIX)\src


!IF "$(BIT_PACK_EST)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\libest.dll
!ENDIF
TARGETS            = $(TARGETS) $(CONFIG)\bin\ca.crt
TARGETS            = $(TARGETS) $(CONFIG)\bin\libmpr.dll
!IF "$(BIT_PACK_SSL)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\libmprssl.dll
!ENDIF
TARGETS            = $(TARGETS) $(CONFIG)\bin\makerom.exe
TARGETS            = $(TARGETS) $(CONFIG)\bin\libpcre.dll
TARGETS            = $(TARGETS) $(CONFIG)\bin\libhttp.dll
TARGETS            = $(TARGETS) $(CONFIG)\bin\http.exe
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\libejs.dll
!ENDIF
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\ejs.exe
!ENDIF
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\ejsc.exe
!ENDIF
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
TARGETS            = $(TARGETS) $(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS            = $(TARGETS) $(CONFIG)\bin\removeFiles.exe
TARGETS            = $(TARGETS) $(CONFIG)\bin\bit.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(BIT_APP_PREFIX)" == ""
	echo "BIT_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\bit.h copy projects\bit-windows-default-bit.h $(CONFIG)\inc\bit.h

clean:
	if exist "$(CONFIG)\bin\libest.dll" rd /Q /S"$(CONFIG)\bin\libest.dll"
	if exist "$(CONFIG)\bin\ca.crt" rd /Q /S"$(CONFIG)\bin\ca.crt"
	if exist "$(CONFIG)\bin\libmpr.dll" rd /Q /S"$(CONFIG)\bin\libmpr.dll"
	if exist "$(CONFIG)\bin\libmprssl.dll" rd /Q /S"$(CONFIG)\bin\libmprssl.dll"
	if exist "$(CONFIG)\bin\makerom.exe" rd /Q /S"$(CONFIG)\bin\makerom.exe"
	if exist "$(CONFIG)\bin\libpcre.dll" rd /Q /S"$(CONFIG)\bin\libpcre.dll"
	if exist "$(CONFIG)\bin\libhttp.dll" rd /Q /S"$(CONFIG)\bin\libhttp.dll"
	if exist "$(CONFIG)\bin\http.exe" rd /Q /S"$(CONFIG)\bin\http.exe"
	if exist "$(CONFIG)\bin\libejs.dll" rd /Q /S"$(CONFIG)\bin\libejs.dll"
	if exist "$(CONFIG)\bin\ejs.exe" rd /Q /S"$(CONFIG)\bin\ejs.exe"
	if exist "$(CONFIG)\bin\ejsc.exe" rd /Q /S"$(CONFIG)\bin\ejsc.exe"
	if exist "$(CONFIG)\bin\removeFiles.exe" rd /Q /S"$(CONFIG)\bin\removeFiles.exe"
	if exist "$(CONFIG)\obj\estLib.obj" rd /Q /S"$(CONFIG)\obj\estLib.obj"
	if exist "$(CONFIG)\obj\mprLib.obj" rd /Q /S"$(CONFIG)\obj\mprLib.obj"
	if exist "$(CONFIG)\obj\mprSsl.obj" rd /Q /S"$(CONFIG)\obj\mprSsl.obj"
	if exist "$(CONFIG)\obj\makerom.obj" rd /Q /S"$(CONFIG)\obj\makerom.obj"
	if exist "$(CONFIG)\obj\pcre.obj" rd /Q /S"$(CONFIG)\obj\pcre.obj"
	if exist "$(CONFIG)\obj\httpLib.obj" rd /Q /S"$(CONFIG)\obj\httpLib.obj"
	if exist "$(CONFIG)\obj\http.obj" rd /Q /S"$(CONFIG)\obj\http.obj"
	if exist "$(CONFIG)\obj\ejsLib.obj" rd /Q /S"$(CONFIG)\obj\ejsLib.obj"
	if exist "$(CONFIG)\obj\ejs.obj" rd /Q /S"$(CONFIG)\obj\ejs.obj"
	if exist "$(CONFIG)\obj\ejsc.obj" rd /Q /S"$(CONFIG)\obj\ejsc.obj"
	if exist "$(CONFIG)\obj\removeFiles.obj" rd /Q /S"$(CONFIG)\obj\removeFiles.obj"
	if exist "$(CONFIG)\obj\bit.obj" rd /Q /S"$(CONFIG)\obj\bit.obj"



#
#   version
#
version: $(DEPS_1)
	cd bits
	@echo NN 0.8.5-0
	cd ..

#
#   est.h
#
$(CONFIG)\inc\est.h: $(DEPS_2)
	@echo '      [Copy] $(CONFIG)/inc/est.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\est\est.h" "$(CONFIG)\inc\est.h"

#
#   bit.h
#
$(CONFIG)\inc\bit.h: $(DEPS_3)
	@echo '      [Copy] $(CONFIG)/inc/bit.h'

#
#   bitos.h
#
$(CONFIG)\inc\bitos.h: $(DEPS_4)
	@echo '      [Copy] $(CONFIG)/inc/bitos.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\bitos.h" "$(CONFIG)\inc\bitos.h"

#
#   estLib.obj
#
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\bit.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\est.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\estLib.obj: \
    src\deps\est\estLib.c $(DEPS_5)
	@echo '   [Compile] src/deps/est/estLib.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\estLib.obj -Fd$(CONFIG)\obj\estLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\est\estLib.c

!IF "$(BIT_PACK_EST)" == "1"
#
#   libest
#
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\est.h
DEPS_6 = $(DEPS_6) $(CONFIG)\obj\estLib.obj

$(CONFIG)\bin\libest.dll: $(DEPS_6)
	@echo '      [Link] libest'
	"$(LD)" -dll -out:$(CONFIG)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\estLib.obj $(LIBS) 
!ENDIF

#
#   ca-crt
#
DEPS_7 = $(DEPS_7) src\deps\est\ca.crt

$(CONFIG)\bin\ca.crt: $(DEPS_7)
	@echo '      [Copy] $(CONFIG)/bin/ca.crt'
	if not exist "$(CONFIG)\bin" md "$(CONFIG)\bin"
	copy /Y "src\deps\est\ca.crt" "$(CONFIG)\bin\ca.crt"

#
#   mpr.h
#
$(CONFIG)\inc\mpr.h: $(DEPS_8)
	@echo '      [Copy] $(CONFIG)/inc/mpr.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\mpr\mpr.h" "$(CONFIG)\inc\mpr.h"

#
#   mprLib.obj
#
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\bit.h
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\mpr.h
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\bitos.h

$(CONFIG)\obj\mprLib.obj: \
    src\deps\mpr\mprLib.c $(DEPS_9)
	@echo '   [Compile] src/deps/mpr/mprLib.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\mprLib.obj -Fd$(CONFIG)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\mpr\mprLib.c

#
#   libmpr
#
DEPS_10 = $(DEPS_10) $(CONFIG)\inc\mpr.h
DEPS_10 = $(DEPS_10) $(CONFIG)\obj\mprLib.obj

$(CONFIG)\bin\libmpr.dll: $(DEPS_10)
	@echo '      [Link] libmpr'
	"$(LD)" -dll -out:$(CONFIG)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\mprLib.obj $(LIBS) 

#
#   mprSsl.obj
#
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\bit.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\mpr.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\est.h

$(CONFIG)\obj\mprSsl.obj: \
    src\deps\mpr\mprSsl.c $(DEPS_11)
	@echo '   [Compile] src/deps/mpr/mprSsl.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\mprSsl.obj -Fd$(CONFIG)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\mpr\mprSsl.c

!IF "$(BIT_PACK_SSL)" == "1"
#
#   libmprssl
#
DEPS_12 = $(DEPS_12) $(CONFIG)\bin\libmpr.dll
!IF "$(BIT_PACK_EST)" == "1"
DEPS_12 = $(DEPS_12) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_12 = $(DEPS_12) $(CONFIG)\obj\mprSsl.obj

!IF "$(BIT_PACK_EST)" == "1"
LIBS_12 = $(LIBS_12) libest.lib
!ENDIF
LIBS_12 = $(LIBS_12) libmpr.lib

$(CONFIG)\bin\libmprssl.dll: $(DEPS_12)
	@echo '      [Link] libmprssl'
	"$(LD)" -dll -out:$(CONFIG)\bin\libmprssl.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\mprSsl.obj $(LIBS_12) $(LIBS_12) $(LIBS) 
!ENDIF

#
#   makerom.obj
#
DEPS_13 = $(DEPS_13) $(CONFIG)\inc\bit.h
DEPS_13 = $(DEPS_13) $(CONFIG)\inc\mpr.h

$(CONFIG)\obj\makerom.obj: \
    src\deps\mpr\makerom.c $(DEPS_13)
	@echo '   [Compile] src/deps/mpr/makerom.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\makerom.obj -Fd$(CONFIG)\obj\makerom.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\mpr\makerom.c

#
#   makerom
#
DEPS_14 = $(DEPS_14) $(CONFIG)\bin\libmpr.dll
DEPS_14 = $(DEPS_14) $(CONFIG)\obj\makerom.obj

LIBS_14 = $(LIBS_14) libmpr.lib

$(CONFIG)\bin\makerom.exe: $(DEPS_14)
	@echo '      [Link] makerom'
	"$(LD)" -out:$(CONFIG)\bin\makerom.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\makerom.obj $(LIBS_14) $(LIBS_14) $(LIBS) 

#
#   pcre.h
#
$(CONFIG)\inc\pcre.h: $(DEPS_15)
	@echo '      [Copy] $(CONFIG)/inc/pcre.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\pcre\pcre.h" "$(CONFIG)\inc\pcre.h"

#
#   pcre.obj
#
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\bit.h
DEPS_16 = $(DEPS_16) $(CONFIG)\inc\pcre.h

$(CONFIG)\obj\pcre.obj: \
    src\deps\pcre\pcre.c $(DEPS_16)
	@echo '   [Compile] src/deps/pcre/pcre.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\pcre.obj -Fd$(CONFIG)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\pcre\pcre.c

#
#   libpcre
#
DEPS_17 = $(DEPS_17) $(CONFIG)\inc\pcre.h
DEPS_17 = $(DEPS_17) $(CONFIG)\obj\pcre.obj

$(CONFIG)\bin\libpcre.dll: $(DEPS_17)
	@echo '      [Link] libpcre'
	"$(LD)" -dll -out:$(CONFIG)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\pcre.obj $(LIBS) 

#
#   http.h
#
$(CONFIG)\inc\http.h: $(DEPS_18)
	@echo '      [Copy] $(CONFIG)/inc/http.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\http\http.h" "$(CONFIG)\inc\http.h"

#
#   httpLib.obj
#
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\bit.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\http.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\mpr.h

$(CONFIG)\obj\httpLib.obj: \
    src\deps\http\httpLib.c $(DEPS_19)
	@echo '   [Compile] src/deps/http/httpLib.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\httpLib.obj -Fd$(CONFIG)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\http\httpLib.c

#
#   libhttp
#
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libmpr.dll
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libpcre.dll
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\http.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\httpLib.obj

LIBS_20 = $(LIBS_20) libpcre.lib
LIBS_20 = $(LIBS_20) libmpr.lib

$(CONFIG)\bin\libhttp.dll: $(DEPS_20)
	@echo '      [Link] libhttp'
	"$(LD)" -dll -out:$(CONFIG)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\httpLib.obj $(LIBS_20) $(LIBS_20) $(LIBS) 

#
#   http.obj
#
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\bit.h
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\http.h

$(CONFIG)\obj\http.obj: \
    src\deps\http\http.c $(DEPS_21)
	@echo '   [Compile] src/deps/http/http.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\http.obj -Fd$(CONFIG)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\http\http.c

#
#   http
#
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libhttp.dll
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\http.obj

LIBS_22 = $(LIBS_22) libhttp.lib
LIBS_22 = $(LIBS_22) libpcre.lib
LIBS_22 = $(LIBS_22) libmpr.lib

$(CONFIG)\bin\http.exe: $(DEPS_22)
	@echo '      [Link] http'
	"$(LD)" -out:$(CONFIG)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\http.obj $(LIBS_22) $(LIBS_22) $(LIBS) 

#
#   ejs.h
#
$(CONFIG)\inc\ejs.h: $(DEPS_23)
	@echo '      [Copy] $(CONFIG)/inc/ejs.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\ejs\ejs.h" "$(CONFIG)\inc\ejs.h"

#
#   ejs.slots.h
#
$(CONFIG)\inc\ejs.slots.h: $(DEPS_24)
	@echo '      [Copy] $(CONFIG)/inc/ejs.slots.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\ejs\ejs.slots.h" "$(CONFIG)\inc\ejs.slots.h"

#
#   ejsByteGoto.h
#
$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_25)
	@echo '      [Copy] $(CONFIG)/inc/ejsByteGoto.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y "src\deps\ejs\ejsByteGoto.h" "$(CONFIG)\inc\ejsByteGoto.h"

#
#   ejsLib.obj
#
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\bit.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\ejs.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\mpr.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\pcre.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\bitos.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\http.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\ejs.slots.h

$(CONFIG)\obj\ejsLib.obj: \
    src\deps\ejs\ejsLib.c $(DEPS_26)
	@echo '   [Compile] src/deps/ejs/ejsLib.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\ejsLib.obj -Fd$(CONFIG)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\ejs\ejsLib.c

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
#
#   libejs
#
DEPS_27 = $(DEPS_27) $(CONFIG)\bin\libhttp.dll
DEPS_27 = $(DEPS_27) $(CONFIG)\bin\libpcre.dll
DEPS_27 = $(DEPS_27) $(CONFIG)\bin\libmpr.dll
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\ejs.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\ejs.slots.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\ejsByteGoto.h
DEPS_27 = $(DEPS_27) $(CONFIG)\obj\ejsLib.obj

LIBS_27 = $(LIBS_27) libmpr.lib
LIBS_27 = $(LIBS_27) libpcre.lib
LIBS_27 = $(LIBS_27) libhttp.lib
LIBS_27 = $(LIBS_27) libpcre.lib
LIBS_27 = $(LIBS_27) libmpr.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_27 = $(LIBS_27) libest.lib
!ENDIF

$(CONFIG)\bin\libejs.dll: $(DEPS_27)
	@echo '      [Link] libejs'
	"$(LD)" -dll -out:$(CONFIG)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\ejsLib.obj $(LIBS_27) $(LIBS_27) $(LIBS) 
!ENDIF

#
#   ejs.obj
#
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\bit.h
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\ejs.h

$(CONFIG)\obj\ejs.obj: \
    src\deps\ejs\ejs.c $(DEPS_28)
	@echo '   [Compile] src/deps/ejs/ejs.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\ejs.obj -Fd$(CONFIG)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\ejs\ejs.c

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
#
#   ejs
#
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
DEPS_29 = $(DEPS_29) $(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_29 = $(DEPS_29) $(CONFIG)\obj\ejs.obj

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
LIBS_29 = $(LIBS_29) libejs.lib
!ENDIF
LIBS_29 = $(LIBS_29) libmpr.lib
LIBS_29 = $(LIBS_29) libpcre.lib
LIBS_29 = $(LIBS_29) libhttp.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_29 = $(LIBS_29) libest.lib
!ENDIF

$(CONFIG)\bin\ejs.exe: $(DEPS_29)
	@echo '      [Link] ejs'
	"$(LD)" -out:$(CONFIG)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\ejs.obj $(LIBS_29) $(LIBS_29) $(LIBS) 
!ENDIF

#
#   ejsc.obj
#
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\bit.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\ejs.h

$(CONFIG)\obj\ejsc.obj: \
    src\deps\ejs\ejsc.c $(DEPS_30)
	@echo '   [Compile] src/deps/ejs/ejsc.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\ejsc.obj -Fd$(CONFIG)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\deps\ejs\ejsc.c

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
#
#   ejsc
#
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
DEPS_31 = $(DEPS_31) $(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_31 = $(DEPS_31) $(CONFIG)\obj\ejsc.obj

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
LIBS_31 = $(LIBS_31) libejs.lib
!ENDIF
LIBS_31 = $(LIBS_31) libmpr.lib
LIBS_31 = $(LIBS_31) libpcre.lib
LIBS_31 = $(LIBS_31) libhttp.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_31 = $(LIBS_31) libest.lib
!ENDIF

$(CONFIG)\bin\ejsc.exe: $(DEPS_31)
	@echo '      [Link] ejsc'
	"$(LD)" -out:$(CONFIG)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\ejsc.obj $(LIBS_31) $(LIBS_31) $(LIBS) 
!ENDIF

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
#
#   ejs.mod
#
DEPS_32 = $(DEPS_32) src\deps\ejs\ejs.es
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
DEPS_32 = $(DEPS_32) $(CONFIG)\bin\ejsc.exe
!ENDIF

$(CONFIG)\bin\ejs.mod: $(DEPS_32)
	"$(LBIN)\ejsc" --out ".\$(CONFIG)\bin\ejs.mod" --optimize 9 --bind --require null src/deps/ejs/ejs.es
!ENDIF

#
#   removeFiles.obj
#
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\bit.h

$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_33)
	@echo '   [Compile] package/windows/removeFiles.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\removeFiles.obj -Fd$(CONFIG)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c

#
#   removeFiles
#
DEPS_34 = $(DEPS_34) $(CONFIG)\obj\removeFiles.obj

$(CONFIG)\bin\removeFiles.exe: $(DEPS_34)
	@echo '      [Link] removeFiles'
	"$(LD)" -out:$(CONFIG)\bin\removeFiles.exe -entry:WinMainCRTStartup -subsystem:Windows $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\removeFiles.obj $(LIBS) 

#
#   bits
#
DEPS_35 = $(DEPS_35) bits\bit.es
DEPS_35 = $(DEPS_35) bits\configure.es
DEPS_35 = $(DEPS_35) bits\embedthis-manifest.bit
DEPS_35 = $(DEPS_35) bits\embedthis.bit
DEPS_35 = $(DEPS_35) bits\embedthis.es
DEPS_35 = $(DEPS_35) bits\gendoc.es
DEPS_35 = $(DEPS_35) bits\generate.es
DEPS_35 = $(DEPS_35) bits\os
DEPS_35 = $(DEPS_35) bits\os\freebsd.bit
DEPS_35 = $(DEPS_35) bits\os\gcc.bit
DEPS_35 = $(DEPS_35) bits\os\linux.bit
DEPS_35 = $(DEPS_35) bits\os\macosx.bit
DEPS_35 = $(DEPS_35) bits\os\solaris.bit
DEPS_35 = $(DEPS_35) bits\os\unix.bit
DEPS_35 = $(DEPS_35) bits\os\vxworks.bit
DEPS_35 = $(DEPS_35) bits\os\windows.bit
DEPS_35 = $(DEPS_35) bits\packs
DEPS_35 = $(DEPS_35) bits\packs\compiler.bit
DEPS_35 = $(DEPS_35) bits\packs\doxygen.bit
DEPS_35 = $(DEPS_35) bits\packs\dsi.bit
DEPS_35 = $(DEPS_35) bits\packs\dumpbin.bit
DEPS_35 = $(DEPS_35) bits\packs\ejs.bit
DEPS_35 = $(DEPS_35) bits\packs\ejscript.bit
DEPS_35 = $(DEPS_35) bits\packs\est.bit
DEPS_35 = $(DEPS_35) bits\packs\http.bit
DEPS_35 = $(DEPS_35) bits\packs\lib.bit
DEPS_35 = $(DEPS_35) bits\packs\link.bit
DEPS_35 = $(DEPS_35) bits\packs\man.bit
DEPS_35 = $(DEPS_35) bits\packs\man2html.bit
DEPS_35 = $(DEPS_35) bits\packs\matrixssl.bit
DEPS_35 = $(DEPS_35) bits\packs\md5.bit
DEPS_35 = $(DEPS_35) bits\packs\nanossl.bit
DEPS_35 = $(DEPS_35) bits\packs\openssl.bit
DEPS_35 = $(DEPS_35) bits\packs\pcre.bit
DEPS_35 = $(DEPS_35) bits\packs\pmaker.bit
DEPS_35 = $(DEPS_35) bits\packs\ranlib.bit
DEPS_35 = $(DEPS_35) bits\packs\rc.bit
DEPS_35 = $(DEPS_35) bits\packs\sqlite.bit
DEPS_35 = $(DEPS_35) bits\packs\ssl.bit
DEPS_35 = $(DEPS_35) bits\packs\strip.bit
DEPS_35 = $(DEPS_35) bits\packs\tidy.bit
DEPS_35 = $(DEPS_35) bits\packs\utest.bit
DEPS_35 = $(DEPS_35) bits\packs\vxworks.bit
DEPS_35 = $(DEPS_35) bits\packs\winsdk.bit
DEPS_35 = $(DEPS_35) bits\packs\zip.bit
DEPS_35 = $(DEPS_35) bits\packs\zlib.bit
DEPS_35 = $(DEPS_35) bits\sample-main.bit
DEPS_35 = $(DEPS_35) bits\sample-start.bit
DEPS_35 = $(DEPS_35) bits\simple.bit
DEPS_35 = $(DEPS_35) bits\standard.bit
DEPS_35 = $(DEPS_35) bits\vstudio.es
DEPS_35 = $(DEPS_35) bits\xcode.es

$(CONFIG)\bin\bits: $(DEPS_35)
	@echo '      [Copy] $(CONFIG)/bin/bits'
	if not exist "$(CONFIG)\bin\bits" md "$(CONFIG)\bin\bits"
	copy /Y "bits\bit.es" "$(CONFIG)\bin\bits\bit.es"
	copy /Y "bits\configure.es" "$(CONFIG)\bin\bits\configure.es"
	copy /Y "bits\embedthis-manifest.bit" "$(CONFIG)\bin\bits\embedthis-manifest.bit"
	copy /Y "bits\embedthis.bit" "$(CONFIG)\bin\bits\embedthis.bit"
	copy /Y "bits\embedthis.es" "$(CONFIG)\bin\bits\embedthis.es"
	copy /Y "bits\gendoc.es" "$(CONFIG)\bin\bits\gendoc.es"
	copy /Y "bits\generate.es" "$(CONFIG)\bin\bits\generate.es"
	if not exist "$(CONFIG)\bin\bits\os" md "$(CONFIG)\bin\bits\os"
	copy /Y "bits\os\freebsd.bit" "$(CONFIG)\bin\bits\os\freebsd.bit"
	copy /Y "bits\os\gcc.bit" "$(CONFIG)\bin\bits\os\gcc.bit"
	copy /Y "bits\os\linux.bit" "$(CONFIG)\bin\bits\os\linux.bit"
	copy /Y "bits\os\macosx.bit" "$(CONFIG)\bin\bits\os\macosx.bit"
	copy /Y "bits\os\solaris.bit" "$(CONFIG)\bin\bits\os\solaris.bit"
	copy /Y "bits\os\unix.bit" "$(CONFIG)\bin\bits\os\unix.bit"
	copy /Y "bits\os\vxworks.bit" "$(CONFIG)\bin\bits\os\vxworks.bit"
	copy /Y "bits\os\windows.bit" "$(CONFIG)\bin\bits\os\windows.bit"
	if not exist "$(CONFIG)\bin\bits\os" md "$(CONFIG)\bin\bits\os"
	copy /Y "bits\os\freebsd.bit" "$(CONFIG)\bin\bits\os\freebsd.bit"
	copy /Y "bits\os\gcc.bit" "$(CONFIG)\bin\bits\os\gcc.bit"
	copy /Y "bits\os\linux.bit" "$(CONFIG)\bin\bits\os\linux.bit"
	copy /Y "bits\os\macosx.bit" "$(CONFIG)\bin\bits\os\macosx.bit"
	copy /Y "bits\os\solaris.bit" "$(CONFIG)\bin\bits\os\solaris.bit"
	copy /Y "bits\os\unix.bit" "$(CONFIG)\bin\bits\os\unix.bit"
	copy /Y "bits\os\vxworks.bit" "$(CONFIG)\bin\bits\os\vxworks.bit"
	copy /Y "bits\os\windows.bit" "$(CONFIG)\bin\bits\os\windows.bit"
	if not exist "$(CONFIG)\bin\bits\packs" md "$(CONFIG)\bin\bits\packs"
	copy /Y "bits\packs\compiler.bit" "$(CONFIG)\bin\bits\packs\compiler.bit"
	copy /Y "bits\packs\doxygen.bit" "$(CONFIG)\bin\bits\packs\doxygen.bit"
	copy /Y "bits\packs\dsi.bit" "$(CONFIG)\bin\bits\packs\dsi.bit"
	copy /Y "bits\packs\dumpbin.bit" "$(CONFIG)\bin\bits\packs\dumpbin.bit"
	copy /Y "bits\packs\ejs.bit" "$(CONFIG)\bin\bits\packs\ejs.bit"
	copy /Y "bits\packs\ejscript.bit" "$(CONFIG)\bin\bits\packs\ejscript.bit"
	copy /Y "bits\packs\est.bit" "$(CONFIG)\bin\bits\packs\est.bit"
	copy /Y "bits\packs\http.bit" "$(CONFIG)\bin\bits\packs\http.bit"
	copy /Y "bits\packs\lib.bit" "$(CONFIG)\bin\bits\packs\lib.bit"
	copy /Y "bits\packs\link.bit" "$(CONFIG)\bin\bits\packs\link.bit"
	copy /Y "bits\packs\man.bit" "$(CONFIG)\bin\bits\packs\man.bit"
	copy /Y "bits\packs\man2html.bit" "$(CONFIG)\bin\bits\packs\man2html.bit"
	copy /Y "bits\packs\matrixssl.bit" "$(CONFIG)\bin\bits\packs\matrixssl.bit"
	copy /Y "bits\packs\md5.bit" "$(CONFIG)\bin\bits\packs\md5.bit"
	copy /Y "bits\packs\nanossl.bit" "$(CONFIG)\bin\bits\packs\nanossl.bit"
	copy /Y "bits\packs\openssl.bit" "$(CONFIG)\bin\bits\packs\openssl.bit"
	copy /Y "bits\packs\pcre.bit" "$(CONFIG)\bin\bits\packs\pcre.bit"
	copy /Y "bits\packs\pmaker.bit" "$(CONFIG)\bin\bits\packs\pmaker.bit"
	copy /Y "bits\packs\ranlib.bit" "$(CONFIG)\bin\bits\packs\ranlib.bit"
	copy /Y "bits\packs\rc.bit" "$(CONFIG)\bin\bits\packs\rc.bit"
	copy /Y "bits\packs\sqlite.bit" "$(CONFIG)\bin\bits\packs\sqlite.bit"
	copy /Y "bits\packs\ssl.bit" "$(CONFIG)\bin\bits\packs\ssl.bit"
	copy /Y "bits\packs\strip.bit" "$(CONFIG)\bin\bits\packs\strip.bit"
	copy /Y "bits\packs\tidy.bit" "$(CONFIG)\bin\bits\packs\tidy.bit"
	copy /Y "bits\packs\utest.bit" "$(CONFIG)\bin\bits\packs\utest.bit"
	copy /Y "bits\packs\vxworks.bit" "$(CONFIG)\bin\bits\packs\vxworks.bit"
	copy /Y "bits\packs\winsdk.bit" "$(CONFIG)\bin\bits\packs\winsdk.bit"
	copy /Y "bits\packs\zip.bit" "$(CONFIG)\bin\bits\packs\zip.bit"
	copy /Y "bits\packs\zlib.bit" "$(CONFIG)\bin\bits\packs\zlib.bit"
	if not exist "$(CONFIG)\bin\bits\packs" md "$(CONFIG)\bin\bits\packs"
	copy /Y "bits\packs\compiler.bit" "$(CONFIG)\bin\bits\packs\compiler.bit"
	copy /Y "bits\packs\doxygen.bit" "$(CONFIG)\bin\bits\packs\doxygen.bit"
	copy /Y "bits\packs\dsi.bit" "$(CONFIG)\bin\bits\packs\dsi.bit"
	copy /Y "bits\packs\dumpbin.bit" "$(CONFIG)\bin\bits\packs\dumpbin.bit"
	copy /Y "bits\packs\ejs.bit" "$(CONFIG)\bin\bits\packs\ejs.bit"
	copy /Y "bits\packs\ejscript.bit" "$(CONFIG)\bin\bits\packs\ejscript.bit"
	copy /Y "bits\packs\est.bit" "$(CONFIG)\bin\bits\packs\est.bit"
	copy /Y "bits\packs\http.bit" "$(CONFIG)\bin\bits\packs\http.bit"
	copy /Y "bits\packs\lib.bit" "$(CONFIG)\bin\bits\packs\lib.bit"
	copy /Y "bits\packs\link.bit" "$(CONFIG)\bin\bits\packs\link.bit"
	copy /Y "bits\packs\man.bit" "$(CONFIG)\bin\bits\packs\man.bit"
	copy /Y "bits\packs\man2html.bit" "$(CONFIG)\bin\bits\packs\man2html.bit"
	copy /Y "bits\packs\matrixssl.bit" "$(CONFIG)\bin\bits\packs\matrixssl.bit"
	copy /Y "bits\packs\md5.bit" "$(CONFIG)\bin\bits\packs\md5.bit"
	copy /Y "bits\packs\nanossl.bit" "$(CONFIG)\bin\bits\packs\nanossl.bit"
	copy /Y "bits\packs\openssl.bit" "$(CONFIG)\bin\bits\packs\openssl.bit"
	copy /Y "bits\packs\pcre.bit" "$(CONFIG)\bin\bits\packs\pcre.bit"
	copy /Y "bits\packs\pmaker.bit" "$(CONFIG)\bin\bits\packs\pmaker.bit"
	copy /Y "bits\packs\ranlib.bit" "$(CONFIG)\bin\bits\packs\ranlib.bit"
	copy /Y "bits\packs\rc.bit" "$(CONFIG)\bin\bits\packs\rc.bit"
	copy /Y "bits\packs\sqlite.bit" "$(CONFIG)\bin\bits\packs\sqlite.bit"
	copy /Y "bits\packs\ssl.bit" "$(CONFIG)\bin\bits\packs\ssl.bit"
	copy /Y "bits\packs\strip.bit" "$(CONFIG)\bin\bits\packs\strip.bit"
	copy /Y "bits\packs\tidy.bit" "$(CONFIG)\bin\bits\packs\tidy.bit"
	copy /Y "bits\packs\utest.bit" "$(CONFIG)\bin\bits\packs\utest.bit"
	copy /Y "bits\packs\vxworks.bit" "$(CONFIG)\bin\bits\packs\vxworks.bit"
	copy /Y "bits\packs\winsdk.bit" "$(CONFIG)\bin\bits\packs\winsdk.bit"
	copy /Y "bits\packs\zip.bit" "$(CONFIG)\bin\bits\packs\zip.bit"
	copy /Y "bits\packs\zlib.bit" "$(CONFIG)\bin\bits\packs\zlib.bit"
	copy /Y "bits\sample-main.bit" "$(CONFIG)\bin\bits\sample-main.bit"
	copy /Y "bits\sample-start.bit" "$(CONFIG)\bin\bits\sample-start.bit"
	copy /Y "bits\simple.bit" "$(CONFIG)\bin\bits\simple.bit"
	copy /Y "bits\standard.bit" "$(CONFIG)\bin\bits\standard.bit"
	copy /Y "bits\vstudio.es" "$(CONFIG)\bin\bits\vstudio.es"
	copy /Y "bits\xcode.es" "$(CONFIG)\bin\bits\xcode.es"

#
#   bit.obj
#
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\bit.h
DEPS_36 = $(DEPS_36) $(CONFIG)\inc\ejs.h

$(CONFIG)\obj\bit.obj: \
    src\bit.c $(DEPS_36)
	@echo '   [Compile] src/bit.c'
	"$(CC)" -c -Fo$(CONFIG)\obj\bit.obj -Fd$(CONFIG)\obj\bit.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\bit.c

#
#   bit
#
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\libmpr.dll
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\libhttp.dll
!IF "$(BIT_PACK_EJSCRIPT)" == "1"
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_37 = $(DEPS_37) $(CONFIG)\bin\bits
DEPS_37 = $(DEPS_37) $(CONFIG)\inc\bitos.h
DEPS_37 = $(DEPS_37) $(CONFIG)\obj\bit.obj

!IF "$(BIT_PACK_EJSCRIPT)" == "1"
LIBS_37 = $(LIBS_37) libejs.lib
!ENDIF
LIBS_37 = $(LIBS_37) libhttp.lib
LIBS_37 = $(LIBS_37) libmpr.lib
LIBS_37 = $(LIBS_37) libpcre.lib
!IF "$(BIT_PACK_EST)" == "1"
LIBS_37 = $(LIBS_37) libest.lib
!ENDIF

$(CONFIG)\bin\bit.exe: $(DEPS_37)
	@echo '      [Link] bit'
	"$(LD)" -out:$(CONFIG)\bin\bit.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) $(CONFIG)\obj\bit.obj $(LIBS_37) $(LIBS_37) $(LIBS) 

#
#   stop
#
stop: $(DEPS_38)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_39)
	if not exist "$(BIT_VAPP_PREFIX)\bin" md "$(BIT_VAPP_PREFIX)\bin"
	copy /Y "$(CONFIG)\bin\bit.exe" "$(BIT_VAPP_PREFIX)\bin\bit.exe"
	copy /Y "$(CONFIG)\bin\ca.crt" "$(BIT_VAPP_PREFIX)\bin\ca.crt"
	copy /Y "$(CONFIG)\bin\ejs.mod" "$(BIT_VAPP_PREFIX)\bin\ejs.mod"
	copy /Y "$(CONFIG)\bin\libejs.dll" "$(BIT_VAPP_PREFIX)\bin\libejs.dll"
	copy /Y "$(CONFIG)\bin\libest.dll" "$(BIT_VAPP_PREFIX)\bin\libest.dll"
	copy /Y "$(CONFIG)\bin\libhttp.dll" "$(BIT_VAPP_PREFIX)\bin\libhttp.dll"
	copy /Y "$(CONFIG)\bin\libmpr.dll" "$(BIT_VAPP_PREFIX)\bin\libmpr.dll"
	copy /Y "$(CONFIG)\bin\libmprssl.dll" "$(BIT_VAPP_PREFIX)\bin\libmprssl.dll"
	copy /Y "$(CONFIG)\bin\libpcre.dll" "$(BIT_VAPP_PREFIX)\bin\libpcre.dll"
	if not exist "$(BIT_VAPP_PREFIX)\bin\bits" md "$(BIT_VAPP_PREFIX)\bin\bits"
	if not exist "$(BIT_VAPP_PREFIX)\bin\bits\bits" md "$(BIT_VAPP_PREFIX)\bin\bits\bits"
	copy /Y "bits\bit.es" "$(BIT_VAPP_PREFIX)\bin\bits\bit.es"
	copy /Y "bits\configure.es" "$(BIT_VAPP_PREFIX)\bin\bits\configure.es"
	copy /Y "bits\embedthis-manifest.bit" "$(BIT_VAPP_PREFIX)\bin\bits\embedthis-manifest.bit"
	copy /Y "bits\embedthis.bit" "$(BIT_VAPP_PREFIX)\bin\bits\embedthis.bit"
	copy /Y "bits\embedthis.es" "$(BIT_VAPP_PREFIX)\bin\bits\embedthis.es"
	copy /Y "bits\gendoc.es" "$(BIT_VAPP_PREFIX)\bin\bits\gendoc.es"
	copy /Y "bits\generate.es" "$(BIT_VAPP_PREFIX)\bin\bits\generate.es"
	if not exist "$(BIT_VAPP_PREFIX)\bin\bits\os" md "$(BIT_VAPP_PREFIX)\bin\bits\os"
	copy /Y "bits\os\freebsd.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\freebsd.bit"
	copy /Y "bits\os\gcc.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\gcc.bit"
	copy /Y "bits\os\linux.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\linux.bit"
	copy /Y "bits\os\macosx.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\macosx.bit"
	copy /Y "bits\os\solaris.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\solaris.bit"
	copy /Y "bits\os\unix.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\unix.bit"
	copy /Y "bits\os\vxworks.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\vxworks.bit"
	copy /Y "bits\os\windows.bit" "$(BIT_VAPP_PREFIX)\bin\bits\os\windows.bit"
	if not exist "$(BIT_VAPP_PREFIX)\bin\bits\packs" md "$(BIT_VAPP_PREFIX)\bin\bits\packs"
	copy /Y "bits\packs\compiler.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\compiler.bit"
	copy /Y "bits\packs\doxygen.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\doxygen.bit"
	copy /Y "bits\packs\dsi.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\dsi.bit"
	copy /Y "bits\packs\dumpbin.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\dumpbin.bit"
	copy /Y "bits\packs\ejs.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\ejs.bit"
	copy /Y "bits\packs\ejscript.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\ejscript.bit"
	copy /Y "bits\packs\est.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\est.bit"
	copy /Y "bits\packs\http.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\http.bit"
	copy /Y "bits\packs\lib.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\lib.bit"
	copy /Y "bits\packs\link.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\link.bit"
	copy /Y "bits\packs\man.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\man.bit"
	copy /Y "bits\packs\man2html.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\man2html.bit"
	copy /Y "bits\packs\matrixssl.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\matrixssl.bit"
	copy /Y "bits\packs\md5.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\md5.bit"
	copy /Y "bits\packs\nanossl.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\nanossl.bit"
	copy /Y "bits\packs\openssl.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\openssl.bit"
	copy /Y "bits\packs\pcre.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\pcre.bit"
	copy /Y "bits\packs\pmaker.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\pmaker.bit"
	copy /Y "bits\packs\ranlib.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\ranlib.bit"
	copy /Y "bits\packs\rc.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\rc.bit"
	copy /Y "bits\packs\sqlite.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\sqlite.bit"
	copy /Y "bits\packs\ssl.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\ssl.bit"
	copy /Y "bits\packs\strip.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\strip.bit"
	copy /Y "bits\packs\tidy.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\tidy.bit"
	copy /Y "bits\packs\utest.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\utest.bit"
	copy /Y "bits\packs\vxworks.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\vxworks.bit"
	copy /Y "bits\packs\winsdk.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\winsdk.bit"
	copy /Y "bits\packs\zip.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\zip.bit"
	copy /Y "bits\packs\zlib.bit" "$(BIT_VAPP_PREFIX)\bin\bits\packs\zlib.bit"
	copy /Y "bits\sample-main.bit" "$(BIT_VAPP_PREFIX)\bin\bits\sample-main.bit"
	copy /Y "bits\sample-start.bit" "$(BIT_VAPP_PREFIX)\bin\bits\sample-start.bit"
	copy /Y "bits\simple.bit" "$(BIT_VAPP_PREFIX)\bin\bits\simple.bit"
	copy /Y "bits\standard.bit" "$(BIT_VAPP_PREFIX)\bin\bits\standard.bit"
	copy /Y "bits\vstudio.es" "$(BIT_VAPP_PREFIX)\bin\bits\vstudio.es"
	copy /Y "bits\xcode.es" "$(BIT_VAPP_PREFIX)\bin\bits\xcode.es"

#
#   start
#
start: $(DEPS_40)
#  Omit build script start

#
#   install
#
DEPS_41 = $(DEPS_41) stop
DEPS_41 = $(DEPS_41) installBinary
DEPS_41 = $(DEPS_41) start

install: $(DEPS_41)


#
#   uninstall
#
DEPS_42 = $(DEPS_42) stop

uninstall: $(DEPS_42)
	if exist "$(BIT_VAPP_PREFIX)" rd /Q /S"$(BIT_VAPP_PREFIX)"
	if exist "$(BIT_VAPP_PREFIX)\bin" rd /Q "$(BIT_VAPP_PREFIX)\bin"
	if exist "$(BIT_VAPP_PREFIX)\man" rd /Q "$(BIT_VAPP_PREFIX)\man"
	if exist "$(BIT_VAPP_PREFIX)\latest" rd /Q "$(BIT_VAPP_PREFIX)\latest"
	if exist "$(BIT_VAPP_PREFIX)" rd /Q "$(BIT_VAPP_PREFIX)"

