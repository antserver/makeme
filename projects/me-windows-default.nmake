#
#   me-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = me
VERSION               = 0.8.8

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 0
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == ""
ME_COM_MBEDTLS        = 0
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 1
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_EJS)" == ""
ME_COM_OPENSSL_PATH   = ""
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_MBEDTLS=$(ME_COM_MBEDTLS) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WINSDK=$(ME_COM_WINSDK) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis MakeMe
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.es
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.mod
!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.exe
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
!IF "$(ME_COM_SSL)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\.install-certs-modified
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libtestme.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\me.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.es

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\me-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\libtestme.obj" del /Q "build\$(CONFIG)\obj\libtestme.obj"
	if exist "build\$(CONFIG)\obj\me.obj" del /Q "build\$(CONFIG)\obj\me.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\openssl.obj" del /Q "build\$(CONFIG)\obj\openssl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\testme.obj" del /Q "build\$(CONFIG)\obj\testme.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\ejs.testme.es" del /Q "build\$(CONFIG)\bin\ejs.testme.es"
	if exist "build\$(CONFIG)\bin\ejsc.exe" del /Q "build\$(CONFIG)\bin\ejsc.exe"
	if exist "build\$(CONFIG)\bin\ejsc.lib" del /Q "build\$(CONFIG)\bin\ejsc.lib"
	if exist "build\$(CONFIG)\bin\ejsc.pdb" del /Q "build\$(CONFIG)\bin\ejsc.pdb"
	if exist "build\$(CONFIG)\bin\ejsc.exp" del /Q "build\$(CONFIG)\bin\ejsc.exp"
	if exist "build\$(CONFIG)\bin\ejs.exe" del /Q "build\$(CONFIG)\bin\ejs.exe"
	if exist "build\$(CONFIG)\bin\ejs.lib" del /Q "build\$(CONFIG)\bin\ejs.lib"
	if exist "build\$(CONFIG)\bin\ejs.pdb" del /Q "build\$(CONFIG)\bin\ejs.pdb"
	if exist "build\$(CONFIG)\bin\ejs.exp" del /Q "build\$(CONFIG)\bin\ejs.exp"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\.install-certs-modified" del /Q "build\$(CONFIG)\.install-certs-modified"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libtestme.dll" del /Q "build\$(CONFIG)\bin\libtestme.dll"
	if exist "build\$(CONFIG)\bin\libtestme.lib" del /Q "build\$(CONFIG)\bin\libtestme.lib"
	if exist "build\$(CONFIG)\bin\libtestme.pdb" del /Q "build\$(CONFIG)\bin\libtestme.pdb"
	if exist "build\$(CONFIG)\bin\libtestme.exp" del /Q "build\$(CONFIG)\bin\libtestme.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\libmpr-openssl.lib" del /Q "build\$(CONFIG)\bin\libmpr-openssl.lib"
	if exist "build\$(CONFIG)\bin\testme.exe" del /Q "build\$(CONFIG)\bin\testme.exe"
	if exist "build\$(CONFIG)\bin\testme.lib" del /Q "build\$(CONFIG)\bin\testme.lib"
	if exist "build\$(CONFIG)\bin\testme.pdb" del /Q "build\$(CONFIG)\bin\testme.pdb"
	if exist "build\$(CONFIG)\bin\testme.exp" del /Q "build\$(CONFIG)\bin\testme.exp"
	if exist "build\$(CONFIG)\bin\testme.es" del /Q "build\$(CONFIG)\bin\testme.es"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_3 = $(DEPS_3) src\mpr\mpr.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   openssl.obj
#
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\openssl.obj: \
    src\mpr-openssl\openssl.c $(DEPS_4)
	@echo .. [Compile] build\$(CONFIG)\obj\openssl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\openssl.obj -Fd$(BUILD)\obj\openssl.pdb $(CFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr-openssl\openssl.c $(LOG)

!IF "$(ME_COM_SSL)" == "1"
#
#   openssl
#
DEPS_5 = $(DEPS_5) build\$(CONFIG)\obj\openssl.obj

build\$(CONFIG)\bin\libmpr-openssl.lib: $(DEPS_5)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-openssl.lib
	"lib.exe" -nologo -out:$(BUILD)\bin\libmpr-openssl.lib "$(BUILD)\obj\openssl.obj" $(LOG)
!ENDIF

#
#   mprLib.obj
#
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_6)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr\mprLib.c $(LOG)

#
#   libmpr
#
DEPS_7 = $(DEPS_7) build\$(CONFIG)\inc\osdep.h
!IF "$(ME_COM_SSL)" == "1"
!IF "$(ME_COM_OPENSSL)" == "1"
DEPS_7 = $(DEPS_7) build\$(CONFIG)\bin\libmpr-openssl.lib
!ENDIF
!ENDIF
DEPS_7 = $(DEPS_7) build\$(CONFIG)\inc\mpr.h
DEPS_7 = $(DEPS_7) build\$(CONFIG)\obj\mprLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_7 = $(LIBS_7) libmpr-openssl.lib
LIBPATHS_7 = $(LIBPATHS_7) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_7 = $(LIBS_7) libgdi32.lib
LIBPATHS_7 = $(LIBPATHS_7) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_7 = $(LIBS_7) libeay32.lib
LIBPATHS_7 = $(LIBPATHS_7) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_7 = $(LIBS_7) libssleay32.lib
LIBPATHS_7 = $(LIBPATHS_7) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_7 = $(LIBS_7) libmpr-openssl.lib
LIBPATHS_7 = $(LIBPATHS_7) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_7)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\mprLib.obj" $(LIBPATHS_7) $(LIBS_7) $(LIBS_7) $(LIBS)  $(LOG)

#
#   pcre.h
#
DEPS_8 = $(DEPS_8) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_8)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   pcre.obj
#
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\me.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_9)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\pcre.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_10)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   http.h
#
DEPS_11 = $(DEPS_11) src\http\http.h
DEPS_11 = $(DEPS_11) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_11)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   httpLib.obj
#
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\http.h
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_12)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\http\httpLib.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_13 = $(DEPS_13) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_13 = $(DEPS_13) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\http.h
DEPS_13 = $(DEPS_13) build\$(CONFIG)\obj\httpLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_13 = $(LIBS_13) libmpr-openssl.lib
LIBPATHS_13 = $(LIBPATHS_13) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_13 = $(LIBS_13) libgdi32.lib
LIBPATHS_13 = $(LIBPATHS_13) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_13 = $(LIBS_13) libeay32.lib
LIBPATHS_13 = $(LIBPATHS_13) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_13 = $(LIBS_13) libssleay32.lib
LIBPATHS_13 = $(LIBPATHS_13) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_13 = $(LIBS_13) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_13 = $(LIBS_13) libmpr-openssl.lib
LIBPATHS_13 = $(LIBPATHS_13) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_13 = $(LIBS_13) libpcre.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_13 = $(LIBS_13) libpcre.lib
!ENDIF
LIBS_13 = $(LIBS_13) libmpr.lib

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_13)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_13) $(LIBS_13) $(LIBS_13) $(LIBS)  $(LOG)
!ENDIF

#
#   zlib.h
#
DEPS_14 = $(DEPS_14) src\zlib\zlib.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_14)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   zlib.obj
#
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\zlib\zlib.c $(DEPS_15)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\zlib\zlib.c $(LOG)

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\zlib.h
DEPS_16 = $(DEPS_16) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_16)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   ejs.slots.h
#
DEPS_17 = $(DEPS_17) src\ejs\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_17)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejs.h
#
DEPS_18 = $(DEPS_18) src\ejs\ejs.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\me.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\osdep.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\mpr.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\http.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\ejs.slots.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\pcre.h
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_18)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_19 = $(DEPS_19) src\ejs\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_19)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   ejsLib.obj
#
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\ejs.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\mpr.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\pcre.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\ejs\ejsLib.c $(DEPS_20)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejs\ejsLib.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_21 = $(DEPS_21) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_21 = $(DEPS_21) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_21 = $(DEPS_21) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_21 = $(DEPS_21) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\ejs.h
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\ejs.slots.h
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_21 = $(DEPS_21) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_21 = $(LIBS_21) libmpr-openssl.lib
LIBPATHS_21 = $(LIBPATHS_21) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_21 = $(LIBS_21) libgdi32.lib
LIBPATHS_21 = $(LIBPATHS_21) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_21 = $(LIBS_21) libeay32.lib
LIBPATHS_21 = $(LIBPATHS_21) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_21 = $(LIBS_21) libssleay32.lib
LIBPATHS_21 = $(LIBPATHS_21) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_21 = $(LIBS_21) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_21 = $(LIBS_21) libmpr-openssl.lib
LIBPATHS_21 = $(LIBPATHS_21) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_21 = $(LIBS_21) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_21 = $(LIBS_21) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_21 = $(LIBS_21) libpcre.lib
!ENDIF
LIBS_21 = $(LIBS_21) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_21 = $(LIBS_21) libzlib.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_21 = $(LIBS_21) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_21 = $(LIBS_21) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_21)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_21) $(LIBS_21) $(LIBS_21) $(LIBS)  $(LOG)
!ENDIF

#
#   ejsc.obj
#
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\ejs\ejsc.c $(DEPS_22)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejs\ejsc.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejsc
#
DEPS_23 = $(DEPS_23) build\$(CONFIG)\bin\libejs.dll
DEPS_23 = $(DEPS_23) build\$(CONFIG)\obj\ejsc.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_23 = $(LIBS_23) libmpr-openssl.lib
LIBPATHS_23 = $(LIBPATHS_23) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_23 = $(LIBS_23) libgdi32.lib
LIBPATHS_23 = $(LIBPATHS_23) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_23 = $(LIBS_23) libeay32.lib
LIBPATHS_23 = $(LIBPATHS_23) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_23 = $(LIBS_23) libssleay32.lib
LIBPATHS_23 = $(LIBPATHS_23) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_23 = $(LIBS_23) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_23 = $(LIBS_23) libmpr-openssl.lib
LIBPATHS_23 = $(LIBPATHS_23) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_23 = $(LIBS_23) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_23 = $(LIBS_23) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_23 = $(LIBS_23) libpcre.lib
!ENDIF
LIBS_23 = $(LIBS_23) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_23 = $(LIBS_23) libzlib.lib
!ENDIF
LIBS_23 = $(LIBS_23) libejs.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_23 = $(LIBS_23) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_23 = $(LIBS_23) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\ejsc.exe: $(DEPS_23)
	@echo ..... [Link] build\$(CONFIG)\bin\ejsc.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_23) $(LIBS_23) $(LIBS_23) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejs.mod
#
DEPS_24 = $(DEPS_24) src\ejs\ejs.es
DEPS_24 = $(DEPS_24) build\$(CONFIG)\bin\ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_24)
	cd src\ejs
	@echo .. [Compile] ejs.mod
	"../../$(BUILD)/bin/ejsc" --out "../../$(BUILD)/bin/ejs.mod" --optimize 9 --bind --require null ejs.es
	cd ..\..
!ENDIF

#
#   ejs.testme.es
#
DEPS_25 = $(DEPS_25) src\tm\ejs.testme.es

build\$(CONFIG)\bin\ejs.testme.es: $(DEPS_25)
	@echo ..... [Copy] build\$(CONFIG)\bin\ejs.testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\ejs.testme.es+modified build\$(CONFIG)\bin\ejs.testme.es $(LOG)

#
#   ejs.testme.mod
#
DEPS_26 = $(DEPS_26) src\tm\ejs.testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_26 = $(DEPS_26) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\ejs.testme.mod: $(DEPS_26)
	cd src\tm
	@echo .. [Compile] ejs.testme.mod
	"../../$(BUILD)/bin/ejsc" --debug --out "../../$(BUILD)/bin/ejs.testme.mod" --optimize 9 ejs.testme.es
	cd ..\..

#
#   ejs.obj
#
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\ejs\ejs.c $(DEPS_27)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejs\ejs.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejscmd
#
DEPS_28 = $(DEPS_28) build\$(CONFIG)\bin\libejs.dll
DEPS_28 = $(DEPS_28) build\$(CONFIG)\obj\ejs.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_28 = $(LIBS_28) libmpr-openssl.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_28 = $(LIBS_28) libgdi32.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_28 = $(LIBS_28) libeay32.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_28 = $(LIBS_28) libssleay32.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_28 = $(LIBS_28) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_28 = $(LIBS_28) libmpr-openssl.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_28 = $(LIBS_28) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_28 = $(LIBS_28) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_28 = $(LIBS_28) libpcre.lib
!ENDIF
LIBS_28 = $(LIBS_28) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_28 = $(LIBS_28) libzlib.lib
!ENDIF
LIBS_28 = $(LIBS_28) libejs.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_28 = $(LIBS_28) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_28 = $(LIBS_28) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\ejs.exe: $(DEPS_28)
	@echo ..... [Link] build\$(CONFIG)\bin\ejs.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejs.obj" $(LIBPATHS_28) $(LIBS_28) $(LIBS_28) $(LIBS)  $(LOG)
!ENDIF

#
#   http.obj
#
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_29)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\http\http.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_30 = $(DEPS_30) build\$(CONFIG)\bin\libhttp.dll
DEPS_30 = $(DEPS_30) build\$(CONFIG)\obj\http.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_30 = $(LIBS_30) libmpr-openssl.lib
LIBPATHS_30 = $(LIBPATHS_30) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_30 = $(LIBS_30) libgdi32.lib
LIBPATHS_30 = $(LIBPATHS_30) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_30 = $(LIBS_30) libeay32.lib
LIBPATHS_30 = $(LIBPATHS_30) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_30 = $(LIBS_30) libssleay32.lib
LIBPATHS_30 = $(LIBPATHS_30) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_30 = $(LIBS_30) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_30 = $(LIBS_30) libmpr-openssl.lib
LIBPATHS_30 = $(LIBPATHS_30) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_30 = $(LIBS_30) libpcre.lib
!ENDIF
LIBS_30 = $(LIBS_30) libhttp.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_30 = $(LIBS_30) libpcre.lib
!ENDIF
LIBS_30 = $(LIBS_30) libmpr.lib

build\$(CONFIG)\bin\http.exe: $(DEPS_30)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\http.obj" $(LIBPATHS_30) $(LIBS_30) $(LIBS_30) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_SSL)" == "1"
#
#   install-certs
#
DEPS_31 = $(DEPS_31) src\certs\samples\ca.crt
DEPS_31 = $(DEPS_31) src\certs\samples\ca.key
DEPS_31 = $(DEPS_31) src\certs\samples\dh.pem
DEPS_31 = $(DEPS_31) src\certs\samples\ec.crt
DEPS_31 = $(DEPS_31) src\certs\samples\ec.key
DEPS_31 = $(DEPS_31) src\certs\samples\roots.crt
DEPS_31 = $(DEPS_31) src\certs\samples\self.crt
DEPS_31 = $(DEPS_31) src\certs\samples\self.key
DEPS_31 = $(DEPS_31) src\certs\samples\test.crt
DEPS_31 = $(DEPS_31) src\certs\samples\test.key

build\$(CONFIG)\.install-certs-modified: $(DEPS_31)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\certs\samples\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)
	copy /Y /B src\certs\samples\ca.key+modified build\$(CONFIG)\bin\ca.key $(LOG)
	copy /Y /B src\certs\samples\dh.pem+modified build\$(CONFIG)\bin\dh.pem $(LOG)
	copy /Y /B src\certs\samples\ec.crt+modified build\$(CONFIG)\bin\ec.crt $(LOG)
	copy /Y /B src\certs\samples\ec.key+modified build\$(CONFIG)\bin\ec.key $(LOG)
	copy /Y /B src\certs\samples\roots.crt+modified build\$(CONFIG)\bin\roots.crt $(LOG)
	copy /Y /B src\certs\samples\self.crt+modified build\$(CONFIG)\bin\self.crt $(LOG)
	copy /Y /B src\certs\samples\self.key+modified build\$(CONFIG)\bin\self.key $(LOG)
	copy /Y /B src\certs\samples\test.crt+modified build\$(CONFIG)\bin\test.crt $(LOG)
	copy /Y /B src\certs\samples\test.key+modified build\$(CONFIG)\bin\test.key $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.install-certs-modified $(LOG)
!ENDIF

#
#   testme.h
#
DEPS_32 = $(DEPS_32) src\tm\testme.h
DEPS_32 = $(DEPS_32) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\testme.h: $(DEPS_32)
	@echo ..... [Copy] build\$(CONFIG)\inc\testme.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\tm\testme.h+modified build\$(CONFIG)\inc\testme.h $(LOG)

#
#   libtestme.obj
#
DEPS_33 = $(DEPS_33) build\$(CONFIG)\inc\testme.h

build\$(CONFIG)\obj\libtestme.obj: \
    src\tm\libtestme.c $(DEPS_33)
	@echo .. [Compile] build\$(CONFIG)\obj\libtestme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\libtestme.obj -Fd$(BUILD)\obj\libtestme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\libtestme.c $(LOG)

#
#   libtestme
#
DEPS_34 = $(DEPS_34) build\$(CONFIG)\inc\testme.h
DEPS_34 = $(DEPS_34) build\$(CONFIG)\obj\libtestme.obj

build\$(CONFIG)\bin\libtestme.dll: $(DEPS_34)
	@echo ..... [Link] build\$(CONFIG)\bin\libtestme.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libtestme.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\libtestme.obj" $(LIBS)  $(LOG)

#
#   me.mod
#
DEPS_35 = $(DEPS_35) src\Builder.es
DEPS_35 = $(DEPS_35) src\Loader.es
DEPS_35 = $(DEPS_35) src\MakeMe.es
DEPS_35 = $(DEPS_35) src\Me.es
DEPS_35 = $(DEPS_35) src\Script.es
DEPS_35 = $(DEPS_35) src\Target.es
DEPS_35 = $(DEPS_35) paks\ejs-version\Version.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_35 = $(DEPS_35) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\me.mod: $(DEPS_35)
	@echo .. [Compile] me.mod
	"./$(BUILD)/bin/ejsc" --debug --out "./$(BUILD)/bin/me.mod" --optimize 9 src/Builder.es src/Loader.es src/MakeMe.es src/Me.es src/Script.es src/Target.es paks/ejs-version/Version.es

#
#   pakrun
#
DEPS_36 = $(DEPS_36) paks\me-components\appweb.me
DEPS_36 = $(DEPS_36) paks\me-components\compiler.me
DEPS_36 = $(DEPS_36) paks\me-components\components.me
DEPS_36 = $(DEPS_36) paks\me-components\lib.me
DEPS_36 = $(DEPS_36) paks\me-components\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-components\link.me
DEPS_36 = $(DEPS_36) paks\me-components\package.json
DEPS_36 = $(DEPS_36) paks\me-components\rc.me
DEPS_36 = $(DEPS_36) paks\me-components\README.md
DEPS_36 = $(DEPS_36) paks\me-components\testme.me
DEPS_36 = $(DEPS_36) paks\me-components\vxworks.me
DEPS_36 = $(DEPS_36) paks\me-components\winsdk.me
DEPS_36 = $(DEPS_36) paks\me-configuration\Configuration.es
DEPS_36 = $(DEPS_36) paks\me-configuration\configuration.me
DEPS_36 = $(DEPS_36) paks\me-configuration\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-configuration\package.json
DEPS_36 = $(DEPS_36) paks\me-configuration\README.md
DEPS_36 = $(DEPS_36) paks\me-installs\Installs.es
DEPS_36 = $(DEPS_36) paks\me-installs\installs.me
DEPS_36 = $(DEPS_36) paks\me-installs\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-installs\manifest.me
DEPS_36 = $(DEPS_36) paks\me-installs\package.json
DEPS_36 = $(DEPS_36) paks\me-installs\README.md
DEPS_36 = $(DEPS_36) paks\me-os\freebsd.me
DEPS_36 = $(DEPS_36) paks\me-os\gcc.me
DEPS_36 = $(DEPS_36) paks\me-os\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-os\linux.me
DEPS_36 = $(DEPS_36) paks\me-os\macosx.me
DEPS_36 = $(DEPS_36) paks\me-os\os.me
DEPS_36 = $(DEPS_36) paks\me-os\package.json
DEPS_36 = $(DEPS_36) paks\me-os\README.md
DEPS_36 = $(DEPS_36) paks\me-os\solaris.me
DEPS_36 = $(DEPS_36) paks\me-os\unix.me
DEPS_36 = $(DEPS_36) paks\me-os\vxworks.me
DEPS_36 = $(DEPS_36) paks\me-os\windows.me
DEPS_36 = $(DEPS_36) paks\me-project\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-project\package.json
DEPS_36 = $(DEPS_36) paks\me-project\Project.es
DEPS_36 = $(DEPS_36) paks\me-project\project.me
DEPS_36 = $(DEPS_36) paks\me-project\README.md
DEPS_36 = $(DEPS_36) paks\me-vstudio\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-vstudio\package.json
DEPS_36 = $(DEPS_36) paks\me-vstudio\README.md
DEPS_36 = $(DEPS_36) paks\me-vstudio\Vstudio.es
DEPS_36 = $(DEPS_36) paks\me-vstudio\vstudio.me
DEPS_36 = $(DEPS_36) paks\me-xcode\LICENSE.md
DEPS_36 = $(DEPS_36) paks\me-xcode\package.json
DEPS_36 = $(DEPS_36) paks\me-xcode\README.md
DEPS_36 = $(DEPS_36) paks\me-xcode\Xcode.es
DEPS_36 = $(DEPS_36) paks\me-xcode\xcode.me

build\$(CONFIG)\.pakrun-modified: $(DEPS_36)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin\paks\me-components" md "build\$(CONFIG)\bin\paks\me-components"
	copy /Y /B paks\me-components\appweb.me+modified build\$(CONFIG)\bin\paks\me-components\appweb.me $(LOG)
	copy /Y /B paks\me-components\compiler.me+modified build\$(CONFIG)\bin\paks\me-components\compiler.me $(LOG)
	copy /Y /B paks\me-components\components.me+modified build\$(CONFIG)\bin\paks\me-components\components.me $(LOG)
	copy /Y /B paks\me-components\lib.me+modified build\$(CONFIG)\bin\paks\me-components\lib.me $(LOG)
	copy /Y /B paks\me-components\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-components\LICENSE.md $(LOG)
	copy /Y /B paks\me-components\link.me+modified build\$(CONFIG)\bin\paks\me-components\link.me $(LOG)
	copy /Y /B paks\me-components\package.json+modified build\$(CONFIG)\bin\paks\me-components\package.json $(LOG)
	copy /Y /B paks\me-components\rc.me+modified build\$(CONFIG)\bin\paks\me-components\rc.me $(LOG)
	copy /Y /B paks\me-components\README.md+modified build\$(CONFIG)\bin\paks\me-components\README.md $(LOG)
	copy /Y /B paks\me-components\testme.me+modified build\$(CONFIG)\bin\paks\me-components\testme.me $(LOG)
	copy /Y /B paks\me-components\vxworks.me+modified build\$(CONFIG)\bin\paks\me-components\vxworks.me $(LOG)
	copy /Y /B paks\me-components\winsdk.me+modified build\$(CONFIG)\bin\paks\me-components\winsdk.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-configuration" md "build\$(CONFIG)\bin\paks\me-configuration"
	copy /Y /B paks\me-configuration\Configuration.es+modified build\$(CONFIG)\bin\paks\me-configuration\Configuration.es $(LOG)
	copy /Y /B paks\me-configuration\configuration.me+modified build\$(CONFIG)\bin\paks\me-configuration\configuration.me $(LOG)
	copy /Y /B paks\me-configuration\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-configuration\LICENSE.md $(LOG)
	copy /Y /B paks\me-configuration\package.json+modified build\$(CONFIG)\bin\paks\me-configuration\package.json $(LOG)
	copy /Y /B paks\me-configuration\README.md+modified build\$(CONFIG)\bin\paks\me-configuration\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-installs" md "build\$(CONFIG)\bin\paks\me-installs"
	copy /Y /B paks\me-installs\Installs.es+modified build\$(CONFIG)\bin\paks\me-installs\Installs.es $(LOG)
	copy /Y /B paks\me-installs\installs.me+modified build\$(CONFIG)\bin\paks\me-installs\installs.me $(LOG)
	copy /Y /B paks\me-installs\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-installs\LICENSE.md $(LOG)
	copy /Y /B paks\me-installs\manifest.me+modified build\$(CONFIG)\bin\paks\me-installs\manifest.me $(LOG)
	copy /Y /B paks\me-installs\package.json+modified build\$(CONFIG)\bin\paks\me-installs\package.json $(LOG)
	copy /Y /B paks\me-installs\README.md+modified build\$(CONFIG)\bin\paks\me-installs\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-os" md "build\$(CONFIG)\bin\paks\me-os"
	copy /Y /B paks\me-os\freebsd.me+modified build\$(CONFIG)\bin\paks\me-os\freebsd.me $(LOG)
	copy /Y /B paks\me-os\gcc.me+modified build\$(CONFIG)\bin\paks\me-os\gcc.me $(LOG)
	copy /Y /B paks\me-os\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-os\LICENSE.md $(LOG)
	copy /Y /B paks\me-os\linux.me+modified build\$(CONFIG)\bin\paks\me-os\linux.me $(LOG)
	copy /Y /B paks\me-os\macosx.me+modified build\$(CONFIG)\bin\paks\me-os\macosx.me $(LOG)
	copy /Y /B paks\me-os\os.me+modified build\$(CONFIG)\bin\paks\me-os\os.me $(LOG)
	copy /Y /B paks\me-os\package.json+modified build\$(CONFIG)\bin\paks\me-os\package.json $(LOG)
	copy /Y /B paks\me-os\README.md+modified build\$(CONFIG)\bin\paks\me-os\README.md $(LOG)
	copy /Y /B paks\me-os\solaris.me+modified build\$(CONFIG)\bin\paks\me-os\solaris.me $(LOG)
	copy /Y /B paks\me-os\unix.me+modified build\$(CONFIG)\bin\paks\me-os\unix.me $(LOG)
	copy /Y /B paks\me-os\vxworks.me+modified build\$(CONFIG)\bin\paks\me-os\vxworks.me $(LOG)
	copy /Y /B paks\me-os\windows.me+modified build\$(CONFIG)\bin\paks\me-os\windows.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-project" md "build\$(CONFIG)\bin\paks\me-project"
	copy /Y /B paks\me-project\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-project\LICENSE.md $(LOG)
	copy /Y /B paks\me-project\package.json+modified build\$(CONFIG)\bin\paks\me-project\package.json $(LOG)
	copy /Y /B paks\me-project\Project.es+modified build\$(CONFIG)\bin\paks\me-project\Project.es $(LOG)
	copy /Y /B paks\me-project\project.me+modified build\$(CONFIG)\bin\paks\me-project\project.me $(LOG)
	copy /Y /B paks\me-project\README.md+modified build\$(CONFIG)\bin\paks\me-project\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-vstudio" md "build\$(CONFIG)\bin\paks\me-vstudio"
	copy /Y /B paks\me-vstudio\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-vstudio\LICENSE.md $(LOG)
	copy /Y /B paks\me-vstudio\package.json+modified build\$(CONFIG)\bin\paks\me-vstudio\package.json $(LOG)
	copy /Y /B paks\me-vstudio\README.md+modified build\$(CONFIG)\bin\paks\me-vstudio\README.md $(LOG)
	copy /Y /B paks\me-vstudio\Vstudio.es+modified build\$(CONFIG)\bin\paks\me-vstudio\Vstudio.es $(LOG)
	copy /Y /B paks\me-vstudio\vstudio.me+modified build\$(CONFIG)\bin\paks\me-vstudio\vstudio.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-xcode" md "build\$(CONFIG)\bin\paks\me-xcode"
	copy /Y /B paks\me-xcode\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-xcode\LICENSE.md $(LOG)
	copy /Y /B paks\me-xcode\package.json+modified build\$(CONFIG)\bin\paks\me-xcode\package.json $(LOG)
	copy /Y /B paks\me-xcode\README.md+modified build\$(CONFIG)\bin\paks\me-xcode\README.md $(LOG)
	copy /Y /B paks\me-xcode\Xcode.es+modified build\$(CONFIG)\bin\paks\me-xcode\Xcode.es $(LOG)
	copy /Y /B paks\me-xcode\xcode.me+modified build\$(CONFIG)\bin\paks\me-xcode\xcode.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.pakrun-modified $(LOG)

#
#   runtime
#
DEPS_37 = $(DEPS_37) src\master-main.me
DEPS_37 = $(DEPS_37) src\master-start.me
DEPS_37 = $(DEPS_37) src\simple.me
DEPS_37 = $(DEPS_37) src\standard.me
DEPS_37 = $(DEPS_37) build\$(CONFIG)\.pakrun-modified

build\$(CONFIG)\.runtime-modified: $(DEPS_37)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\master-main.me+modified build\$(CONFIG)\bin\master-main.me $(LOG)
	copy /Y /B src\master-start.me+modified build\$(CONFIG)\bin\master-start.me $(LOG)
	copy /Y /B src\simple.me+modified build\$(CONFIG)\bin\simple.me $(LOG)
	copy /Y /B src\standard.me+modified build\$(CONFIG)\bin\standard.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.runtime-modified $(LOG)

#
#   me.obj
#
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_38)
	@echo .. [Compile] build\$(CONFIG)\obj\me.obj
	"$(CC)" -c -Fo$(BUILD)\obj\me.obj -Fd$(BUILD)\obj\me.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\me.c $(LOG)

#
#   me
#
DEPS_39 = $(DEPS_39) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_HTTP)" == "1"
DEPS_39 = $(DEPS_39) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
DEPS_39 = $(DEPS_39) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_39 = $(DEPS_39) build\$(CONFIG)\bin\me.mod
DEPS_39 = $(DEPS_39) build\$(CONFIG)\.runtime-modified
DEPS_39 = $(DEPS_39) build\$(CONFIG)\obj\me.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_39 = $(LIBS_39) libmpr-openssl.lib
LIBPATHS_39 = $(LIBPATHS_39) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_39 = $(LIBS_39) libgdi32.lib
LIBPATHS_39 = $(LIBPATHS_39) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_39 = $(LIBS_39) libeay32.lib
LIBPATHS_39 = $(LIBPATHS_39) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_39 = $(LIBS_39) libssleay32.lib
LIBPATHS_39 = $(LIBPATHS_39) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_39 = $(LIBS_39) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_39 = $(LIBS_39) libmpr-openssl.lib
LIBPATHS_39 = $(LIBPATHS_39) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_39 = $(LIBS_39) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_39 = $(LIBS_39) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_39 = $(LIBS_39) libpcre.lib
!ENDIF
LIBS_39 = $(LIBS_39) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_39 = $(LIBS_39) libzlib.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_39 = $(LIBS_39) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_39 = $(LIBS_39) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_39 = $(LIBS_39) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\me.exe: $(DEPS_39)
	@echo ..... [Link] build\$(CONFIG)\bin\me.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\me.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\me.obj" $(LIBPATHS_39) $(LIBS_39) $(LIBS_39) $(LIBS)  $(LOG)

#
#   testme.mod
#
DEPS_40 = $(DEPS_40) src\tm\testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\testme.mod: $(DEPS_40)
	cd src\tm
	@echo .. [Compile] testme.mod
	"../../$(BUILD)/bin/ejsc" --debug --out "../../$(BUILD)/bin/testme.mod" --optimize 9 testme.es
	cd ..\..

#
#   testme.obj
#
DEPS_41 = $(DEPS_41) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\testme.obj: \
    src\tm\testme.c $(DEPS_41)
	@echo .. [Compile] build\$(CONFIG)\obj\testme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\testme.obj -Fd$(BUILD)\obj\testme.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\tm\testme.c $(LOG)

#
#   testme
#
!IF "$(ME_COM_EJS)" == "1"
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\testme.mod
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\ejs.testme.mod
DEPS_42 = $(DEPS_42) build\$(CONFIG)\obj\testme.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libmpr-openssl.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libgdi32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libeay32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libssleay32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
LIBS_42 = $(LIBS_42) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libmpr-openssl.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_42 = $(LIBS_42) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_42 = $(LIBS_42) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_42 = $(LIBS_42) libpcre.lib
!ENDIF
LIBS_42 = $(LIBS_42) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_42 = $(LIBS_42) libzlib.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_42 = $(LIBS_42) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_42 = $(LIBS_42) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_42 = $(LIBS_42) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\testme.exe: $(DEPS_42)
	@echo ..... [Link] build\$(CONFIG)\bin\testme.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\testme.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\testme.obj" $(LIBPATHS_42) $(LIBS_42) $(LIBS_42) $(LIBS)  $(LOG)

#
#   testme.es
#
DEPS_43 = $(DEPS_43) src\tm\testme.es

build\$(CONFIG)\bin\testme.es: $(DEPS_43)
	@echo ..... [Copy] build\$(CONFIG)\bin\testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\testme.es+modified build\$(CONFIG)\bin\testme.es $(LOG)

