#
#   me-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = me
VERSION               = 0.8.3

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


ME_COM_COMPILER_PATH  = cl
ME_COM_LIB_PATH       = lib.exe
ME_COM_LINK_PATH      = link.exe
ME_COM_OPENSSL_PATH   = /usr/src/openssl
ME_COM_RC_PATH        = rc.exe

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:build\$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis MakeMe
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src



!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\me-windows-default-me.h $(BUILD)\inc\me.h

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\estLib.obj" del /Q "build\$(CONFIG)\obj\estLib.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\libtestme.obj" del /Q "build\$(CONFIG)\obj\libtestme.obj"
	if exist "build\$(CONFIG)\obj\me.obj" del /Q "build\$(CONFIG)\obj\me.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\mprSsl.obj" del /Q "build\$(CONFIG)\obj\mprSsl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\removeFiles.obj" del /Q "build\$(CONFIG)\obj\removeFiles.obj"
	if exist "build\$(CONFIG)\obj\testme.obj" del /Q "build\$(CONFIG)\obj\testme.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"


#
#   mpr.h
#
build\$(CONFIG)\inc\mpr.h: $(DEPS_1)
	@echo '      [Copy] build\$(CONFIG)\inc\mpr.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\mpr\mpr.h build\$(CONFIG)\inc\mpr.h

#
#   me.h
#
build\$(CONFIG)\inc\me.h: $(DEPS_2)
	@echo '      [Copy] build\$(CONFIG)\inc\me.h'

#
#   osdep.h
#
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_3)
	@echo '      [Copy] build\$(CONFIG)\inc\osdep.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\osdep\osdep.h build\$(CONFIG)\inc\osdep.h

#
#   mprLib.obj
#
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\me.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\paks\mpr\mprLib.c $(DEPS_4)
	@echo '   [Compile] build\$(CONFIG)\obj\mprLib.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\mprLib.obj -Fdbuild\$(CONFIG)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\mpr\mprLib.c

#
#   pcre.h
#
build\$(CONFIG)\inc\pcre.h: $(DEPS_5)
	@echo '      [Copy] build\$(CONFIG)\inc\pcre.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\pcre\pcre.h build\$(CONFIG)\inc\pcre.h

#
#   pcre.obj
#
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\me.h
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\paks\pcre\pcre.c $(DEPS_6)
	@echo '   [Compile] build\$(CONFIG)\obj\pcre.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\pcre.obj -Fdbuild\$(CONFIG)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\pcre\pcre.c

#
#   http.h
#
build\$(CONFIG)\inc\http.h: $(DEPS_7)
	@echo '      [Copy] build\$(CONFIG)\inc\http.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\http\http.h build\$(CONFIG)\inc\http.h

#
#   httpLib.obj
#
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\http.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\paks\http\httpLib.c $(DEPS_8)
	@echo '   [Compile] build\$(CONFIG)\obj\httpLib.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\httpLib.obj -Fdbuild\$(CONFIG)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\http\httpLib.c

#
#   zlib.h
#
build\$(CONFIG)\inc\zlib.h: $(DEPS_9)
	@echo '      [Copy] build\$(CONFIG)\inc\zlib.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\zlib\zlib.h build\$(CONFIG)\inc\zlib.h

#
#   zlib.obj
#
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\me.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\paks\zlib\zlib.c $(DEPS_10)
	@echo '   [Compile] build\$(CONFIG)\obj\zlib.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\zlib.obj -Fdbuild\$(CONFIG)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\zlib\zlib.c

#
#   ejs.h
#
build\$(CONFIG)\inc\ejs.h: $(DEPS_11)
	@echo '      [Copy] build\$(CONFIG)\inc\ejs.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejs.h build\$(CONFIG)\inc\ejs.h

#
#   ejs.slots.h
#
build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_12)
	@echo '      [Copy] build\$(CONFIG)\inc\ejs.slots.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejs.slots.h build\$(CONFIG)\inc\ejs.slots.h

#
#   ejsByteGoto.h
#
build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_13)
	@echo '      [Copy] build\$(CONFIG)\inc\ejsByteGoto.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejsByteGoto.h build\$(CONFIG)\inc\ejsByteGoto.h

#
#   ejsLib.obj
#
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\me.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\ejs.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\mpr.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\pcre.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\osdep.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\http.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\ejs.slots.h
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\paks\ejs\ejsLib.c $(DEPS_14)
	@echo '   [Compile] build\$(CONFIG)\obj\ejsLib.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\ejsLib.obj -Fdbuild\$(CONFIG)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsLib.c

#
#   ejsc.obj
#
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\paks\ejs\ejsc.c $(DEPS_15)
	@echo '   [Compile] build\$(CONFIG)\obj\ejsc.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\ejsc.obj -Fdbuild\$(CONFIG)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsc.c

#
#   ejs.obj
#
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\me.h
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\paks\ejs\ejs.c $(DEPS_16)
	@echo '   [Compile] build\$(CONFIG)\obj\ejs.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\ejs.obj -Fdbuild\$(CONFIG)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejs.c


#
#   http.obj
#
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\me.h
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\http.h

build\$(CONFIG)\obj\http.obj: \
    src\paks\http\http.c $(DEPS_17)
	@echo '   [Compile] build\$(CONFIG)\obj\http.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\http.obj -Fdbuild\$(CONFIG)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\http\http.c

#
#   est.h
#
build\$(CONFIG)\inc\est.h: $(DEPS_18)
	@echo '      [Copy] build\$(CONFIG)\inc\est.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\paks\est\est.h build\$(CONFIG)\inc\est.h

#
#   estLib.obj
#
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\me.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\est.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\obj\estLib.obj: \
    src\paks\est\estLib.c $(DEPS_19)
	@echo '   [Compile] build\$(CONFIG)\obj\estLib.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\estLib.obj -Fdbuild\$(CONFIG)\obj\estLib.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) $(IFLAGS) src\paks\est\estLib.c

#
#   mprSsl.obj
#
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\me.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mprSsl.obj: \
    src\paks\mpr\mprSsl.c $(DEPS_20)
	@echo '   [Compile] build\$(CONFIG)\obj\mprSsl.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\mprSsl.obj -Fdbuild\$(CONFIG)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\paks\mpr\mprSsl.c

#
#   testme.h
#
build\$(CONFIG)\inc\testme.h: $(DEPS_21)
	@echo '      [Copy] build\$(CONFIG)\inc\testme.h'
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y src\tm\testme.h build\$(CONFIG)\inc\testme.h

#
#   libtestme.obj
#
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\me.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\testme.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\obj\libtestme.obj: \
    src\tm\libtestme.c $(DEPS_22)
	@echo '   [Compile] build\$(CONFIG)\obj\libtestme.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\libtestme.obj -Fdbuild\$(CONFIG)\obj\libtestme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\libtestme.c

#
#   me.obj
#
DEPS_23 = $(DEPS_23) build\$(CONFIG)\inc\me.h
DEPS_23 = $(DEPS_23) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_23)
	@echo '   [Compile] build\$(CONFIG)\obj\me.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\me.obj -Fdbuild\$(CONFIG)\obj\me.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\me.c

#
#   removeFiles.obj
#
DEPS_24 = $(DEPS_24) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_24)
	@echo '   [Compile] build\$(CONFIG)\obj\removeFiles.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\removeFiles.obj -Fdbuild\$(CONFIG)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c

#
#   testme.obj
#
DEPS_25 = $(DEPS_25) build\$(CONFIG)\inc\me.h
DEPS_25 = $(DEPS_25) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\testme.obj: \
    src\tm\testme.c $(DEPS_25)
	@echo '   [Compile] build\$(CONFIG)\obj\testme.obj'
	"$(CC)" -c -Fobuild\$(CONFIG)\obj\testme.obj -Fdbuild\$(CONFIG)\obj\testme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\testme.c

