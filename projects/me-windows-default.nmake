#
#   me-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = me
VERSION               = 0.8.0

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

LBIN                  = $(CONFIG)\bin

!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


ME_COM_COMPILER_PATH  = cl
ME_COM_LIB_PATH       = lib.exe
ME_COM_LINK_PATH      = link.exe
ME_COM_MATRIXSSL_PATH = /usr/src/matrixssl
ME_COM_NANOSSL_PATH   = /usr/src/nanossl
ME_COM_OPENSSL_PATH   = [object Object]
ME_COM_RC_PATH        = rc.exe

CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -I$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(CONFIG)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = 
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\usr\local
ME_DATA_PREFIX        = $(ME_ROOT_PREFIX)\
ME_STATE_PREFIX       = $(ME_ROOT_PREFIX)\var
ME_APP_PREFIX         = \usr\local\lib\$(NAME)
ME_VAPP_PREFIX        = \usr\local\lib\$(NAME)\$(VERSION)
ME_BIN_PREFIX         = $(ME_ROOT_PREFIX)\usr\local\bin
ME_INC_PREFIX         = $(ME_ROOT_PREFIX)\usr\local\include
ME_LIB_PREFIX         = $(ME_ROOT_PREFIX)\usr\local\lib
ME_MAN_PREFIX         = $(ME_ROOT_PREFIX)\usr\local\share\man
ME_SBIN_PREFIX        = $(ME_ROOT_PREFIX)\usr\local\sbin
ME_ETC_PREFIX         = $(ME_ROOT_PREFIX)\etc\$(NAME)
ME_WEB_PREFIX         = $(ME_ROOT_PREFIX)\var\www\$(NAME)-default
ME_LOG_PREFIX         = $(ME_ROOT_PREFIX)\var\log\$(NAME)
ME_SPOOL_PREFIX       = $(ME_ROOT_PREFIX)\var\spool\$(NAME)
ME_CACHE_PREFIX       = $(ME_ROOT_PREFIX)\var\spool\$(NAME)\cache
ME_SRC_PREFIX         = $(ME_ROOT_PREFIX)$(NAME)-$(VERSION)


!IF "$(ME_COM_EST)" == "1"
TARGETS               = $(TARGETS) $(CONFIG)\bin\ca.crt
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) $(CONFIG)\bin\ejs.mod
!ENDIF
!IF "$(ME_COM_EST)" == "1"
TARGETS               = $(TARGETS) $(CONFIG)\bin\libest.dll
!ENDIF
TARGETS               = $(TARGETS) $(CONFIG)\bin\libmprssl.dll
TARGETS               = $(TARGETS) $(CONFIG)\bin\me.exe
TARGETS               = $(TARGETS) $(CONFIG)\bin\.updated
TARGETS               = $(TARGETS) $(CONFIG)\bin\removeFiles.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\me.h copy projects\me-windows-default-me.h $(CONFIG)\inc\me.h

clean:
	if exist "$(CONFIG)\obj\ejsLib.obj" del /Q "$(CONFIG)\obj\ejsLib.obj"
	if exist "$(CONFIG)\obj\ejsc.obj" del /Q "$(CONFIG)\obj\ejsc.obj"
	if exist "$(CONFIG)\obj\estLib.obj" del /Q "$(CONFIG)\obj\estLib.obj"
	if exist "$(CONFIG)\obj\httpLib.obj" del /Q "$(CONFIG)\obj\httpLib.obj"
	if exist "$(CONFIG)\obj\me.obj" del /Q "$(CONFIG)\obj\me.obj"
	if exist "$(CONFIG)\obj\mprLib.obj" del /Q "$(CONFIG)\obj\mprLib.obj"
	if exist "$(CONFIG)\obj\mprSsl.obj" del /Q "$(CONFIG)\obj\mprSsl.obj"
	if exist "$(CONFIG)\obj\pcre.obj" del /Q "$(CONFIG)\obj\pcre.obj"
	if exist "$(CONFIG)\obj\removeFiles.obj" del /Q "$(CONFIG)\obj\removeFiles.obj"
	if exist "$(CONFIG)\obj\zlib.obj" del /Q "$(CONFIG)\obj\zlib.obj"
	if exist "$(CONFIG)\bin\ca.crt" del /Q "$(CONFIG)\bin\ca.crt"
	if exist "$(CONFIG)\bin\ejsc.exe" del /Q "$(CONFIG)\bin\ejsc.exe"
	if exist "$(CONFIG)\bin\ejsc.lib" del /Q "$(CONFIG)\bin\ejsc.lib"
	if exist "$(CONFIG)\bin\ejsc.pdb" del /Q "$(CONFIG)\bin\ejsc.pdb"
	if exist "$(CONFIG)\bin\ejsc.exp" del /Q "$(CONFIG)\bin\ejsc.exp"
	if exist "$(CONFIG)\bin\libejs.dll" del /Q "$(CONFIG)\bin\libejs.dll"
	if exist "$(CONFIG)\bin\libejs.lib" del /Q "$(CONFIG)\bin\libejs.lib"
	if exist "$(CONFIG)\bin\libejs.pdb" del /Q "$(CONFIG)\bin\libejs.pdb"
	if exist "$(CONFIG)\bin\libejs.exp" del /Q "$(CONFIG)\bin\libejs.exp"
	if exist "$(CONFIG)\bin\libest.dll" del /Q "$(CONFIG)\bin\libest.dll"
	if exist "$(CONFIG)\bin\libest.lib" del /Q "$(CONFIG)\bin\libest.lib"
	if exist "$(CONFIG)\bin\libest.pdb" del /Q "$(CONFIG)\bin\libest.pdb"
	if exist "$(CONFIG)\bin\libest.exp" del /Q "$(CONFIG)\bin\libest.exp"
	if exist "$(CONFIG)\bin\libhttp.dll" del /Q "$(CONFIG)\bin\libhttp.dll"
	if exist "$(CONFIG)\bin\libhttp.lib" del /Q "$(CONFIG)\bin\libhttp.lib"
	if exist "$(CONFIG)\bin\libhttp.pdb" del /Q "$(CONFIG)\bin\libhttp.pdb"
	if exist "$(CONFIG)\bin\libhttp.exp" del /Q "$(CONFIG)\bin\libhttp.exp"
	if exist "$(CONFIG)\bin\libmpr.dll" del /Q "$(CONFIG)\bin\libmpr.dll"
	if exist "$(CONFIG)\bin\libmpr.lib" del /Q "$(CONFIG)\bin\libmpr.lib"
	if exist "$(CONFIG)\bin\libmpr.pdb" del /Q "$(CONFIG)\bin\libmpr.pdb"
	if exist "$(CONFIG)\bin\libmpr.exp" del /Q "$(CONFIG)\bin\libmpr.exp"
	if exist "$(CONFIG)\bin\libmprssl.dll" del /Q "$(CONFIG)\bin\libmprssl.dll"
	if exist "$(CONFIG)\bin\libmprssl.lib" del /Q "$(CONFIG)\bin\libmprssl.lib"
	if exist "$(CONFIG)\bin\libmprssl.pdb" del /Q "$(CONFIG)\bin\libmprssl.pdb"
	if exist "$(CONFIG)\bin\libmprssl.exp" del /Q "$(CONFIG)\bin\libmprssl.exp"
	if exist "$(CONFIG)\bin\libpcre.dll" del /Q "$(CONFIG)\bin\libpcre.dll"
	if exist "$(CONFIG)\bin\libpcre.lib" del /Q "$(CONFIG)\bin\libpcre.lib"
	if exist "$(CONFIG)\bin\libpcre.pdb" del /Q "$(CONFIG)\bin\libpcre.pdb"
	if exist "$(CONFIG)\bin\libpcre.exp" del /Q "$(CONFIG)\bin\libpcre.exp"
	if exist "$(CONFIG)\bin\libzlib.dll" del /Q "$(CONFIG)\bin\libzlib.dll"
	if exist "$(CONFIG)\bin\libzlib.lib" del /Q "$(CONFIG)\bin\libzlib.lib"
	if exist "$(CONFIG)\bin\libzlib.pdb" del /Q "$(CONFIG)\bin\libzlib.pdb"
	if exist "$(CONFIG)\bin\libzlib.exp" del /Q "$(CONFIG)\bin\libzlib.exp"
	if exist "$(CONFIG)\bin\removeFiles.exe" del /Q "$(CONFIG)\bin\removeFiles.exe"
	if exist "$(CONFIG)\bin\removeFiles.lib" del /Q "$(CONFIG)\bin\removeFiles.lib"
	if exist "$(CONFIG)\bin\removeFiles.pdb" del /Q "$(CONFIG)\bin\removeFiles.pdb"
	if exist "$(CONFIG)\bin\removeFiles.exp" del /Q "$(CONFIG)\bin\removeFiles.exp"


!IF "$(ME_COM_EST)" == "1"
#
#   ca-crt
#
DEPS_1 = $(DEPS_1) src\paks\est\ca.crt

$(CONFIG)\bin\ca.crt: $(DEPS_1)
	@echo '      [Copy] $(CONFIG)/bin/ca.crt'
	if not exist "$(CONFIG)\bin" md "$(CONFIG)\bin"
	copy /Y src\paks\est\ca.crt $(CONFIG)\bin\ca.crt
!ENDIF

#
#   mpr.h
#
$(CONFIG)\inc\mpr.h: $(DEPS_2)
	@echo '      [Copy] $(CONFIG)/inc/mpr.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\mpr\mpr.h $(CONFIG)\inc\mpr.h

#
#   me.h
#
$(CONFIG)\inc\me.h: $(DEPS_3)
	@echo '      [Copy] $(CONFIG)/inc/me.h'

#
#   osdep.h
#
$(CONFIG)\inc\osdep.h: $(DEPS_4)
	@echo '      [Copy] $(CONFIG)/inc/osdep.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\osdep\osdep.h $(CONFIG)\inc\osdep.h

#
#   mprLib.obj
#
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\me.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\mpr.h
DEPS_5 = $(DEPS_5) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\mprLib.obj: \
    src\paks\mpr\mprLib.c $(DEPS_5)
	@echo '   [Compile] $(CONFIG)/obj/mprLib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\mprLib.obj -Fd$(CONFIG)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\mpr\mprLib.c

#
#   libmpr
#
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\mpr.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\me.h
DEPS_6 = $(DEPS_6) $(CONFIG)\inc\osdep.h
DEPS_6 = $(DEPS_6) $(CONFIG)\obj\mprLib.obj

$(CONFIG)\bin\libmpr.dll: $(DEPS_6)
	@echo '      [Link] $(CONFIG)/bin/libmpr.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\mprLib.obj" $(LIBS) 

#
#   pcre.h
#
$(CONFIG)\inc\pcre.h: $(DEPS_7)
	@echo '      [Copy] $(CONFIG)/inc/pcre.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\pcre\pcre.h $(CONFIG)\inc\pcre.h

#
#   pcre.obj
#
DEPS_8 = $(DEPS_8) $(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) $(CONFIG)\inc\pcre.h

$(CONFIG)\obj\pcre.obj: \
    src\paks\pcre\pcre.c $(DEPS_8)
	@echo '   [Compile] $(CONFIG)/obj/pcre.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\pcre.obj -Fd$(CONFIG)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\pcre\pcre.c

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\pcre.h
DEPS_9 = $(DEPS_9) $(CONFIG)\inc\me.h
DEPS_9 = $(DEPS_9) $(CONFIG)\obj\pcre.obj

$(CONFIG)\bin\libpcre.dll: $(DEPS_9)
	@echo '      [Link] $(CONFIG)/bin/libpcre.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\pcre.obj" $(LIBS) 
!ENDIF

#
#   http.h
#
$(CONFIG)\inc\http.h: $(DEPS_10)
	@echo '      [Copy] $(CONFIG)/inc/http.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\http\http.h $(CONFIG)\inc\http.h

#
#   httpLib.obj
#
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\me.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\http.h
DEPS_11 = $(DEPS_11) $(CONFIG)\inc\mpr.h

$(CONFIG)\obj\httpLib.obj: \
    src\paks\http\httpLib.c $(DEPS_11)
	@echo '   [Compile] $(CONFIG)/obj/httpLib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\httpLib.obj -Fd$(CONFIG)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\http\httpLib.c

#
#   libhttp
#
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\mpr.h
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\me.h
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\osdep.h
DEPS_12 = $(DEPS_12) $(CONFIG)\obj\mprLib.obj
DEPS_12 = $(DEPS_12) $(CONFIG)\bin\libmpr.dll
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\pcre.h
DEPS_12 = $(DEPS_12) $(CONFIG)\obj\pcre.obj
!IF "$(ME_COM_PCRE)" == "1"
DEPS_12 = $(DEPS_12) $(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_12 = $(DEPS_12) $(CONFIG)\inc\http.h
DEPS_12 = $(DEPS_12) $(CONFIG)\obj\httpLib.obj

LIBS_12 = $(LIBS_12) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_12 = $(LIBS_12) libpcre.lib
!ENDIF

$(CONFIG)\bin\libhttp.dll: $(DEPS_12)
	@echo '      [Link] $(CONFIG)/bin/libhttp.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\httpLib.obj" $(LIBPATHS_12) $(LIBS_12) $(LIBS_12) $(LIBS) 

#
#   zlib.h
#
$(CONFIG)\inc\zlib.h: $(DEPS_13)
	@echo '      [Copy] $(CONFIG)/inc/zlib.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\zlib\zlib.h $(CONFIG)\inc\zlib.h

#
#   zlib.obj
#
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\me.h
DEPS_14 = $(DEPS_14) $(CONFIG)\inc\zlib.h

$(CONFIG)\obj\zlib.obj: \
    src\paks\zlib\zlib.c $(DEPS_14)
	@echo '   [Compile] $(CONFIG)/obj/zlib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\zlib.obj -Fd$(CONFIG)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\zlib\zlib.c

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\zlib.h
DEPS_15 = $(DEPS_15) $(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) $(CONFIG)\obj\zlib.obj

$(CONFIG)\bin\libzlib.dll: $(DEPS_15)
	@echo '      [Link] $(CONFIG)/bin/libzlib.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\zlib.obj" $(LIBS) 
!ENDIF

#
#   ejs.h
#
$(CONFIG)\inc\ejs.h: $(DEPS_16)
	@echo '      [Copy] $(CONFIG)/inc/ejs.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejs.h $(CONFIG)\inc\ejs.h

#
#   ejs.slots.h
#
$(CONFIG)\inc\ejs.slots.h: $(DEPS_17)
	@echo '      [Copy] $(CONFIG)/inc/ejs.slots.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejs.slots.h $(CONFIG)\inc\ejs.slots.h

#
#   ejsByteGoto.h
#
$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_18)
	@echo '      [Copy] $(CONFIG)/inc/ejsByteGoto.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\ejs\ejsByteGoto.h $(CONFIG)\inc\ejsByteGoto.h

#
#   ejsLib.obj
#
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\me.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\ejs.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\mpr.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\pcre.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\osdep.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\http.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\ejs.slots.h
DEPS_19 = $(DEPS_19) $(CONFIG)\inc\zlib.h

$(CONFIG)\obj\ejsLib.obj: \
    src\paks\ejs\ejsLib.c $(DEPS_19)
	@echo '   [Compile] $(CONFIG)/obj/ejsLib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\ejsLib.obj -Fd$(CONFIG)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsLib.c

!IF "$(ME_COM_EJS)" == "1"
#
#   libejs
#
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\mpr.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\me.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\osdep.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\mprLib.obj
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libmpr.dll
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\pcre.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\pcre.obj
!IF "$(ME_COM_PCRE)" == "1"
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\http.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\httpLib.obj
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libhttp.dll
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\zlib.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\zlib.obj
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_20 = $(DEPS_20) $(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\ejs.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\ejs.slots.h
DEPS_20 = $(DEPS_20) $(CONFIG)\inc\ejsByteGoto.h
DEPS_20 = $(DEPS_20) $(CONFIG)\obj\ejsLib.obj

LIBS_20 = $(LIBS_20) libhttp.lib
LIBS_20 = $(LIBS_20) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_20 = $(LIBS_20) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_20 = $(LIBS_20) libzlib.lib
!ENDIF

$(CONFIG)\bin\libejs.dll: $(DEPS_20)
	@echo '      [Link] $(CONFIG)/bin/libejs.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\ejsLib.obj" $(LIBPATHS_20) $(LIBS_20) $(LIBS_20) $(LIBS) 
!ENDIF

#
#   ejsc.obj
#
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\me.h
DEPS_21 = $(DEPS_21) $(CONFIG)\inc\ejs.h

$(CONFIG)\obj\ejsc.obj: \
    src\paks\ejs\ejsc.c $(DEPS_21)
	@echo '   [Compile] $(CONFIG)/obj/ejsc.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\ejsc.obj -Fd$(CONFIG)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsc.c

!IF "$(ME_COM_EJS)" == "1"
#
#   ejsc
#
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\mpr.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\me.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\osdep.h
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\mprLib.obj
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libmpr.dll
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\pcre.h
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\pcre.obj
!IF "$(ME_COM_PCRE)" == "1"
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\http.h
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\httpLib.obj
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libhttp.dll
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\zlib.h
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\zlib.obj
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\ejs.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\ejs.slots.h
DEPS_22 = $(DEPS_22) $(CONFIG)\inc\ejsByteGoto.h
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\ejsLib.obj
DEPS_22 = $(DEPS_22) $(CONFIG)\bin\libejs.dll
DEPS_22 = $(DEPS_22) $(CONFIG)\obj\ejsc.obj

LIBS_22 = $(LIBS_22) libejs.lib
LIBS_22 = $(LIBS_22) libhttp.lib
LIBS_22 = $(LIBS_22) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_22 = $(LIBS_22) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_22 = $(LIBS_22) libzlib.lib
!ENDIF

$(CONFIG)\bin\ejsc.exe: $(DEPS_22)
	@echo '      [Link] $(CONFIG)/bin/ejsc.exe'
	"$(LD)" -out:$(CONFIG)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\ejsc.obj" $(LIBPATHS_22) $(LIBS_22) $(LIBS_22) $(LIBS) 
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejs.mod
#
DEPS_23 = $(DEPS_23) src\paks\ejs\ejs.es
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\mpr.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\me.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\osdep.h
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\mprLib.obj
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\libmpr.dll
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\pcre.h
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\pcre.obj
!IF "$(ME_COM_PCRE)" == "1"
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\http.h
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\httpLib.obj
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\libhttp.dll
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\zlib.h
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\zlib.obj
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\ejs.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\ejs.slots.h
DEPS_23 = $(DEPS_23) $(CONFIG)\inc\ejsByteGoto.h
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\ejsLib.obj
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\libejs.dll
DEPS_23 = $(DEPS_23) $(CONFIG)\obj\ejsc.obj
DEPS_23 = $(DEPS_23) $(CONFIG)\bin\ejsc.exe

$(CONFIG)\bin\ejs.mod: $(DEPS_23)
	cd src\paks\ejs
	"..\..\..\$(CONFIG)\bin\ejsc" --out "..\..\..\$(CONFIG)\bin\ejs.mod" --optimize 9 --bind --require null ejs.es
	cd ..\..\..
!ENDIF


#
#   est.h
#
$(CONFIG)\inc\est.h: $(DEPS_24)
	@echo '      [Copy] $(CONFIG)/inc/est.h'
	if not exist "$(CONFIG)\inc" md "$(CONFIG)\inc"
	copy /Y src\paks\est\est.h $(CONFIG)\inc\est.h

#
#   estLib.obj
#
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\me.h
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\est.h
DEPS_25 = $(DEPS_25) $(CONFIG)\inc\osdep.h

$(CONFIG)\obj\estLib.obj: \
    src\paks\est\estLib.c $(DEPS_25)
	@echo '   [Compile] $(CONFIG)/obj/estLib.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\estLib.obj -Fd$(CONFIG)\obj\estLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\est\estLib.c

!IF "$(ME_COM_EST)" == "1"
#
#   libest
#
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\est.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\me.h
DEPS_26 = $(DEPS_26) $(CONFIG)\inc\osdep.h
DEPS_26 = $(DEPS_26) $(CONFIG)\obj\estLib.obj

$(CONFIG)\bin\libest.dll: $(DEPS_26)
	@echo '      [Link] $(CONFIG)/bin/libest.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\estLib.obj" $(LIBS) 
!ENDIF

#
#   mprSsl.obj
#
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\me.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\mpr.h
DEPS_27 = $(DEPS_27) $(CONFIG)\inc\est.h

$(CONFIG)\obj\mprSsl.obj: \
    src\paks\mpr\mprSsl.c $(DEPS_27)
	@echo '   [Compile] $(CONFIG)/obj/mprSsl.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\mprSsl.obj -Fd$(CONFIG)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) "-I$(ME_EXT_MATRIXSSL_PATH)" "-I$(ME_EXT_MATRIXSSL_PATH)\matrixssl" "-I$(ME_EXT_NANOSSL_PATH)\src" src\paks\mpr\mprSsl.c

#
#   libmprssl
#
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\mpr.h
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\me.h
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\osdep.h
DEPS_28 = $(DEPS_28) $(CONFIG)\obj\mprLib.obj
DEPS_28 = $(DEPS_28) $(CONFIG)\bin\libmpr.dll
DEPS_28 = $(DEPS_28) $(CONFIG)\inc\est.h
DEPS_28 = $(DEPS_28) $(CONFIG)\obj\estLib.obj
!IF "$(ME_COM_EST)" == "1"
DEPS_28 = $(DEPS_28) $(CONFIG)\bin\libest.dll
!ENDIF
DEPS_28 = $(DEPS_28) $(CONFIG)\obj\mprSsl.obj

LIBS_28 = $(LIBS_28) libmpr.lib
!IF "$(ME_COM_EST)" == "1"
LIBS_28 = $(LIBS_28) libest.lib
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == "1"
LIBS_28 = $(LIBS_28) libmatrixssl.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_EXT_MATRIXSSL_PATH)
!ENDIF
!IF "$(ME_COM_NANOSSL)" == "1"
LIBS_28 = $(LIBS_28) libssls.lib
LIBPATHS_28 = $(LIBPATHS_28) -libpath:$(ME_EXT_NANOSSL_PATH)/bin
!ENDIF

$(CONFIG)\bin\libmprssl.dll: $(DEPS_28)
	@echo '      [Link] $(CONFIG)/bin/libmprssl.dll'
	"$(LD)" -dll -out:$(CONFIG)\bin\libmprssl.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)   "$(CONFIG)\obj\mprSsl.obj" $(LIBPATHS_28) $(LIBS_28) $(LIBS_28) $(LIBS) 

#
#   me.obj
#
DEPS_29 = $(DEPS_29) $(CONFIG)\inc\me.h
DEPS_29 = $(DEPS_29) $(CONFIG)\inc\ejs.h

$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_29)
	@echo '   [Compile] $(CONFIG)/obj/me.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\me.obj -Fd$(CONFIG)\obj\me.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\me.c

#
#   me
#
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\mpr.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\me.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\osdep.h
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\mprLib.obj
DEPS_30 = $(DEPS_30) $(CONFIG)\bin\libmpr.dll
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\pcre.h
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\pcre.obj
!IF "$(ME_COM_PCRE)" == "1"
DEPS_30 = $(DEPS_30) $(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\http.h
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\httpLib.obj
DEPS_30 = $(DEPS_30) $(CONFIG)\bin\libhttp.dll
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\zlib.h
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\zlib.obj
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_30 = $(DEPS_30) $(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\ejs.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\ejs.slots.h
DEPS_30 = $(DEPS_30) $(CONFIG)\inc\ejsByteGoto.h
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\ejsLib.obj
!IF "$(ME_COM_EJS)" == "1"
DEPS_30 = $(DEPS_30) $(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_30 = $(DEPS_30) $(CONFIG)\obj\me.obj

LIBS_30 = $(LIBS_30) libmpr.lib
LIBS_30 = $(LIBS_30) libhttp.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_30 = $(LIBS_30) libpcre.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_30 = $(LIBS_30) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_30 = $(LIBS_30) libzlib.lib
!ENDIF

$(CONFIG)\bin\me.exe: $(DEPS_30)
	@echo '      [Link] $(CONFIG)/bin/me.exe'
	"$(LD)" -out:$(CONFIG)\bin\me.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\me.obj" $(LIBPATHS_30) $(LIBS_30) $(LIBS_30) $(LIBS) 

#
#   me-core
#
DEPS_31 = $(DEPS_31) src\configure\appweb.me
DEPS_31 = $(DEPS_31) src\configure\compiler.me
DEPS_31 = $(DEPS_31) src\configure\lib.me
DEPS_31 = $(DEPS_31) src\configure\link.me
DEPS_31 = $(DEPS_31) src\configure\rc.me
DEPS_31 = $(DEPS_31) src\configure\vxworks.me
DEPS_31 = $(DEPS_31) src\configure\winsdk.me
DEPS_31 = $(DEPS_31) src\configure.es
DEPS_31 = $(DEPS_31) src\generate.es
DEPS_31 = $(DEPS_31) src\me.es
DEPS_31 = $(DEPS_31) src\os\freebsd.me
DEPS_31 = $(DEPS_31) src\os\gcc.me
DEPS_31 = $(DEPS_31) src\os\linux.me
DEPS_31 = $(DEPS_31) src\os\macosx.me
DEPS_31 = $(DEPS_31) src\os\solaris.me
DEPS_31 = $(DEPS_31) src\os\unix.me
DEPS_31 = $(DEPS_31) src\os\vxworks.me
DEPS_31 = $(DEPS_31) src\os\windows.me
DEPS_31 = $(DEPS_31) src\simple.me
DEPS_31 = $(DEPS_31) src\standard.me
DEPS_31 = $(DEPS_31) src\vstudio.es
DEPS_31 = $(DEPS_31) src\xcode.es

$(CONFIG)\bin\.updated: $(DEPS_31)
	@echo '      [Copy] $(CONFIG)/bin'
	if not exist "$(CONFIG)\bin\configure" md "$(CONFIG)\bin\configure"
	copy /Y src\configure\appweb.me $(CONFIG)\bin\configure\appweb.me
	copy /Y src\configure\compiler.me $(CONFIG)\bin\configure\compiler.me
	copy /Y src\configure\lib.me $(CONFIG)\bin\configure\lib.me
	copy /Y src\configure\link.me $(CONFIG)\bin\configure\link.me
	copy /Y src\configure\rc.me $(CONFIG)\bin\configure\rc.me
	copy /Y src\configure\vxworks.me $(CONFIG)\bin\configure\vxworks.me
	copy /Y src\configure\winsdk.me $(CONFIG)\bin\configure\winsdk.me
	if not exist "$(CONFIG)\bin" md "$(CONFIG)\bin"
	copy /Y src\configure.es $(CONFIG)\bin\configure.es
	copy /Y src\generate.es $(CONFIG)\bin\generate.es
	copy /Y src\me.es $(CONFIG)\bin\me.es
	if not exist "$(CONFIG)\bin\os" md "$(CONFIG)\bin\os"
	copy /Y src\os\freebsd.me $(CONFIG)\bin\os\freebsd.me
	copy /Y src\os\gcc.me $(CONFIG)\bin\os\gcc.me
	copy /Y src\os\linux.me $(CONFIG)\bin\os\linux.me
	copy /Y src\os\macosx.me $(CONFIG)\bin\os\macosx.me
	copy /Y src\os\solaris.me $(CONFIG)\bin\os\solaris.me
	copy /Y src\os\unix.me $(CONFIG)\bin\os\unix.me
	copy /Y src\os\vxworks.me $(CONFIG)\bin\os\vxworks.me
	copy /Y src\os\windows.me $(CONFIG)\bin\os\windows.me
	copy /Y src\simple.me $(CONFIG)\bin\simple.me
	copy /Y src\standard.me $(CONFIG)\bin\standard.me
	copy /Y src\vstudio.es $(CONFIG)\bin\vstudio.es
	copy /Y src\xcode.es $(CONFIG)\bin\xcode.es
	if exist "$(CONFIG)\bin\.updated" rd /Q /S "$(CONFIG)\bin\.updated"
	if not exist "$(CONFIG)\bin\.updated" md "$(CONFIG)\bin\.updated"

#
#   removeFiles.obj
#
DEPS_32 = $(DEPS_32) $(CONFIG)\inc\me.h

$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_32)
	@echo '   [Compile] $(CONFIG)/obj/removeFiles.obj'
	"$(CC)" -c -Fo$(CONFIG)\obj\removeFiles.obj -Fd$(CONFIG)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c

#
#   removeFiles
#
DEPS_33 = $(DEPS_33) $(CONFIG)\inc\me.h
DEPS_33 = $(DEPS_33) $(CONFIG)\obj\removeFiles.obj

$(CONFIG)\bin\removeFiles.exe: $(DEPS_33)
	@echo '      [Link] $(CONFIG)/bin/removeFiles.exe'
	"$(LD)" -out:$(CONFIG)\bin\removeFiles.exe -entry:WinMainCRTStartup -subsystem:windows $(LDFLAGS) $(LIBPATHS) "$(CONFIG)\obj\removeFiles.obj" $(LIBS) 

#
#   stop
#
stop: $(DEPS_34)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_35)
	cd .
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y $(CONFIG)\bin\me.exe $(ME_VAPP_PREFIX)\bin\me.exe
	copy /Y $(CONFIG)\bin\libejs.dll $(ME_VAPP_PREFIX)\bin\libejs.dll
	copy /Y $(CONFIG)\bin\libest.dll $(ME_VAPP_PREFIX)\bin\libest.dll
	copy /Y $(CONFIG)\bin\libhttp.dll $(ME_VAPP_PREFIX)\bin\libhttp.dll
	copy /Y $(CONFIG)\bin\libmpr.dll $(ME_VAPP_PREFIX)\bin\libmpr.dll
	copy /Y $(CONFIG)\bin\libmprssl.dll $(ME_VAPP_PREFIX)\bin\libmprssl.dll
	copy /Y $(CONFIG)\bin\libpcre.dll $(ME_VAPP_PREFIX)\bin\libpcre.dll
	copy /Y $(CONFIG)\bin\libzlib.dll $(ME_VAPP_PREFIX)\bin\libzlib.dll
	copy /Y $(CONFIG)\bin\ca.crt $(ME_VAPP_PREFIX)\bin\ca.crt
	copy /Y $(CONFIG)\bin\ejs.mod $(ME_VAPP_PREFIX)\bin\ejs.mod
	if not exist "$(ME_VAPP_PREFIX)\bin\configure" md "$(ME_VAPP_PREFIX)\bin\configure"
	copy /Y src\configure\appweb.me $(ME_VAPP_PREFIX)\bin\configure\appweb.me
	copy /Y src\configure\compiler.me $(ME_VAPP_PREFIX)\bin\configure\compiler.me
	copy /Y src\configure\lib.me $(ME_VAPP_PREFIX)\bin\configure\lib.me
	copy /Y src\configure\link.me $(ME_VAPP_PREFIX)\bin\configure\link.me
	copy /Y src\configure\rc.me $(ME_VAPP_PREFIX)\bin\configure\rc.me
	copy /Y src\configure\vxworks.me $(ME_VAPP_PREFIX)\bin\configure\vxworks.me
	copy /Y src\configure\winsdk.me $(ME_VAPP_PREFIX)\bin\configure\winsdk.me
	copy /Y src\configure.es $(ME_VAPP_PREFIX)\bin\configure.es
	copy /Y src\generate.es $(ME_VAPP_PREFIX)\bin\generate.es
	copy /Y src\me.es $(ME_VAPP_PREFIX)\bin\me.es
	if not exist "$(ME_VAPP_PREFIX)\bin\os" md "$(ME_VAPP_PREFIX)\bin\os"
	copy /Y src\os\freebsd.me $(ME_VAPP_PREFIX)\bin\os\freebsd.me
	copy /Y src\os\gcc.me $(ME_VAPP_PREFIX)\bin\os\gcc.me
	copy /Y src\os\linux.me $(ME_VAPP_PREFIX)\bin\os\linux.me
	copy /Y src\os\macosx.me $(ME_VAPP_PREFIX)\bin\os\macosx.me
	copy /Y src\os\solaris.me $(ME_VAPP_PREFIX)\bin\os\solaris.me
	copy /Y src\os\unix.me $(ME_VAPP_PREFIX)\bin\os\unix.me
	copy /Y src\os\vxworks.me $(ME_VAPP_PREFIX)\bin\os\vxworks.me
	copy /Y src\os\windows.me $(ME_VAPP_PREFIX)\bin\os\windows.me
	copy /Y src\simple.me $(ME_VAPP_PREFIX)\bin\simple.me
	copy /Y src\standard.me $(ME_VAPP_PREFIX)\bin\standard.me
	copy /Y src\vstudio.es $(ME_VAPP_PREFIX)\bin\vstudio.es
	copy /Y src\xcode.es $(ME_VAPP_PREFIX)\bin\xcode.es
	cd .

#
#   start
#
start: $(DEPS_36)
#  Omit build script start

#
#   install
#
DEPS_37 = $(DEPS_37) stop
DEPS_37 = $(DEPS_37) installBinary
DEPS_37 = $(DEPS_37) start

install: $(DEPS_37)
#  Omit build script install

#
#   uninstall
#
DEPS_38 = $(DEPS_38) stop

uninstall: $(DEPS_38)
	cd .
	if exist "$(ME_VAPP_PREFIX)" rd /Q /S "$(ME_VAPP_PREFIX)"
	if exist "$(ME_APP_PREFIX)\latest" del /Q "$(ME_APP_PREFIX)\latest"
	if exist "$(ME_APP_PREFIX)" rd /Q "$(ME_APP_PREFIX)"
	cd .

#
#   version
#
version: $(DEPS_39)
#  Omit build script version

