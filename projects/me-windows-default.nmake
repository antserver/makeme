#
#   me-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = me
VERSION               = 0.8.6

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_HTTP)" == ""
ME_COM_OPENSSL_PATH   = "/usr"
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WINSDK=$(ME_COM_WINSDK) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis MakeMe
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.es
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.mod
!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.exe
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ca.crt
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
!IF "$(ME_COM_EST)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libest.dll
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libmprssl.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libtestme.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\me.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.es

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\me-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\estLib.obj" del /Q "build\$(CONFIG)\obj\estLib.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\libtestme.obj" del /Q "build\$(CONFIG)\obj\libtestme.obj"
	if exist "build\$(CONFIG)\obj\me.obj" del /Q "build\$(CONFIG)\obj\me.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\mprSsl.obj" del /Q "build\$(CONFIG)\obj\mprSsl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\testme.obj" del /Q "build\$(CONFIG)\obj\testme.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\ejs.testme.es" del /Q "build\$(CONFIG)\bin\ejs.testme.es"
	if exist "build\$(CONFIG)\bin\ejsc.exe" del /Q "build\$(CONFIG)\bin\ejsc.exe"
	if exist "build\$(CONFIG)\bin\ejsc.lib" del /Q "build\$(CONFIG)\bin\ejsc.lib"
	if exist "build\$(CONFIG)\bin\ejsc.pdb" del /Q "build\$(CONFIG)\bin\ejsc.pdb"
	if exist "build\$(CONFIG)\bin\ejsc.exp" del /Q "build\$(CONFIG)\bin\ejsc.exp"
	if exist "build\$(CONFIG)\bin\ejs.exe" del /Q "build\$(CONFIG)\bin\ejs.exe"
	if exist "build\$(CONFIG)\bin\ejs.lib" del /Q "build\$(CONFIG)\bin\ejs.lib"
	if exist "build\$(CONFIG)\bin\ejs.pdb" del /Q "build\$(CONFIG)\bin\ejs.pdb"
	if exist "build\$(CONFIG)\bin\ejs.exp" del /Q "build\$(CONFIG)\bin\ejs.exp"
	if exist "build\$(CONFIG)\bin\ca.crt" del /Q "build\$(CONFIG)\bin\ca.crt"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libest.dll" del /Q "build\$(CONFIG)\bin\libest.dll"
	if exist "build\$(CONFIG)\bin\libest.lib" del /Q "build\$(CONFIG)\bin\libest.lib"
	if exist "build\$(CONFIG)\bin\libest.pdb" del /Q "build\$(CONFIG)\bin\libest.pdb"
	if exist "build\$(CONFIG)\bin\libest.exp" del /Q "build\$(CONFIG)\bin\libest.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libmprssl.dll" del /Q "build\$(CONFIG)\bin\libmprssl.dll"
	if exist "build\$(CONFIG)\bin\libmprssl.lib" del /Q "build\$(CONFIG)\bin\libmprssl.lib"
	if exist "build\$(CONFIG)\bin\libmprssl.pdb" del /Q "build\$(CONFIG)\bin\libmprssl.pdb"
	if exist "build\$(CONFIG)\bin\libmprssl.exp" del /Q "build\$(CONFIG)\bin\libmprssl.exp"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libtestme.dll" del /Q "build\$(CONFIG)\bin\libtestme.dll"
	if exist "build\$(CONFIG)\bin\libtestme.lib" del /Q "build\$(CONFIG)\bin\libtestme.lib"
	if exist "build\$(CONFIG)\bin\libtestme.pdb" del /Q "build\$(CONFIG)\bin\libtestme.pdb"
	if exist "build\$(CONFIG)\bin\libtestme.exp" del /Q "build\$(CONFIG)\bin\libtestme.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\testme.exe" del /Q "build\$(CONFIG)\bin\testme.exe"
	if exist "build\$(CONFIG)\bin\testme.lib" del /Q "build\$(CONFIG)\bin\testme.lib"
	if exist "build\$(CONFIG)\bin\testme.pdb" del /Q "build\$(CONFIG)\bin\testme.pdb"
	if exist "build\$(CONFIG)\bin\testme.exp" del /Q "build\$(CONFIG)\bin\testme.exp"
	if exist "build\$(CONFIG)\bin\testme.es" del /Q "build\$(CONFIG)\bin\testme.es"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_51)

#
#   osdep.h
#
DEPS_52 = $(DEPS_52) src\osdep\osdep.h
DEPS_52 = $(DEPS_52) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_52)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_53 = $(DEPS_53) src\mpr\mpr.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\me.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_53)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   mpr.h
#

src\mpr\mpr.h: $(DEPS_54)

#
#   mprLib.obj
#
DEPS_55 = $(DEPS_55) src\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_55)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\mpr\mprLib.c $(LOG)

#
#   libmpr
#
DEPS_56 = $(DEPS_56) build\$(CONFIG)\inc\osdep.h
DEPS_56 = $(DEPS_56) build\$(CONFIG)\inc\mpr.h
DEPS_56 = $(DEPS_56) build\$(CONFIG)\obj\mprLib.obj

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_56)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\mprLib.obj" $(LIBS)  $(LOG)

#
#   pcre.h
#
DEPS_57 = $(DEPS_57) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_57)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   pcre.h
#

src\pcre\pcre.h: $(DEPS_58)

#
#   pcre.obj
#
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\me.h
DEPS_59 = $(DEPS_59) src\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_59)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_60 = $(DEPS_60) build\$(CONFIG)\inc\pcre.h
DEPS_60 = $(DEPS_60) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_60)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   http.h
#
DEPS_61 = $(DEPS_61) src\http\http.h
DEPS_61 = $(DEPS_61) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_61)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   http.h
#

src\http\http.h: $(DEPS_62)

#
#   httpLib.obj
#
DEPS_63 = $(DEPS_63) src\http\http.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_63)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http\httpLib.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_64 = $(DEPS_64) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_64 = $(DEPS_64) build\$(CONFIG)\inc\http.h
DEPS_64 = $(DEPS_64) build\$(CONFIG)\obj\httpLib.obj

LIBS_64 = $(LIBS_64) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_64 = $(LIBS_64) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_64)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_64) $(LIBS_64) $(LIBS_64) $(LIBS)  $(LOG)
!ENDIF

#
#   zlib.h
#
DEPS_65 = $(DEPS_65) src\zlib\zlib.h
DEPS_65 = $(DEPS_65) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_65)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   zlib.h
#

src\zlib\zlib.h: $(DEPS_66)

#
#   zlib.obj
#
DEPS_67 = $(DEPS_67) build\$(CONFIG)\inc\me.h
DEPS_67 = $(DEPS_67) src\zlib\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\zlib\zlib.c $(DEPS_67)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\zlib\zlib.c $(LOG)

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_68 = $(DEPS_68) build\$(CONFIG)\inc\zlib.h
DEPS_68 = $(DEPS_68) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_68)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   ejs.slots.h
#

src\ejs\ejs.slots.h: $(DEPS_69)

#
#   ejs.h
#
DEPS_70 = $(DEPS_70) src\ejs\ejs.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\me.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\osdep.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\mpr.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\http.h
DEPS_70 = $(DEPS_70) src\ejs\ejs.slots.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\pcre.h
DEPS_70 = $(DEPS_70) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_70)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejs.slots.h
#
DEPS_71 = $(DEPS_71) src\ejs\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_71)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_72 = $(DEPS_72) src\ejs\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_72)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   ejs.h
#

src\ejs\ejs.h: $(DEPS_73)

#
#   ejsLib.obj
#
DEPS_74 = $(DEPS_74) src\ejs\ejs.h
DEPS_74 = $(DEPS_74) build\$(CONFIG)\inc\mpr.h
DEPS_74 = $(DEPS_74) build\$(CONFIG)\inc\pcre.h
DEPS_74 = $(DEPS_74) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\ejs\ejsLib.c $(DEPS_74)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejsLib.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_75 = $(DEPS_75) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_75 = $(DEPS_75) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_75 = $(DEPS_75) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_75 = $(DEPS_75) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_75 = $(DEPS_75) build\$(CONFIG)\inc\ejs.h
DEPS_75 = $(DEPS_75) build\$(CONFIG)\inc\ejs.slots.h
DEPS_75 = $(DEPS_75) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_75 = $(DEPS_75) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_HTTP)" == "1"
LIBS_75 = $(LIBS_75) libhttp.lib
!ENDIF
LIBS_75 = $(LIBS_75) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_75 = $(LIBS_75) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_75 = $(LIBS_75) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_75)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_75) $(LIBS_75) $(LIBS_75) $(LIBS)  $(LOG)
!ENDIF

#
#   ejsc.obj
#
DEPS_76 = $(DEPS_76) src\ejs\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\ejs\ejsc.c $(DEPS_76)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejsc.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejsc
#
DEPS_77 = $(DEPS_77) build\$(CONFIG)\bin\libejs.dll
DEPS_77 = $(DEPS_77) build\$(CONFIG)\obj\ejsc.obj

LIBS_77 = $(LIBS_77) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_77 = $(LIBS_77) libhttp.lib
!ENDIF
LIBS_77 = $(LIBS_77) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_77 = $(LIBS_77) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_77 = $(LIBS_77) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejsc.exe: $(DEPS_77)
	@echo ..... [Link] build\$(CONFIG)\bin\ejsc.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_77) $(LIBS_77) $(LIBS_77) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejs.mod
#
DEPS_78 = $(DEPS_78) src\ejs\ejs.es
DEPS_78 = $(DEPS_78) build\$(CONFIG)\bin\ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_78)
	cd src\ejs
	@echo .. [Compile] ejs.mod
	..\..\$(BUILD)\bin\ejsc --out ../../$(BUILD)/bin/ejs.mod --optimize 9 --bind --require null ejs.es
	cd ..\..
!ENDIF

#
#   ejs.testme.es
#
DEPS_79 = $(DEPS_79) src\tm\ejs.testme.es

build\$(CONFIG)\bin\ejs.testme.es: $(DEPS_79)
	@echo ..... [Copy] build\$(CONFIG)\bin\ejs.testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\ejs.testme.es+modified build\$(CONFIG)\bin\ejs.testme.es $(LOG)

#
#   ejs.testme.mod
#
DEPS_80 = $(DEPS_80) src\tm\ejs.testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_80 = $(DEPS_80) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\ejs.testme.mod: $(DEPS_80)
	cd src\tm
	@echo .. [Compile] ejs.testme.mod
	..\..\$(BUILD)\bin\ejsc --debug --out ../../$(BUILD)/bin/ejs.testme.mod --optimize 9 ejs.testme.es
	cd ..\..

#
#   ejs.obj
#
DEPS_81 = $(DEPS_81) src\ejs\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\ejs\ejs.c $(DEPS_81)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejs.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejscmd
#
DEPS_82 = $(DEPS_82) build\$(CONFIG)\bin\libejs.dll
DEPS_82 = $(DEPS_82) build\$(CONFIG)\obj\ejs.obj

LIBS_82 = $(LIBS_82) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_82 = $(LIBS_82) libhttp.lib
!ENDIF
LIBS_82 = $(LIBS_82) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_82 = $(LIBS_82) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_82 = $(LIBS_82) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejs.exe: $(DEPS_82)
	@echo ..... [Link] build\$(CONFIG)\bin\ejs.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejs.obj" $(LIBPATHS_82) $(LIBS_82) $(LIBS_82) $(LIBS)  $(LOG)
!ENDIF

#
#   http-ca-crt
#
DEPS_83 = $(DEPS_83) src\http\ca.crt

build\$(CONFIG)\bin\ca.crt: $(DEPS_83)
	@echo ..... [Copy] build\$(CONFIG)\bin\ca.crt
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\http\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)

#
#   http.obj
#
DEPS_84 = $(DEPS_84) src\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_84)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http\http.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_85 = $(DEPS_85) build\$(CONFIG)\bin\libhttp.dll
DEPS_85 = $(DEPS_85) build\$(CONFIG)\obj\http.obj

LIBS_85 = $(LIBS_85) libhttp.lib
LIBS_85 = $(LIBS_85) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_85 = $(LIBS_85) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\http.exe: $(DEPS_85)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\http.obj" $(LIBPATHS_85) $(LIBS_85) $(LIBS_85) $(LIBS)  $(LOG)
!ENDIF

#
#   est.h
#
DEPS_86 = $(DEPS_86) src\est\est.h

build\$(CONFIG)\inc\est.h: $(DEPS_86)
	@echo ..... [Copy] build\$(CONFIG)\inc\est.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\est\est.h+modified build\$(CONFIG)\inc\est.h $(LOG)

#
#   est.h
#

src\est\est.h: $(DEPS_87)

#
#   estLib.obj
#
DEPS_88 = $(DEPS_88) src\est\est.h

build\$(CONFIG)\obj\estLib.obj: \
    src\est\estLib.c $(DEPS_88)
	@echo .. [Compile] build\$(CONFIG)\obj\estLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\estLib.obj -Fd$(BUILD)\obj\estLib.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) $(IFLAGS) src\est\estLib.c $(LOG)

!IF "$(ME_COM_EST)" == "1"
#
#   libest
#
DEPS_89 = $(DEPS_89) build\$(CONFIG)\inc\osdep.h
DEPS_89 = $(DEPS_89) build\$(CONFIG)\inc\est.h
DEPS_89 = $(DEPS_89) build\$(CONFIG)\obj\estLib.obj

build\$(CONFIG)\bin\libest.dll: $(DEPS_89)
	@echo ..... [Link] build\$(CONFIG)\bin\libest.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\estLib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   mprSsl.obj
#
DEPS_90 = $(DEPS_90) src\mpr\mpr.h

build\$(CONFIG)\obj\mprSsl.obj: \
    src\mpr\mprSsl.c $(DEPS_90)
	@echo .. [Compile] build\$(CONFIG)\obj\mprSsl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprSsl.obj -Fd$(BUILD)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr\mprSsl.c $(LOG)

#
#   libmprssl
#
DEPS_91 = $(DEPS_91) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_EST)" == "1"
DEPS_91 = $(DEPS_91) build\$(CONFIG)\bin\libest.dll
!ENDIF
DEPS_91 = $(DEPS_91) build\$(CONFIG)\obj\mprSsl.obj

LIBS_91 = $(LIBS_91) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_91 = $(LIBS_91) libeay32.lib
LIBPATHS_91 = $(LIBPATHS_91) -libpath:$(ME_COM_OPENSSL_PATH)/lib
LIBPATHS_91 = $(LIBPATHS_91) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_91 = $(LIBS_91) libssleay32.lib
LIBPATHS_91 = $(LIBPATHS_91) -libpath:$(ME_COM_OPENSSL_PATH)/lib
LIBPATHS_91 = $(LIBPATHS_91) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_91 = $(LIBS_91) libest.lib
!ENDIF

build\$(CONFIG)\bin\libmprssl.dll: $(DEPS_91)
	@echo ..... [Link] build\$(CONFIG)\bin\libmprssl.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmprssl.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)   "$(BUILD)\obj\mprSsl.obj" $(LIBPATHS_91) $(LIBS_91) $(LIBS_91) $(LIBS)  $(LOG)

#
#   testme.h
#
DEPS_92 = $(DEPS_92) src\tm\testme.h

build\$(CONFIG)\inc\testme.h: $(DEPS_92)
	@echo ..... [Copy] build\$(CONFIG)\inc\testme.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\tm\testme.h+modified build\$(CONFIG)\inc\testme.h $(LOG)

#
#   testme.h
#

src\tm\testme.h: $(DEPS_93)

#
#   libtestme.obj
#
DEPS_94 = $(DEPS_94) src\tm\testme.h

build\$(CONFIG)\obj\libtestme.obj: \
    src\tm\libtestme.c $(DEPS_94)
	@echo .. [Compile] build\$(CONFIG)\obj\libtestme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\libtestme.obj -Fd$(BUILD)\obj\libtestme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\libtestme.c $(LOG)

#
#   libtestme
#
DEPS_95 = $(DEPS_95) build\$(CONFIG)\inc\testme.h
DEPS_95 = $(DEPS_95) build\$(CONFIG)\obj\libtestme.obj

build\$(CONFIG)\bin\libtestme.dll: $(DEPS_95)
	@echo ..... [Link] build\$(CONFIG)\bin\libtestme.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libtestme.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\libtestme.obj" $(LIBS)  $(LOG)

#
#   me.mod
#
DEPS_96 = $(DEPS_96) src\Builder.es
DEPS_96 = $(DEPS_96) src\Loader.es
DEPS_96 = $(DEPS_96) src\MakeMe.es
DEPS_96 = $(DEPS_96) src\Me.es
DEPS_96 = $(DEPS_96) src\Script.es
DEPS_96 = $(DEPS_96) src\Target.es
DEPS_96 = $(DEPS_96) paks\ejs-version\Version.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_96 = $(DEPS_96) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\me.mod: $(DEPS_96)
	@echo .. [Compile] me.mod
	.\$(BUILD)\bin\ejsc --debug --out ./$(BUILD)/bin/me.mod --optimize 9 src/Builder.es src/Loader.es src/MakeMe.es src/Me.es src/Script.es src/Target.es paks/ejs-version/Version.es

#
#   pakrun
#
DEPS_97 = $(DEPS_97) paks\me-components\appweb.me
DEPS_97 = $(DEPS_97) paks\me-components\compiler.me
DEPS_97 = $(DEPS_97) paks\me-components\components.me
DEPS_97 = $(DEPS_97) paks\me-components\lib.me
DEPS_97 = $(DEPS_97) paks\me-components\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-components\link.me
DEPS_97 = $(DEPS_97) paks\me-components\package.json
DEPS_97 = $(DEPS_97) paks\me-components\rc.me
DEPS_97 = $(DEPS_97) paks\me-components\README.md
DEPS_97 = $(DEPS_97) paks\me-components\testme.me
DEPS_97 = $(DEPS_97) paks\me-components\vxworks.me
DEPS_97 = $(DEPS_97) paks\me-components\winsdk.me
DEPS_97 = $(DEPS_97) paks\me-configuration\Configuration.es
DEPS_97 = $(DEPS_97) paks\me-configuration\configuration.me
DEPS_97 = $(DEPS_97) paks\me-configuration\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-configuration\package.json
DEPS_97 = $(DEPS_97) paks\me-configuration\README.md
DEPS_97 = $(DEPS_97) paks\me-installs\Installs.es
DEPS_97 = $(DEPS_97) paks\me-installs\installs.me
DEPS_97 = $(DEPS_97) paks\me-installs\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-installs\manifest.me
DEPS_97 = $(DEPS_97) paks\me-installs\package.json
DEPS_97 = $(DEPS_97) paks\me-installs\README.md
DEPS_97 = $(DEPS_97) paks\me-os\freebsd.me
DEPS_97 = $(DEPS_97) paks\me-os\gcc.me
DEPS_97 = $(DEPS_97) paks\me-os\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-os\linux.me
DEPS_97 = $(DEPS_97) paks\me-os\macosx.me
DEPS_97 = $(DEPS_97) paks\me-os\os.me
DEPS_97 = $(DEPS_97) paks\me-os\package.json
DEPS_97 = $(DEPS_97) paks\me-os\README.md
DEPS_97 = $(DEPS_97) paks\me-os\solaris.me
DEPS_97 = $(DEPS_97) paks\me-os\unix.me
DEPS_97 = $(DEPS_97) paks\me-os\vxworks.me
DEPS_97 = $(DEPS_97) paks\me-os\windows.me
DEPS_97 = $(DEPS_97) paks\me-project\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-project\package.json
DEPS_97 = $(DEPS_97) paks\me-project\Project.es
DEPS_97 = $(DEPS_97) paks\me-project\project.me
DEPS_97 = $(DEPS_97) paks\me-project\README.md
DEPS_97 = $(DEPS_97) paks\me-vstudio\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-vstudio\package.json
DEPS_97 = $(DEPS_97) paks\me-vstudio\README.md
DEPS_97 = $(DEPS_97) paks\me-vstudio\Vstudio.es
DEPS_97 = $(DEPS_97) paks\me-vstudio\vstudio.me
DEPS_97 = $(DEPS_97) paks\me-xcode\LICENSE.md
DEPS_97 = $(DEPS_97) paks\me-xcode\package.json
DEPS_97 = $(DEPS_97) paks\me-xcode\README.md
DEPS_97 = $(DEPS_97) paks\me-xcode\Xcode.es
DEPS_97 = $(DEPS_97) paks\me-xcode\xcode.me

build\$(CONFIG)\.pakrun-modified: $(DEPS_97)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin\paks\me-components" md "build\$(CONFIG)\bin\paks\me-components"
	copy /Y /B paks\me-components\appweb.me+modified build\$(CONFIG)\bin\paks\me-components\appweb.me $(LOG)
	copy /Y /B paks\me-components\compiler.me+modified build\$(CONFIG)\bin\paks\me-components\compiler.me $(LOG)
	copy /Y /B paks\me-components\components.me+modified build\$(CONFIG)\bin\paks\me-components\components.me $(LOG)
	copy /Y /B paks\me-components\lib.me+modified build\$(CONFIG)\bin\paks\me-components\lib.me $(LOG)
	copy /Y /B paks\me-components\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-components\LICENSE.md $(LOG)
	copy /Y /B paks\me-components\link.me+modified build\$(CONFIG)\bin\paks\me-components\link.me $(LOG)
	copy /Y /B paks\me-components\package.json+modified build\$(CONFIG)\bin\paks\me-components\package.json $(LOG)
	copy /Y /B paks\me-components\rc.me+modified build\$(CONFIG)\bin\paks\me-components\rc.me $(LOG)
	copy /Y /B paks\me-components\README.md+modified build\$(CONFIG)\bin\paks\me-components\README.md $(LOG)
	copy /Y /B paks\me-components\testme.me+modified build\$(CONFIG)\bin\paks\me-components\testme.me $(LOG)
	copy /Y /B paks\me-components\vxworks.me+modified build\$(CONFIG)\bin\paks\me-components\vxworks.me $(LOG)
	copy /Y /B paks\me-components\winsdk.me+modified build\$(CONFIG)\bin\paks\me-components\winsdk.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-configuration" md "build\$(CONFIG)\bin\paks\me-configuration"
	copy /Y /B paks\me-configuration\Configuration.es+modified build\$(CONFIG)\bin\paks\me-configuration\Configuration.es $(LOG)
	copy /Y /B paks\me-configuration\configuration.me+modified build\$(CONFIG)\bin\paks\me-configuration\configuration.me $(LOG)
	copy /Y /B paks\me-configuration\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-configuration\LICENSE.md $(LOG)
	copy /Y /B paks\me-configuration\package.json+modified build\$(CONFIG)\bin\paks\me-configuration\package.json $(LOG)
	copy /Y /B paks\me-configuration\README.md+modified build\$(CONFIG)\bin\paks\me-configuration\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-installs" md "build\$(CONFIG)\bin\paks\me-installs"
	copy /Y /B paks\me-installs\Installs.es+modified build\$(CONFIG)\bin\paks\me-installs\Installs.es $(LOG)
	copy /Y /B paks\me-installs\installs.me+modified build\$(CONFIG)\bin\paks\me-installs\installs.me $(LOG)
	copy /Y /B paks\me-installs\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-installs\LICENSE.md $(LOG)
	copy /Y /B paks\me-installs\manifest.me+modified build\$(CONFIG)\bin\paks\me-installs\manifest.me $(LOG)
	copy /Y /B paks\me-installs\package.json+modified build\$(CONFIG)\bin\paks\me-installs\package.json $(LOG)
	copy /Y /B paks\me-installs\README.md+modified build\$(CONFIG)\bin\paks\me-installs\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-os" md "build\$(CONFIG)\bin\paks\me-os"
	copy /Y /B paks\me-os\freebsd.me+modified build\$(CONFIG)\bin\paks\me-os\freebsd.me $(LOG)
	copy /Y /B paks\me-os\gcc.me+modified build\$(CONFIG)\bin\paks\me-os\gcc.me $(LOG)
	copy /Y /B paks\me-os\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-os\LICENSE.md $(LOG)
	copy /Y /B paks\me-os\linux.me+modified build\$(CONFIG)\bin\paks\me-os\linux.me $(LOG)
	copy /Y /B paks\me-os\macosx.me+modified build\$(CONFIG)\bin\paks\me-os\macosx.me $(LOG)
	copy /Y /B paks\me-os\os.me+modified build\$(CONFIG)\bin\paks\me-os\os.me $(LOG)
	copy /Y /B paks\me-os\package.json+modified build\$(CONFIG)\bin\paks\me-os\package.json $(LOG)
	copy /Y /B paks\me-os\README.md+modified build\$(CONFIG)\bin\paks\me-os\README.md $(LOG)
	copy /Y /B paks\me-os\solaris.me+modified build\$(CONFIG)\bin\paks\me-os\solaris.me $(LOG)
	copy /Y /B paks\me-os\unix.me+modified build\$(CONFIG)\bin\paks\me-os\unix.me $(LOG)
	copy /Y /B paks\me-os\vxworks.me+modified build\$(CONFIG)\bin\paks\me-os\vxworks.me $(LOG)
	copy /Y /B paks\me-os\windows.me+modified build\$(CONFIG)\bin\paks\me-os\windows.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-project" md "build\$(CONFIG)\bin\paks\me-project"
	copy /Y /B paks\me-project\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-project\LICENSE.md $(LOG)
	copy /Y /B paks\me-project\package.json+modified build\$(CONFIG)\bin\paks\me-project\package.json $(LOG)
	copy /Y /B paks\me-project\Project.es+modified build\$(CONFIG)\bin\paks\me-project\Project.es $(LOG)
	copy /Y /B paks\me-project\project.me+modified build\$(CONFIG)\bin\paks\me-project\project.me $(LOG)
	copy /Y /B paks\me-project\README.md+modified build\$(CONFIG)\bin\paks\me-project\README.md $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-vstudio" md "build\$(CONFIG)\bin\paks\me-vstudio"
	copy /Y /B paks\me-vstudio\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-vstudio\LICENSE.md $(LOG)
	copy /Y /B paks\me-vstudio\package.json+modified build\$(CONFIG)\bin\paks\me-vstudio\package.json $(LOG)
	copy /Y /B paks\me-vstudio\README.md+modified build\$(CONFIG)\bin\paks\me-vstudio\README.md $(LOG)
	copy /Y /B paks\me-vstudio\Vstudio.es+modified build\$(CONFIG)\bin\paks\me-vstudio\Vstudio.es $(LOG)
	copy /Y /B paks\me-vstudio\vstudio.me+modified build\$(CONFIG)\bin\paks\me-vstudio\vstudio.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-xcode" md "build\$(CONFIG)\bin\paks\me-xcode"
	copy /Y /B paks\me-xcode\LICENSE.md+modified build\$(CONFIG)\bin\paks\me-xcode\LICENSE.md $(LOG)
	copy /Y /B paks\me-xcode\package.json+modified build\$(CONFIG)\bin\paks\me-xcode\package.json $(LOG)
	copy /Y /B paks\me-xcode\README.md+modified build\$(CONFIG)\bin\paks\me-xcode\README.md $(LOG)
	copy /Y /B paks\me-xcode\Xcode.es+modified build\$(CONFIG)\bin\paks\me-xcode\Xcode.es $(LOG)
	copy /Y /B paks\me-xcode\xcode.me+modified build\$(CONFIG)\bin\paks\me-xcode\xcode.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.pakrun-modified $(LOG)

#
#   runtime
#
DEPS_98 = $(DEPS_98) src\master-main.me
DEPS_98 = $(DEPS_98) src\master-start.me
DEPS_98 = $(DEPS_98) src\simple.me
DEPS_98 = $(DEPS_98) src\standard.me
DEPS_98 = $(DEPS_98) build\$(CONFIG)\.pakrun-modified

build\$(CONFIG)\.runtime-modified: $(DEPS_98)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\master-main.me+modified build\$(CONFIG)\bin\master-main.me $(LOG)
	copy /Y /B src\master-start.me+modified build\$(CONFIG)\bin\master-start.me $(LOG)
	copy /Y /B src\simple.me+modified build\$(CONFIG)\bin\simple.me $(LOG)
	copy /Y /B src\standard.me+modified build\$(CONFIG)\bin\standard.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.runtime-modified $(LOG)

#
#   me.obj
#
DEPS_99 = $(DEPS_99) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_99)
	@echo .. [Compile] build\$(CONFIG)\obj\me.obj
	"$(CC)" -c -Fo$(BUILD)\obj\me.obj -Fd$(BUILD)\obj\me.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\me.c $(LOG)

#
#   me
#
DEPS_100 = $(DEPS_100) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_HTTP)" == "1"
DEPS_100 = $(DEPS_100) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
DEPS_100 = $(DEPS_100) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_100 = $(DEPS_100) build\$(CONFIG)\bin\me.mod
DEPS_100 = $(DEPS_100) build\$(CONFIG)\.runtime-modified
DEPS_100 = $(DEPS_100) build\$(CONFIG)\obj\me.obj

LIBS_100 = $(LIBS_100) libmpr.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_100 = $(LIBS_100) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_100 = $(LIBS_100) libpcre.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_100 = $(LIBS_100) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_100 = $(LIBS_100) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\me.exe: $(DEPS_100)
	@echo ..... [Link] build\$(CONFIG)\bin\me.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\me.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\me.obj" $(LIBPATHS_100) $(LIBS_100) $(LIBS_100) $(LIBS)  $(LOG)

#
#   testme.mod
#
DEPS_101 = $(DEPS_101) src\tm\testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_101 = $(DEPS_101) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\testme.mod: $(DEPS_101)
	cd src\tm
	@echo .. [Compile] testme.mod
	..\..\$(BUILD)\bin\ejsc --debug --out ../../$(BUILD)/bin/testme.mod --optimize 9 testme.es
	cd ..\..

#
#   testme.obj
#
DEPS_102 = $(DEPS_102) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\testme.obj: \
    src\tm\testme.c $(DEPS_102)
	@echo .. [Compile] build\$(CONFIG)\obj\testme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\testme.obj -Fd$(BUILD)\obj\testme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\testme.c $(LOG)

#
#   testme
#
!IF "$(ME_COM_EJS)" == "1"
DEPS_103 = $(DEPS_103) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_103 = $(DEPS_103) build\$(CONFIG)\bin\testme.mod
DEPS_103 = $(DEPS_103) build\$(CONFIG)\bin\ejs.testme.mod
DEPS_103 = $(DEPS_103) build\$(CONFIG)\obj\testme.obj

!IF "$(ME_COM_EJS)" == "1"
LIBS_103 = $(LIBS_103) libejs.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_103 = $(LIBS_103) libhttp.lib
!ENDIF
LIBS_103 = $(LIBS_103) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_103 = $(LIBS_103) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_103 = $(LIBS_103) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\testme.exe: $(DEPS_103)
	@echo ..... [Link] build\$(CONFIG)\bin\testme.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\testme.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\testme.obj" $(LIBPATHS_103) $(LIBS_103) $(LIBS_103) $(LIBS)  $(LOG)

#
#   testme.es
#
DEPS_104 = $(DEPS_104) src\tm\testme.es

build\$(CONFIG)\bin\testme.es: $(DEPS_104)
	@echo ..... [Copy] build\$(CONFIG)\bin\testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\testme.es+modified build\$(CONFIG)\bin\testme.es $(LOG)

