#
#   me-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = me
VERSION               = 0.8.4

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis MakeMe
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.mod
!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.exe
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ca.crt
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
!IF "$(ME_COM_EST)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libest.dll
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libmprssl.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libtestme.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\me.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\removeFiles.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\me-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\estLib.obj" del /Q "build\$(CONFIG)\obj\estLib.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\libtestme.obj" del /Q "build\$(CONFIG)\obj\libtestme.obj"
	if exist "build\$(CONFIG)\obj\me.obj" del /Q "build\$(CONFIG)\obj\me.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\mprSsl.obj" del /Q "build\$(CONFIG)\obj\mprSsl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\removeFiles.obj" del /Q "build\$(CONFIG)\obj\removeFiles.obj"
	if exist "build\$(CONFIG)\obj\testme.obj" del /Q "build\$(CONFIG)\obj\testme.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\ejsc.exe" del /Q "build\$(CONFIG)\bin\ejsc.exe"
	if exist "build\$(CONFIG)\bin\ejsc.lib" del /Q "build\$(CONFIG)\bin\ejsc.lib"
	if exist "build\$(CONFIG)\bin\ejsc.pdb" del /Q "build\$(CONFIG)\bin\ejsc.pdb"
	if exist "build\$(CONFIG)\bin\ejsc.exp" del /Q "build\$(CONFIG)\bin\ejsc.exp"
	if exist "build\$(CONFIG)\bin\ejs.exe" del /Q "build\$(CONFIG)\bin\ejs.exe"
	if exist "build\$(CONFIG)\bin\ejs.lib" del /Q "build\$(CONFIG)\bin\ejs.lib"
	if exist "build\$(CONFIG)\bin\ejs.pdb" del /Q "build\$(CONFIG)\bin\ejs.pdb"
	if exist "build\$(CONFIG)\bin\ejs.exp" del /Q "build\$(CONFIG)\bin\ejs.exp"
	if exist "build\$(CONFIG)\bin\ca.crt" del /Q "build\$(CONFIG)\bin\ca.crt"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libest.dll" del /Q "build\$(CONFIG)\bin\libest.dll"
	if exist "build\$(CONFIG)\bin\libest.lib" del /Q "build\$(CONFIG)\bin\libest.lib"
	if exist "build\$(CONFIG)\bin\libest.pdb" del /Q "build\$(CONFIG)\bin\libest.pdb"
	if exist "build\$(CONFIG)\bin\libest.exp" del /Q "build\$(CONFIG)\bin\libest.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libmprssl.dll" del /Q "build\$(CONFIG)\bin\libmprssl.dll"
	if exist "build\$(CONFIG)\bin\libmprssl.lib" del /Q "build\$(CONFIG)\bin\libmprssl.lib"
	if exist "build\$(CONFIG)\bin\libmprssl.pdb" del /Q "build\$(CONFIG)\bin\libmprssl.pdb"
	if exist "build\$(CONFIG)\bin\libmprssl.exp" del /Q "build\$(CONFIG)\bin\libmprssl.exp"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libtestme.dll" del /Q "build\$(CONFIG)\bin\libtestme.dll"
	if exist "build\$(CONFIG)\bin\libtestme.lib" del /Q "build\$(CONFIG)\bin\libtestme.lib"
	if exist "build\$(CONFIG)\bin\libtestme.pdb" del /Q "build\$(CONFIG)\bin\libtestme.pdb"
	if exist "build\$(CONFIG)\bin\libtestme.exp" del /Q "build\$(CONFIG)\bin\libtestme.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\removeFiles.exe" del /Q "build\$(CONFIG)\bin\removeFiles.exe"
	if exist "build\$(CONFIG)\bin\removeFiles.lib" del /Q "build\$(CONFIG)\bin\removeFiles.lib"
	if exist "build\$(CONFIG)\bin\removeFiles.pdb" del /Q "build\$(CONFIG)\bin\removeFiles.pdb"
	if exist "build\$(CONFIG)\bin\removeFiles.exp" del /Q "build\$(CONFIG)\bin\removeFiles.exp"
	if exist "build\$(CONFIG)\bin\testme.exe" del /Q "build\$(CONFIG)\bin\testme.exe"
	if exist "build\$(CONFIG)\bin\testme.lib" del /Q "build\$(CONFIG)\bin\testme.lib"
	if exist "build\$(CONFIG)\bin\testme.pdb" del /Q "build\$(CONFIG)\bin\testme.pdb"
	if exist "build\$(CONFIG)\bin\testme.exp" del /Q "build\$(CONFIG)\bin\testme.exp"


#
#   me.h
#
build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\paks\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_3 = $(DEPS_3) src\paks\mpr\mpr.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   http.h
#
DEPS_4 = $(DEPS_4) src\paks\http\http.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_4)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   ejs.slots.h
#
src\paks\ejs\ejs.slots.h: $(DEPS_5)

#
#   pcre.h
#
DEPS_6 = $(DEPS_6) src\paks\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_6)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   zlib.h
#
DEPS_7 = $(DEPS_7) src\paks\zlib\zlib.h
DEPS_7 = $(DEPS_7) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_7)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   ejs.h
#
DEPS_8 = $(DEPS_8) src\paks\ejs\ejs.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\osdep.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\mpr.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\http.h
DEPS_8 = $(DEPS_8) src\paks\ejs\ejs.slots.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\pcre.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_8)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\ejs\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejs.slots.h
#
DEPS_9 = $(DEPS_9) src\paks\ejs\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_9)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\ejs\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_10 = $(DEPS_10) src\paks\ejs\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_10)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\ejs\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   est.h
#
DEPS_11 = $(DEPS_11) src\paks\est\est.h

build\$(CONFIG)\inc\est.h: $(DEPS_11)
	@echo ..... [Copy] build\$(CONFIG)\inc\est.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\paks\est\est.h+modified build\$(CONFIG)\inc\est.h $(LOG)

#
#   testme.h
#
DEPS_12 = $(DEPS_12) src\tm\testme.h

build\$(CONFIG)\inc\testme.h: $(DEPS_12)
	@echo ..... [Copy] build\$(CONFIG)\inc\testme.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\tm\testme.h+modified build\$(CONFIG)\inc\testme.h $(LOG)

#
#   ejs.h
#
src\paks\ejs\ejs.h: $(DEPS_13)

#
#   ejs.obj
#
DEPS_14 = $(DEPS_14) src\paks\ejs\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\paks\ejs\ejs.c $(DEPS_14)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejs.c $(LOG)

#
#   ejsLib.obj
#
DEPS_15 = $(DEPS_15) src\paks\ejs\ejs.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\mpr.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\pcre.h
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\paks\ejs\ejsLib.c $(DEPS_15)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsLib.c $(LOG)

#
#   ejsc.obj
#
DEPS_16 = $(DEPS_16) src\paks\ejs\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\paks\ejs\ejsc.c $(DEPS_16)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\ejs\ejsc.c $(LOG)

#
#   est.h
#
src\paks\est\est.h: $(DEPS_17)

#
#   estLib.obj
#
DEPS_18 = $(DEPS_18) src\paks\est\est.h

build\$(CONFIG)\obj\estLib.obj: \
    src\paks\est\estLib.c $(DEPS_18)
	@echo .. [Compile] build\$(CONFIG)\obj\estLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\estLib.obj -Fd$(BUILD)\obj\estLib.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) $(IFLAGS) src\paks\est\estLib.c $(LOG)

#
#   http.h
#
src\paks\http\http.h: $(DEPS_19)

#
#   http.obj
#
DEPS_20 = $(DEPS_20) src\paks\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\paks\http\http.c $(DEPS_20)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\http\http.c $(LOG)

#
#   httpLib.obj
#
DEPS_21 = $(DEPS_21) src\paks\http\http.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\paks\http\httpLib.c $(DEPS_21)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\http\httpLib.c $(LOG)

#
#   testme.h
#
src\tm\testme.h: $(DEPS_22)

#
#   libtestme.obj
#
DEPS_23 = $(DEPS_23) src\tm\testme.h

build\$(CONFIG)\obj\libtestme.obj: \
    src\tm\libtestme.c $(DEPS_23)
	@echo .. [Compile] build\$(CONFIG)\obj\libtestme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\libtestme.obj -Fd$(BUILD)\obj\libtestme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\libtestme.c $(LOG)

#
#   me.obj
#
DEPS_24 = $(DEPS_24) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_24)
	@echo .. [Compile] build\$(CONFIG)\obj\me.obj
	"$(CC)" -c -Fo$(BUILD)\obj\me.obj -Fd$(BUILD)\obj\me.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\me.c $(LOG)

#
#   mpr.h
#
src\paks\mpr\mpr.h: $(DEPS_25)

#
#   mprLib.obj
#
DEPS_26 = $(DEPS_26) src\paks\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\paks\mpr\mprLib.c $(DEPS_26)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\mpr\mprLib.c $(LOG)

#
#   mprSsl.obj
#
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\me.h
DEPS_27 = $(DEPS_27) src\paks\mpr\mpr.h

build\$(CONFIG)\obj\mprSsl.obj: \
    src\paks\mpr\mprSsl.c $(DEPS_27)
	@echo .. [Compile] build\$(CONFIG)\obj\mprSsl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprSsl.obj -Fd$(BUILD)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\paks\mpr\mprSsl.c $(LOG)

#
#   pcre.h
#
src\paks\pcre\pcre.h: $(DEPS_28)

#
#   pcre.obj
#
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\me.h
DEPS_29 = $(DEPS_29) src\paks\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\paks\pcre\pcre.c $(DEPS_29)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\pcre\pcre.c $(LOG)

#
#   removeFiles.obj
#
DEPS_30 = $(DEPS_30) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\removeFiles.obj: \
    package\windows\removeFiles.c $(DEPS_30)
	@echo .. [Compile] build\$(CONFIG)\obj\removeFiles.obj
	"$(CC)" -c -Fo$(BUILD)\obj\removeFiles.obj -Fd$(BUILD)\obj\removeFiles.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) package\windows\removeFiles.c $(LOG)

#
#   testme.obj
#
DEPS_31 = $(DEPS_31) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\testme.obj: \
    src\tm\testme.c $(DEPS_31)
	@echo .. [Compile] build\$(CONFIG)\obj\testme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\testme.obj -Fd$(BUILD)\obj\testme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\testme.c $(LOG)

#
#   zlib.h
#
src\paks\zlib\zlib.h: $(DEPS_32)

#
#   zlib.obj
#
DEPS_33 = $(DEPS_33) build\$(CONFIG)\inc\me.h
DEPS_33 = $(DEPS_33) src\paks\zlib\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\paks\zlib\zlib.c $(DEPS_33)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\paks\zlib\zlib.c $(LOG)

#
#   libmpr
#
DEPS_34 = $(DEPS_34) build\$(CONFIG)\inc\mpr.h
DEPS_34 = $(DEPS_34) build\$(CONFIG)\obj\mprLib.obj

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_34)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\mprLib.obj" $(LIBS)  $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_35 = $(DEPS_35) build\$(CONFIG)\inc\pcre.h
DEPS_35 = $(DEPS_35) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_35)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_36 = $(DEPS_36) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_36 = $(DEPS_36) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\http.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\obj\httpLib.obj

LIBS_36 = $(LIBS_36) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_36 = $(LIBS_36) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_36)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_36) $(LIBS_36) $(LIBS_36) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_37 = $(DEPS_37) build\$(CONFIG)\inc\zlib.h
DEPS_37 = $(DEPS_37) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_37)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_38 = $(DEPS_38) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_38 = $(DEPS_38) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_38 = $(DEPS_38) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_38 = $(DEPS_38) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\ejs.h
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\ejs.slots.h
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_38 = $(DEPS_38) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_HTTP)" == "1"
LIBS_38 = $(LIBS_38) libhttp.lib
!ENDIF
LIBS_38 = $(LIBS_38) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_38 = $(LIBS_38) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_38 = $(LIBS_38) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_38)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_38) $(LIBS_38) $(LIBS_38) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejsc
#
DEPS_39 = $(DEPS_39) build\$(CONFIG)\bin\libejs.dll
DEPS_39 = $(DEPS_39) build\$(CONFIG)\obj\ejsc.obj

LIBS_39 = $(LIBS_39) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_39 = $(LIBS_39) libhttp.lib
!ENDIF
LIBS_39 = $(LIBS_39) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_39 = $(LIBS_39) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_39 = $(LIBS_39) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejsc.exe: $(DEPS_39)
	@echo ..... [Link] build\$(CONFIG)\bin\ejsc.exe
	"$(LD)" -out:$(BUILD)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_39) $(LIBS_39) $(LIBS_39) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejs.mod
#
DEPS_40 = $(DEPS_40) src\paks\ejs\ejs.es
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_40)
	cd src\paks\ejs
	@echo .. [Compile] ejs.mod
	..\..\..\$(BUILD)\bin\ejsc --out ../../../$(BUILD)/bin/ejs.mod --optimize 9 --bind --require null ejs.es
	cd ..\..\..
!ENDIF

#
#   ejs.testme.mod
#
DEPS_41 = $(DEPS_41) src\tm\ejs.testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_41 = $(DEPS_41) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\ejs.testme.mod: $(DEPS_41)
	cd src\tm
	@echo .. [Compile] ejs.testme.mod
	..\..\$(BUILD)\bin\ejsc --debug --out ../../$(BUILD)/bin/ejs.testme.mod --optimize 9 ejs.testme.es
	cd ..\..

!IF "$(ME_COM_EJS)" == "1"
#
#   ejscmd
#
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\libejs.dll
DEPS_42 = $(DEPS_42) build\$(CONFIG)\obj\ejs.obj

LIBS_42 = $(LIBS_42) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_42 = $(LIBS_42) libhttp.lib
!ENDIF
LIBS_42 = $(LIBS_42) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_42 = $(LIBS_42) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_42 = $(LIBS_42) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejs.exe: $(DEPS_42)
	@echo ..... [Link] build\$(CONFIG)\bin\ejs.exe
	"$(LD)" -out:$(BUILD)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejs.obj" $(LIBPATHS_42) $(LIBS_42) $(LIBS_42) $(LIBS)  $(LOG)
!ENDIF


#
#   http-ca-crt
#
DEPS_43 = $(DEPS_43) src\paks\http\ca.crt

build\$(CONFIG)\bin\ca.crt: $(DEPS_43)
	@echo ..... [Copy] build\$(CONFIG)\bin\ca.crt
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\paks\http\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_44 = $(DEPS_44) build\$(CONFIG)\bin\libhttp.dll
DEPS_44 = $(DEPS_44) build\$(CONFIG)\obj\http.obj

LIBS_44 = $(LIBS_44) libhttp.lib
LIBS_44 = $(LIBS_44) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_44 = $(LIBS_44) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\http.exe: $(DEPS_44)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\http.obj" $(LIBPATHS_44) $(LIBS_44) $(LIBS_44) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EST)" == "1"
#
#   libest
#
DEPS_45 = $(DEPS_45) build\$(CONFIG)\inc\est.h
DEPS_45 = $(DEPS_45) build\$(CONFIG)\obj\estLib.obj

build\$(CONFIG)\bin\libest.dll: $(DEPS_45)
	@echo ..... [Link] build\$(CONFIG)\bin\libest.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\estLib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   libmprssl
#
DEPS_46 = $(DEPS_46) build\$(CONFIG)\bin\libmpr.dll
DEPS_46 = $(DEPS_46) build\$(CONFIG)\obj\mprSsl.obj

LIBS_46 = $(LIBS_46) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) libeay32.lib
LIBPATHS_46 = $(LIBPATHS_46) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) libssleay32.lib
LIBPATHS_46 = $(LIBPATHS_46) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_46 = $(LIBS_46) libest.lib
!ENDIF

build\$(CONFIG)\bin\libmprssl.dll: $(DEPS_46)
	@echo ..... [Link] build\$(CONFIG)\bin\libmprssl.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmprssl.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\mprSsl.obj" $(LIBPATHS_46) $(LIBS_46) $(LIBS_46) $(LIBS)  $(LOG)

#
#   libtestme
#
DEPS_47 = $(DEPS_47) build\$(CONFIG)\inc\testme.h
DEPS_47 = $(DEPS_47) build\$(CONFIG)\obj\libtestme.obj

build\$(CONFIG)\bin\libtestme.dll: $(DEPS_47)
	@echo ..... [Link] build\$(CONFIG)\bin\libtestme.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libtestme.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\libtestme.obj" $(LIBS)  $(LOG)

#
#   me.mod
#
DEPS_48 = $(DEPS_48) src\Builder.es
DEPS_48 = $(DEPS_48) src\Loader.es
DEPS_48 = $(DEPS_48) src\MakeMe.es
DEPS_48 = $(DEPS_48) src\Me.es
DEPS_48 = $(DEPS_48) src\Script.es
DEPS_48 = $(DEPS_48) src\Target.es
DEPS_48 = $(DEPS_48) src\paks\ejs-version\Version.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_48 = $(DEPS_48) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\me.mod: $(DEPS_48)
	cd .
	@echo .. [Compile] me.mod
	.\$(BUILD)\bin\ejsc --debug --out ./$(BUILD)/bin/me.mod --optimize 9 src/Builder.es src/Loader.es src/MakeMe.es src/Me.es src/Script.es src/Target.es src/paks/ejs-version/Version.es
	cd .

#
#   runtime
#
DEPS_49 = $(DEPS_49) src\runtime\configure\appweb.me
DEPS_49 = $(DEPS_49) src\runtime\configure\compiler.me
DEPS_49 = $(DEPS_49) src\runtime\configure\lib.me
DEPS_49 = $(DEPS_49) src\runtime\configure\link.me
DEPS_49 = $(DEPS_49) src\runtime\configure\rc.me
DEPS_49 = $(DEPS_49) src\runtime\configure\testme.me
DEPS_49 = $(DEPS_49) src\runtime\configure\vxworks.me
DEPS_49 = $(DEPS_49) src\runtime\configure\winsdk.me
DEPS_49 = $(DEPS_49) src\runtime\master-main.me
DEPS_49 = $(DEPS_49) src\runtime\master-start.me
DEPS_49 = $(DEPS_49) src\runtime\os\freebsd.me
DEPS_49 = $(DEPS_49) src\runtime\os\gcc.me
DEPS_49 = $(DEPS_49) src\runtime\os\linux.me
DEPS_49 = $(DEPS_49) src\runtime\os\macosx.me
DEPS_49 = $(DEPS_49) src\runtime\os\solaris.me
DEPS_49 = $(DEPS_49) src\runtime\os\unix.me
DEPS_49 = $(DEPS_49) src\runtime\os\vxworks.me
DEPS_49 = $(DEPS_49) src\runtime\os\windows.me
DEPS_49 = $(DEPS_49) src\runtime\plugins\Configure.es
DEPS_49 = $(DEPS_49) src\runtime\plugins\Generator.es
DEPS_49 = $(DEPS_49) src\runtime\plugins\Vstudio.es
DEPS_49 = $(DEPS_49) src\runtime\plugins\Xcode.es
DEPS_49 = $(DEPS_49) src\runtime\simple.me
DEPS_49 = $(DEPS_49) src\runtime\standard.me

build\$(CONFIG)\.modify-runtime: $(DEPS_49)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin\configure" md "build\$(CONFIG)\bin\configure"
	copy /Y /B src\runtime\configure\appweb.me+modified build\$(CONFIG)\bin\configure\appweb.me $(LOG)
	copy /Y /B src\runtime\configure\compiler.me+modified build\$(CONFIG)\bin\configure\compiler.me $(LOG)
	copy /Y /B src\runtime\configure\lib.me+modified build\$(CONFIG)\bin\configure\lib.me $(LOG)
	copy /Y /B src\runtime\configure\link.me+modified build\$(CONFIG)\bin\configure\link.me $(LOG)
	copy /Y /B src\runtime\configure\rc.me+modified build\$(CONFIG)\bin\configure\rc.me $(LOG)
	copy /Y /B src\runtime\configure\testme.me+modified build\$(CONFIG)\bin\configure\testme.me $(LOG)
	copy /Y /B src\runtime\configure\vxworks.me+modified build\$(CONFIG)\bin\configure\vxworks.me $(LOG)
	copy /Y /B src\runtime\configure\winsdk.me+modified build\$(CONFIG)\bin\configure\winsdk.me $(LOG)
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\runtime\master-main.me+modified build\$(CONFIG)\bin\master-main.me $(LOG)
	copy /Y /B src\runtime\master-start.me+modified build\$(CONFIG)\bin\master-start.me $(LOG)
	if not exist "build\$(CONFIG)\bin\os" md "build\$(CONFIG)\bin\os"
	copy /Y /B src\runtime\os\freebsd.me+modified build\$(CONFIG)\bin\os\freebsd.me $(LOG)
	copy /Y /B src\runtime\os\gcc.me+modified build\$(CONFIG)\bin\os\gcc.me $(LOG)
	copy /Y /B src\runtime\os\linux.me+modified build\$(CONFIG)\bin\os\linux.me $(LOG)
	copy /Y /B src\runtime\os\macosx.me+modified build\$(CONFIG)\bin\os\macosx.me $(LOG)
	copy /Y /B src\runtime\os\solaris.me+modified build\$(CONFIG)\bin\os\solaris.me $(LOG)
	copy /Y /B src\runtime\os\unix.me+modified build\$(CONFIG)\bin\os\unix.me $(LOG)
	copy /Y /B src\runtime\os\vxworks.me+modified build\$(CONFIG)\bin\os\vxworks.me $(LOG)
	copy /Y /B src\runtime\os\windows.me+modified build\$(CONFIG)\bin\os\windows.me $(LOG)
	if not exist "build\$(CONFIG)\bin\plugins" md "build\$(CONFIG)\bin\plugins"
	copy /Y /B src\runtime\plugins\Configure.es+modified build\$(CONFIG)\bin\plugins\Configure.es $(LOG)
	copy /Y /B src\runtime\plugins\Generator.es+modified build\$(CONFIG)\bin\plugins\Generator.es $(LOG)
	copy /Y /B src\runtime\plugins\Vstudio.es+modified build\$(CONFIG)\bin\plugins\Vstudio.es $(LOG)
	copy /Y /B src\runtime\plugins\Xcode.es+modified build\$(CONFIG)\bin\plugins\Xcode.es $(LOG)
	copy /Y /B src\runtime\simple.me+modified build\$(CONFIG)\bin\simple.me $(LOG)
	copy /Y /B src\runtime\standard.me+modified build\$(CONFIG)\bin\standard.me $(LOG)

#
#   me
#
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_HTTP)" == "1"
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\me.mod
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin
DEPS_50 = $(DEPS_50) build\$(CONFIG)\obj\me.obj

LIBS_50 = $(LIBS_50) libmpr.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_50 = $(LIBS_50) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_50 = $(LIBS_50) libpcre.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_50 = $(LIBS_50) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\me.exe: $(DEPS_50)
	@echo ..... [Link] build\$(CONFIG)\bin\me.exe
	"$(LD)" -out:$(BUILD)\bin\me.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\me.obj" $(LIBPATHS_50) $(LIBS_50) $(LIBS_50) $(LIBS)  $(LOG)

#
#   removeFiles
#
DEPS_51 = $(DEPS_51) build\$(CONFIG)\obj\removeFiles.obj

build\$(CONFIG)\bin\removeFiles.exe: $(DEPS_51)
	@echo ..... [Link] build\$(CONFIG)\bin\removeFiles.exe
	"$(LD)" -out:$(BUILD)\bin\removeFiles.exe -entry:WinMainCRTStartup -subsystem:windows $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\removeFiles.obj" $(LIBS)  $(LOG)

#
#   testme.mod
#
DEPS_52 = $(DEPS_52) src\tm\testme.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_52 = $(DEPS_52) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\testme.mod: $(DEPS_52)
	cd src\tm
	@echo .. [Compile] testme.mod
	..\..\$(BUILD)\bin\ejsc --debug --out ../../$(BUILD)/bin/testme.mod --optimize 9 testme.es
	cd ..\..

#
#   testme
#
!IF "$(ME_COM_EJS)" == "1"
DEPS_53 = $(DEPS_53) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_53 = $(DEPS_53) build\$(CONFIG)\bin\testme.mod
DEPS_53 = $(DEPS_53) build\$(CONFIG)\bin\ejs.testme.mod
DEPS_53 = $(DEPS_53) build\$(CONFIG)\obj\testme.obj

!IF "$(ME_COM_EJS)" == "1"
LIBS_53 = $(LIBS_53) libejs.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_53 = $(LIBS_53) libhttp.lib
!ENDIF
LIBS_53 = $(LIBS_53) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_53 = $(LIBS_53) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_53 = $(LIBS_53) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\testme.exe: $(DEPS_53)
	@echo ..... [Link] build\$(CONFIG)\bin\testme.exe
	"$(LD)" -out:$(BUILD)\bin\testme.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\testme.obj" $(LIBPATHS_53) $(LIBS_53) $(LIBS_53) $(LIBS)  $(LOG)


#
#   installBinary
#
installBinary: $(DEPS_54)
	cd .
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\me.exe+modified "$(ME_VAPP_PREFIX)\bin\me.exe" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\testme.exe+modified "$(ME_VAPP_PREFIX)\bin\testme.exe" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\ejs.exe+modified "$(ME_VAPP_PREFIX)\bin\ejs.exe" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\ejsc.exe+modified "$(ME_VAPP_PREFIX)\bin\ejsc.exe" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\http.exe+modified "$(ME_VAPP_PREFIX)\bin\http.exe" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libejs.dll+modified "$(ME_VAPP_PREFIX)\bin\libejs.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libhttp.dll+modified "$(ME_VAPP_PREFIX)\bin\libhttp.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libmpr.dll+modified "$(ME_VAPP_PREFIX)\bin\libmpr.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libmprssl.dll+modified "$(ME_VAPP_PREFIX)\bin\libmprssl.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libpcre.dll+modified "$(ME_VAPP_PREFIX)\bin\libpcre.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libzlib.dll+modified "$(ME_VAPP_PREFIX)\bin\libzlib.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libtestme.dll+modified "$(ME_VAPP_PREFIX)\bin\libtestme.dll" $(LOG)
!IF "$(ME_COM_EST)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libest.dll+modified "$(ME_VAPP_PREFIX)\bin\libest.dll" $(LOG)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libeay32.dll+modified "$(ME_VAPP_PREFIX)\bin\libeay32.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\ssleay32.dll+modified "$(ME_VAPP_PREFIX)\bin\ssleay32.dll" $(LOG)
!ENDIF
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\ca.crt+modified "$(ME_VAPP_PREFIX)\bin\ca.crt" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\ejs.mod+modified "$(ME_VAPP_PREFIX)\bin\ejs.mod" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\me.mod+modified "$(ME_VAPP_PREFIX)\bin\me.mod" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\testme.mod+modified "$(ME_VAPP_PREFIX)\bin\testme.mod" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\ejs.testme.mod+modified "$(ME_VAPP_PREFIX)\bin\ejs.testme.mod" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\inc" md "$(ME_VAPP_PREFIX)\inc"
	copy /Y /B src\tm\testme.h+modified "$(ME_VAPP_PREFIX)\inc\testme.h" $(LOG)
	if not exist "..\src\runtime" md "..\src\runtime"
	copy /Y /B src\runtime\configure+modified ..\src\runtime\configure $(LOG)
	if not exist "..\src\runtime\configure" md "..\src\runtime\configure"
	copy /Y /B src\runtime\configure\appweb.me+modified ..\src\runtime\configure\appweb.me $(LOG)
	copy /Y /B src\runtime\configure\compiler.me+modified ..\src\runtime\configure\compiler.me $(LOG)
	copy /Y /B src\runtime\configure\lib.me+modified ..\src\runtime\configure\lib.me $(LOG)
	copy /Y /B src\runtime\configure\link.me+modified ..\src\runtime\configure\link.me $(LOG)
	copy /Y /B src\runtime\configure\rc.me+modified ..\src\runtime\configure\rc.me $(LOG)
	copy /Y /B src\runtime\configure\testme.me+modified ..\src\runtime\configure\testme.me $(LOG)
	copy /Y /B src\runtime\configure\vxworks.me+modified ..\src\runtime\configure\vxworks.me $(LOG)
	copy /Y /B src\runtime\configure\winsdk.me+modified ..\src\runtime\configure\winsdk.me $(LOG)
	copy /Y /B src\runtime\master-main.me+modified ..\src\runtime\master-main.me $(LOG)
	copy /Y /B src\runtime\master-start.me+modified ..\src\runtime\master-start.me $(LOG)
	copy /Y /B src\runtime\os+modified ..\src\runtime\os $(LOG)
	if not exist "..\src\runtime\os" md "..\src\runtime\os"
	copy /Y /B src\runtime\os\freebsd.me+modified ..\src\runtime\os\freebsd.me $(LOG)
	copy /Y /B src\runtime\os\gcc.me+modified ..\src\runtime\os\gcc.me $(LOG)
	copy /Y /B src\runtime\os\linux.me+modified ..\src\runtime\os\linux.me $(LOG)
	copy /Y /B src\runtime\os\macosx.me+modified ..\src\runtime\os\macosx.me $(LOG)
	copy /Y /B src\runtime\os\solaris.me+modified ..\src\runtime\os\solaris.me $(LOG)
	copy /Y /B src\runtime\os\unix.me+modified ..\src\runtime\os\unix.me $(LOG)
	copy /Y /B src\runtime\os\vxworks.me+modified ..\src\runtime\os\vxworks.me $(LOG)
	copy /Y /B src\runtime\os\windows.me+modified ..\src\runtime\os\windows.me $(LOG)
	copy /Y /B src\runtime\plugins+modified ..\src\runtime\plugins $(LOG)
	if not exist "..\src\runtime\plugins" md "..\src\runtime\plugins"
	copy /Y /B src\runtime\plugins\Configure.es+modified ..\src\runtime\plugins\Configure.es $(LOG)
	copy /Y /B src\runtime\plugins\Generator.es+modified ..\src\runtime\plugins\Generator.es $(LOG)
	copy /Y /B src\runtime\plugins\Vstudio.es+modified ..\src\runtime\plugins\Vstudio.es $(LOG)
	copy /Y /B src\runtime\plugins\Xcode.es+modified ..\src\runtime\plugins\Xcode.es $(LOG)
	copy /Y /B src\runtime\simple.me+modified ..\src\runtime\simple.me $(LOG)
	copy /Y /B src\runtime\standard.me+modified ..\src\runtime\standard.me $(LOG)
	cd .


#
#   install
#
DEPS_55 = $(DEPS_55) stop
DEPS_55 = $(DEPS_55) installBinary
DEPS_55 = $(DEPS_55) start

install: $(DEPS_55)
#  Omit build script install

#
#   uninstall
#
DEPS_56 = $(DEPS_56) stop

uninstall: $(DEPS_56)
	cd .
	if exist "$(ME_VAPP_PREFIX)" rd /Q /S "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\bin" rd /Q "$(ME_VAPP_PREFIX)\bin"
	if exist "$(ME_VAPP_PREFIX)\inc" rd /Q "$(ME_VAPP_PREFIX)\inc"
	if exist "$(ME_VAPP_PREFIX)\man" rd /Q "$(ME_VAPP_PREFIX)\man"
	if exist "$(ME_VAPP_PREFIX)\latest" del /Q "$(ME_VAPP_PREFIX)\latest"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"
	cd .

#
#   version
#
version: $(DEPS_57)
	cd .
	echo 0.8.4
	cd .

