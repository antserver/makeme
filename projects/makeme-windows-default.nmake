#
#   makeme-windows-default.nmake -- Makefile to build Embedthis MakeMe for windows
#

NAME                  = makeme
VERSION               = 0.9.1

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EJSCRIPT)" == ""
ME_COM_EJSCRIPT       = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == ""
ME_COM_MBEDTLS        = 0
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 0
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_EJS)" == ""
ME_COM_OPENSSL_PATH   = ""
!ENDIF

!IF "$(ME_COM_LIB)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_LINK)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_RC)" == "1"
ME_COM_WINSDK         = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EJSCRIPT=$(ME_COM_EJSCRIPT) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_MBEDTLS=$(ME_COM_MBEDTLS) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WINSDK=$(ME_COM_WINSDK) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis MakeMe
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJSCRIPT)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.es
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.testme.mod
!IF "$(ME_COM_EJSCRIPT)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.exe
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\.extras-modified
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
!IF "$(ME_COM_SSL)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\.install-certs-modified
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libtestme.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\me.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\testme.es

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\makeme-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\libtestme.obj" del /Q "build\$(CONFIG)\obj\libtestme.obj"
	if exist "build\$(CONFIG)\obj\me.obj" del /Q "build\$(CONFIG)\obj\me.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\openssl.obj" del /Q "build\$(CONFIG)\obj\openssl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\testme.obj" del /Q "build\$(CONFIG)\obj\testme.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\ejs.testme.es" del /Q "build\$(CONFIG)\bin\ejs.testme.es"
	if exist "build\$(CONFIG)\bin\ejsc.exe" del /Q "build\$(CONFIG)\bin\ejsc.exe"
	if exist "build\$(CONFIG)\bin\ejsc.lib" del /Q "build\$(CONFIG)\bin\ejsc.lib"
	if exist "build\$(CONFIG)\bin\ejsc.pdb" del /Q "build\$(CONFIG)\bin\ejsc.pdb"
	if exist "build\$(CONFIG)\bin\ejsc.exp" del /Q "build\$(CONFIG)\bin\ejsc.exp"
	if exist "build\$(CONFIG)\bin\ejs.exe" del /Q "build\$(CONFIG)\bin\ejs.exe"
	if exist "build\$(CONFIG)\bin\ejs.lib" del /Q "build\$(CONFIG)\bin\ejs.lib"
	if exist "build\$(CONFIG)\bin\ejs.pdb" del /Q "build\$(CONFIG)\bin\ejs.pdb"
	if exist "build\$(CONFIG)\bin\ejs.exp" del /Q "build\$(CONFIG)\bin\ejs.exp"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\.install-certs-modified" del /Q "build\$(CONFIG)\.install-certs-modified"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libtestme.dll" del /Q "build\$(CONFIG)\bin\libtestme.dll"
	if exist "build\$(CONFIG)\bin\libtestme.lib" del /Q "build\$(CONFIG)\bin\libtestme.lib"
	if exist "build\$(CONFIG)\bin\libtestme.pdb" del /Q "build\$(CONFIG)\bin\libtestme.pdb"
	if exist "build\$(CONFIG)\bin\libtestme.exp" del /Q "build\$(CONFIG)\bin\libtestme.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\libmpr-openssl.lib" del /Q "build\$(CONFIG)\bin\libmpr-openssl.lib"
	if exist "build\$(CONFIG)\bin\testme.exe" del /Q "build\$(CONFIG)\bin\testme.exe"
	if exist "build\$(CONFIG)\bin\testme.lib" del /Q "build\$(CONFIG)\bin\testme.lib"
	if exist "build\$(CONFIG)\bin\testme.pdb" del /Q "build\$(CONFIG)\bin\testme.pdb"
	if exist "build\$(CONFIG)\bin\testme.exp" del /Q "build\$(CONFIG)\bin\testme.exp"
	if exist "build\$(CONFIG)\bin\testme.es" del /Q "build\$(CONFIG)\bin\testme.es"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_3 = $(DEPS_3) src\mpr\mpr.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   openssl.obj
#
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\openssl.obj: \
    src\mpr-openssl\openssl.c $(DEPS_4)
	@echo .. [Compile] build\$(CONFIG)\obj\openssl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\openssl.obj -Fd$(BUILD)\obj\openssl.pdb $(CFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr-openssl\openssl.c $(LOG)

!IF "$(ME_COM_SSL)" == "1"
!IF "$(ME_COM_OPENSSL)" == "1"
#
#   openssl
#
DEPS_5 = $(DEPS_5) build\$(CONFIG)\obj\openssl.obj

build\$(CONFIG)\bin\libmpr-openssl.lib: $(DEPS_5)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-openssl.lib
	"lib.exe" -nologo -out:$(BUILD)\bin\libmpr-openssl.lib "$(BUILD)\obj\openssl.obj" $(LOG)
!ENDIF
!ENDIF

#
#   zlib.h
#
DEPS_6 = $(DEPS_6) src\zlib\zlib.h
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_6)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   zlib.h
#

src\zlib\zlib.h: $(DEPS_7)

#
#   zlib.obj
#
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) src\zlib\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\zlib\zlib.c $(DEPS_8)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\zlib\zlib.c $(LOG)

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\zlib.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_9)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   mpr.h
#

src\mpr\mpr.h: $(DEPS_10)

#
#   mprLib.obj
#
DEPS_11 = $(DEPS_11) src\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_11)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr\mprLib.c $(LOG)

#
#   libmpr
#
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\osdep.h
!IF "$(ME_COM_SSL)" == "1"
!IF "$(ME_COM_OPENSSL)" == "1"
DEPS_12 = $(DEPS_12) build\$(CONFIG)\bin\libmpr-openssl.lib
!ENDIF
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_12 = $(DEPS_12) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\mpr.h
DEPS_12 = $(DEPS_12) build\$(CONFIG)\obj\mprLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_12 = $(LIBS_12) libmpr-openssl.lib
LIBPATHS_12 = $(LIBPATHS_12) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_12 = $(LIBS_12) libgdi32.lib
LIBPATHS_12 = $(LIBPATHS_12) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_12 = $(LIBS_12) libeay32.lib
LIBPATHS_12 = $(LIBPATHS_12) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_12 = $(LIBS_12) libssleay32.lib
LIBPATHS_12 = $(LIBPATHS_12) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_12 = $(LIBS_12) libzlib.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_12 = $(LIBS_12) libmpr-openssl.lib
LIBPATHS_12 = $(LIBPATHS_12) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_12 = $(LIBS_12) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_12)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\mprLib.obj" $(LIBPATHS_12) $(LIBS_12) $(LIBS_12) $(LIBS)  $(LOG)

#
#   pcre.h
#
DEPS_13 = $(DEPS_13) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_13)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   pcre.h
#

src\pcre\pcre.h: $(DEPS_14)

#
#   pcre.obj
#
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\me.h
DEPS_15 = $(DEPS_15) src\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_15)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\pcre.h
DEPS_16 = $(DEPS_16) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_16)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   http.h
#
DEPS_17 = $(DEPS_17) src\http\http.h
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_17)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   http.h
#

src\http\http.h: $(DEPS_18)

#
#   httpLib.obj
#
DEPS_19 = $(DEPS_19) src\http\http.h
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_19)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\http\httpLib.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_20 = $(DEPS_20) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_20 = $(DEPS_20) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\http.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\obj\httpLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_20 = $(LIBS_20) libmpr-openssl.lib
LIBPATHS_20 = $(LIBPATHS_20) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_20 = $(LIBS_20) libgdi32.lib
LIBPATHS_20 = $(LIBPATHS_20) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_20 = $(LIBS_20) libeay32.lib
LIBPATHS_20 = $(LIBPATHS_20) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_20 = $(LIBS_20) libssleay32.lib
LIBPATHS_20 = $(LIBPATHS_20) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_20 = $(LIBS_20) libzlib.lib
!ENDIF
LIBS_20 = $(LIBS_20) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_20 = $(LIBS_20) libmpr-openssl.lib
LIBPATHS_20 = $(LIBPATHS_20) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_20 = $(LIBS_20) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_20 = $(LIBS_20) libpcre.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_20 = $(LIBS_20) libpcre.lib
!ENDIF
LIBS_20 = $(LIBS_20) libmpr.lib

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_20)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_20) $(LIBS_20) $(LIBS_20) $(LIBS)  $(LOG)
!ENDIF

#
#   ejs.slots.h
#

src\ejscript\ejs.slots.h: $(DEPS_21)

#
#   ejs.h
#
DEPS_22 = $(DEPS_22) src\ejscript\ejs.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\me.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\osdep.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\mpr.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\http.h
DEPS_22 = $(DEPS_22) src\ejscript\ejs.slots.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\pcre.h
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_22)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejs.slots.h
#
DEPS_23 = $(DEPS_23) src\ejscript\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_23)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_24 = $(DEPS_24) src\ejscript\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_24)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   ejs.h
#

src\ejscript\ejs.h: $(DEPS_25)

#
#   ejsLib.obj
#
DEPS_26 = $(DEPS_26) src\ejscript\ejs.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\mpr.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\pcre.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\ejscript\ejsLib.c $(DEPS_26)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejscript\ejsLib.c $(LOG)

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_27 = $(DEPS_27) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_27 = $(DEPS_27) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_27 = $(DEPS_27) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_27 = $(DEPS_27) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\ejs.h
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\ejs.slots.h
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_27 = $(DEPS_27) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_27 = $(LIBS_27) libmpr-openssl.lib
LIBPATHS_27 = $(LIBPATHS_27) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_27 = $(LIBS_27) libgdi32.lib
LIBPATHS_27 = $(LIBPATHS_27) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_27 = $(LIBS_27) libeay32.lib
LIBPATHS_27 = $(LIBPATHS_27) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_27 = $(LIBS_27) libssleay32.lib
LIBPATHS_27 = $(LIBPATHS_27) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_27 = $(LIBS_27) libzlib.lib
!ENDIF
LIBS_27 = $(LIBS_27) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_27 = $(LIBS_27) libmpr-openssl.lib
LIBPATHS_27 = $(LIBPATHS_27) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_27 = $(LIBS_27) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_27 = $(LIBS_27) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_27 = $(LIBS_27) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_27 = $(LIBS_27) libpcre.lib
!ENDIF
LIBS_27 = $(LIBS_27) libmpr.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_27 = $(LIBS_27) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_27)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_27) $(LIBS_27) $(LIBS_27) $(LIBS)  $(LOG)
!ENDIF

#
#   ejsc.obj
#
DEPS_28 = $(DEPS_28) src\ejscript\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\ejscript\ejsc.c $(DEPS_28)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejscript\ejsc.c $(LOG)

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejsc
#
DEPS_29 = $(DEPS_29) build\$(CONFIG)\bin\libejs.dll
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\ejsc.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libmpr-openssl.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libgdi32.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libeay32.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libssleay32.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_29 = $(LIBS_29) libzlib.lib
!ENDIF
LIBS_29 = $(LIBS_29) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libmpr-openssl.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_29 = $(LIBS_29) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_29 = $(LIBS_29) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_29 = $(LIBS_29) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_29 = $(LIBS_29) libpcre.lib
!ENDIF
LIBS_29 = $(LIBS_29) libmpr.lib
LIBS_29 = $(LIBS_29) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_29 = $(LIBS_29) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\ejsc.exe: $(DEPS_29)
	@echo ..... [Link] build\$(CONFIG)\bin\ejsc.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_29) $(LIBS_29) $(LIBS_29) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejs.mod
#
DEPS_30 = $(DEPS_30) src\ejscript\ejs.es
DEPS_30 = $(DEPS_30) build\$(CONFIG)\bin\ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_30)
	cd src\ejscript
	@echo .. [Compile] ejs.mod
	"../../$(BUILD)/bin/ejsc" --out "../../$(BUILD)/bin/ejs.mod" --optimize 9 --bind --require null ejs.es
	"../../$(BUILD)/bin/ejsc" --out "../../$(BUILD)/bin/ejs.mod" --optimize 9 --bind --require null ejs.es
	cd ..\..
!ENDIF

#
#   ejs.testme.es
#
DEPS_31 = $(DEPS_31) src\tm\ejs.testme.es

build\$(CONFIG)\bin\ejs.testme.es: $(DEPS_31)
	@echo ..... [Copy] build\$(CONFIG)\bin\ejs.testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\ejs.testme.es+modified build\$(CONFIG)\bin\ejs.testme.es $(LOG)

#
#   ejs.testme.mod
#
DEPS_32 = $(DEPS_32) src\tm\ejs.testme.es
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_32 = $(DEPS_32) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\ejs.testme.mod: $(DEPS_32)
	cd src\tm
	@echo .. [Compile] ejs.testme.mod
	"../../$(BUILD)/bin/ejsc" --debug --out "../../$(BUILD)/bin/ejs.testme.mod" --optimize 9 ejs.testme.es
	cd ..\..

#
#   ejs.obj
#
DEPS_33 = $(DEPS_33) src\ejscript\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\ejscript\ejs.c $(DEPS_33)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\ejscript\ejs.c $(LOG)

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejscmd
#
DEPS_34 = $(DEPS_34) build\$(CONFIG)\bin\libejs.dll
DEPS_34 = $(DEPS_34) build\$(CONFIG)\obj\ejs.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_34 = $(LIBS_34) libmpr-openssl.lib
LIBPATHS_34 = $(LIBPATHS_34) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_34 = $(LIBS_34) libgdi32.lib
LIBPATHS_34 = $(LIBPATHS_34) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_34 = $(LIBS_34) libeay32.lib
LIBPATHS_34 = $(LIBPATHS_34) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_34 = $(LIBS_34) libssleay32.lib
LIBPATHS_34 = $(LIBPATHS_34) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_34 = $(LIBS_34) libzlib.lib
!ENDIF
LIBS_34 = $(LIBS_34) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_34 = $(LIBS_34) libmpr-openssl.lib
LIBPATHS_34 = $(LIBPATHS_34) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_34 = $(LIBS_34) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_34 = $(LIBS_34) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_34 = $(LIBS_34) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_34 = $(LIBS_34) libpcre.lib
!ENDIF
LIBS_34 = $(LIBS_34) libmpr.lib
LIBS_34 = $(LIBS_34) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_34 = $(LIBS_34) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\ejs.exe: $(DEPS_34)
	@echo ..... [Link] build\$(CONFIG)\bin\ejs.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejs.obj" $(LIBPATHS_34) $(LIBS_34) $(LIBS_34) $(LIBS)  $(LOG)
!ENDIF

#
#   extras
#
DEPS_35 = $(DEPS_35) src\Configure.es
DEPS_35 = $(DEPS_35) src\Generate.es

build\$(CONFIG)\.extras-modified: $(DEPS_35)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\Configure.es+modified build\$(CONFIG)\bin\Configure.es $(LOG)
	copy /Y /B src\Generate.es+modified build\$(CONFIG)\bin\Generate.es $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.extras-modified $(LOG)

#
#   http.obj
#
DEPS_36 = $(DEPS_36) src\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_36)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\http\http.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_37 = $(DEPS_37) build\$(CONFIG)\bin\libhttp.dll
DEPS_37 = $(DEPS_37) build\$(CONFIG)\obj\http.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_37 = $(LIBS_37) libmpr-openssl.lib
LIBPATHS_37 = $(LIBPATHS_37) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_37 = $(LIBS_37) libgdi32.lib
LIBPATHS_37 = $(LIBPATHS_37) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_37 = $(LIBS_37) libeay32.lib
LIBPATHS_37 = $(LIBPATHS_37) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_37 = $(LIBS_37) libssleay32.lib
LIBPATHS_37 = $(LIBPATHS_37) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_37 = $(LIBS_37) libzlib.lib
!ENDIF
LIBS_37 = $(LIBS_37) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_37 = $(LIBS_37) libmpr-openssl.lib
LIBPATHS_37 = $(LIBPATHS_37) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_37 = $(LIBS_37) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_37 = $(LIBS_37) libpcre.lib
!ENDIF
LIBS_37 = $(LIBS_37) libhttp.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_37 = $(LIBS_37) libpcre.lib
!ENDIF
LIBS_37 = $(LIBS_37) libmpr.lib

build\$(CONFIG)\bin\http.exe: $(DEPS_37)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\http.obj" $(LIBPATHS_37) $(LIBS_37) $(LIBS_37) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_SSL)" == "1"
#
#   install-certs
#
DEPS_38 = $(DEPS_38) src\certs\samples\ca.crt
DEPS_38 = $(DEPS_38) src\certs\samples\ca.key
DEPS_38 = $(DEPS_38) src\certs\samples\ec.crt
DEPS_38 = $(DEPS_38) src\certs\samples\ec.key
DEPS_38 = $(DEPS_38) src\certs\samples\roots.crt
DEPS_38 = $(DEPS_38) src\certs\samples\self.crt
DEPS_38 = $(DEPS_38) src\certs\samples\self.key
DEPS_38 = $(DEPS_38) src\certs\samples\test.crt
DEPS_38 = $(DEPS_38) src\certs\samples\test.key

build\$(CONFIG)\.install-certs-modified: $(DEPS_38)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\certs\samples\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)
	copy /Y /B src\certs\samples\ca.key+modified build\$(CONFIG)\bin\ca.key $(LOG)
	copy /Y /B src\certs\samples\ec.crt+modified build\$(CONFIG)\bin\ec.crt $(LOG)
	copy /Y /B src\certs\samples\ec.key+modified build\$(CONFIG)\bin\ec.key $(LOG)
	copy /Y /B src\certs\samples\roots.crt+modified build\$(CONFIG)\bin\roots.crt $(LOG)
	copy /Y /B src\certs\samples\self.crt+modified build\$(CONFIG)\bin\self.crt $(LOG)
	copy /Y /B src\certs\samples\self.key+modified build\$(CONFIG)\bin\self.key $(LOG)
	copy /Y /B src\certs\samples\test.crt+modified build\$(CONFIG)\bin\test.crt $(LOG)
	copy /Y /B src\certs\samples\test.key+modified build\$(CONFIG)\bin\test.key $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.install-certs-modified $(LOG)
!ENDIF

#
#   testme.h
#
DEPS_39 = $(DEPS_39) src\tm\testme.h

build\$(CONFIG)\inc\testme.h: $(DEPS_39)
	@echo ..... [Copy] build\$(CONFIG)\inc\testme.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\tm\testme.h+modified build\$(CONFIG)\inc\testme.h $(LOG)

#
#   testme.h
#

src\tm\testme.h: $(DEPS_40)

#
#   libtestme.obj
#
DEPS_41 = $(DEPS_41) src\tm\testme.h

build\$(CONFIG)\obj\libtestme.obj: \
    src\tm\libtestme.c $(DEPS_41)
	@echo .. [Compile] build\$(CONFIG)\obj\libtestme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\libtestme.obj -Fd$(BUILD)\obj\libtestme.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\tm\libtestme.c $(LOG)

#
#   libtestme
#
DEPS_42 = $(DEPS_42) build\$(CONFIG)\inc\testme.h
DEPS_42 = $(DEPS_42) build\$(CONFIG)\obj\libtestme.obj

build\$(CONFIG)\bin\libtestme.dll: $(DEPS_42)
	@echo ..... [Link] build\$(CONFIG)\bin\libtestme.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libtestme.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\libtestme.obj" $(LIBS)  $(LOG)

#
#   me.mod
#
DEPS_43 = $(DEPS_43) src\Builder.es
DEPS_43 = $(DEPS_43) src\Loader.es
DEPS_43 = $(DEPS_43) src\MakeMe.es
DEPS_43 = $(DEPS_43) src\Me.es
DEPS_43 = $(DEPS_43) src\Script.es
DEPS_43 = $(DEPS_43) src\Target.es
DEPS_43 = $(DEPS_43) paks\ejs-version\Version.es
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_43 = $(DEPS_43) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\me.mod: $(DEPS_43)
	@echo .. [Compile] me.mod
	"./$(BUILD)/bin/ejsc" --debug --out "./$(BUILD)/bin/me.mod" --optimize 9 src/Builder.es src/Loader.es src/MakeMe.es src/Me.es src/Script.es src/Target.es paks/ejs-version/Version.es

#
#   pakrun
#
DEPS_44 = $(DEPS_44) paks\me-components\appweb.me
DEPS_44 = $(DEPS_44) paks\me-components\compiler.me
DEPS_44 = $(DEPS_44) paks\me-components\components.me
DEPS_44 = $(DEPS_44) paks\me-components\ejscript.me
DEPS_44 = $(DEPS_44) paks\me-components\lib.me
DEPS_44 = $(DEPS_44) paks\me-components\link.me
DEPS_44 = $(DEPS_44) paks\me-components\rc.me
DEPS_44 = $(DEPS_44) paks\me-components\testme.me
DEPS_44 = $(DEPS_44) paks\me-components\vxworks.me
DEPS_44 = $(DEPS_44) paks\me-components\winsdk.me
DEPS_44 = $(DEPS_44) paks\me-installs\Installs.es
DEPS_44 = $(DEPS_44) paks\me-installs\installs.me
DEPS_44 = $(DEPS_44) paks\me-installs\manifest.me
DEPS_44 = $(DEPS_44) paks\me-make\Make.es
DEPS_44 = $(DEPS_44) paks\me-make\make.me
DEPS_44 = $(DEPS_44) paks\me-os\freebsd.me
DEPS_44 = $(DEPS_44) paks\me-os\gcc.me
DEPS_44 = $(DEPS_44) paks\me-os\linux.me
DEPS_44 = $(DEPS_44) paks\me-os\macosx.me
DEPS_44 = $(DEPS_44) paks\me-os\os.me
DEPS_44 = $(DEPS_44) paks\me-os\solaris.me
DEPS_44 = $(DEPS_44) paks\me-os\unix.me
DEPS_44 = $(DEPS_44) paks\me-os\vxworks.me
DEPS_44 = $(DEPS_44) paks\me-os\windows.me
DEPS_44 = $(DEPS_44) paks\me-vstudio\Vstudio.es
DEPS_44 = $(DEPS_44) paks\me-vstudio\vstudio.me
DEPS_44 = $(DEPS_44) paks\me-xcode\Xcode.es
DEPS_44 = $(DEPS_44) paks\me-xcode\xcode.me

build\$(CONFIG)\.pakrun-modified: $(DEPS_44)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin\paks\me-components" md "build\$(CONFIG)\bin\paks\me-components"
	copy /Y /B paks\me-components\appweb.me+modified build\$(CONFIG)\bin\paks\me-components\appweb.me $(LOG)
	copy /Y /B paks\me-components\compiler.me+modified build\$(CONFIG)\bin\paks\me-components\compiler.me $(LOG)
	copy /Y /B paks\me-components\components.me+modified build\$(CONFIG)\bin\paks\me-components\components.me $(LOG)
	copy /Y /B paks\me-components\ejscript.me+modified build\$(CONFIG)\bin\paks\me-components\ejscript.me $(LOG)
	copy /Y /B paks\me-components\lib.me+modified build\$(CONFIG)\bin\paks\me-components\lib.me $(LOG)
	copy /Y /B paks\me-components\link.me+modified build\$(CONFIG)\bin\paks\me-components\link.me $(LOG)
	copy /Y /B paks\me-components\rc.me+modified build\$(CONFIG)\bin\paks\me-components\rc.me $(LOG)
	copy /Y /B paks\me-components\testme.me+modified build\$(CONFIG)\bin\paks\me-components\testme.me $(LOG)
	copy /Y /B paks\me-components\vxworks.me+modified build\$(CONFIG)\bin\paks\me-components\vxworks.me $(LOG)
	copy /Y /B paks\me-components\winsdk.me+modified build\$(CONFIG)\bin\paks\me-components\winsdk.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-installs" md "build\$(CONFIG)\bin\paks\me-installs"
	copy /Y /B paks\me-installs\Installs.es+modified build\$(CONFIG)\bin\paks\me-installs\Installs.es $(LOG)
	copy /Y /B paks\me-installs\installs.me+modified build\$(CONFIG)\bin\paks\me-installs\installs.me $(LOG)
	copy /Y /B paks\me-installs\manifest.me+modified build\$(CONFIG)\bin\paks\me-installs\manifest.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-make" md "build\$(CONFIG)\bin\paks\me-make"
	copy /Y /B paks\me-make\Make.es+modified build\$(CONFIG)\bin\paks\me-make\Make.es $(LOG)
	copy /Y /B paks\me-make\make.me+modified build\$(CONFIG)\bin\paks\me-make\make.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-os" md "build\$(CONFIG)\bin\paks\me-os"
	copy /Y /B paks\me-os\freebsd.me+modified build\$(CONFIG)\bin\paks\me-os\freebsd.me $(LOG)
	copy /Y /B paks\me-os\gcc.me+modified build\$(CONFIG)\bin\paks\me-os\gcc.me $(LOG)
	copy /Y /B paks\me-os\linux.me+modified build\$(CONFIG)\bin\paks\me-os\linux.me $(LOG)
	copy /Y /B paks\me-os\macosx.me+modified build\$(CONFIG)\bin\paks\me-os\macosx.me $(LOG)
	copy /Y /B paks\me-os\os.me+modified build\$(CONFIG)\bin\paks\me-os\os.me $(LOG)
	copy /Y /B paks\me-os\solaris.me+modified build\$(CONFIG)\bin\paks\me-os\solaris.me $(LOG)
	copy /Y /B paks\me-os\unix.me+modified build\$(CONFIG)\bin\paks\me-os\unix.me $(LOG)
	copy /Y /B paks\me-os\vxworks.me+modified build\$(CONFIG)\bin\paks\me-os\vxworks.me $(LOG)
	copy /Y /B paks\me-os\windows.me+modified build\$(CONFIG)\bin\paks\me-os\windows.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-vstudio" md "build\$(CONFIG)\bin\paks\me-vstudio"
	copy /Y /B paks\me-vstudio\Vstudio.es+modified build\$(CONFIG)\bin\paks\me-vstudio\Vstudio.es $(LOG)
	copy /Y /B paks\me-vstudio\vstudio.me+modified build\$(CONFIG)\bin\paks\me-vstudio\vstudio.me $(LOG)
	if not exist "build\$(CONFIG)\bin\paks\me-xcode" md "build\$(CONFIG)\bin\paks\me-xcode"
	copy /Y /B paks\me-xcode\Xcode.es+modified build\$(CONFIG)\bin\paks\me-xcode\Xcode.es $(LOG)
	copy /Y /B paks\me-xcode\xcode.me+modified build\$(CONFIG)\bin\paks\me-xcode\xcode.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.pakrun-modified $(LOG)

#
#   runtime
#
DEPS_45 = $(DEPS_45) src\master-main.me
DEPS_45 = $(DEPS_45) src\master-start.me
DEPS_45 = $(DEPS_45) src\simple.me
DEPS_45 = $(DEPS_45) src\standard.me
DEPS_45 = $(DEPS_45) build\$(CONFIG)\.pakrun-modified

build\$(CONFIG)\.runtime-modified: $(DEPS_45)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\master-main.me+modified build\$(CONFIG)\bin\master-main.me $(LOG)
	copy /Y /B src\master-start.me+modified build\$(CONFIG)\bin\master-start.me $(LOG)
	copy /Y /B src\simple.me+modified build\$(CONFIG)\bin\simple.me $(LOG)
	copy /Y /B src\standard.me+modified build\$(CONFIG)\bin\standard.me $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.runtime-modified $(LOG)

#
#   me.obj
#
DEPS_46 = $(DEPS_46) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\me.obj: \
    src\me.c $(DEPS_46)
	@echo .. [Compile] build\$(CONFIG)\obj\me.obj
	"$(CC)" -c -Fo$(BUILD)\obj\me.obj -Fd$(BUILD)\obj\me.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\me.c $(LOG)

#
#   me
#
DEPS_47 = $(DEPS_47) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_HTTP)" == "1"
DEPS_47 = $(DEPS_47) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_47 = $(DEPS_47) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_47 = $(DEPS_47) build\$(CONFIG)\bin\me.mod
DEPS_47 = $(DEPS_47) build\$(CONFIG)\.runtime-modified
DEPS_47 = $(DEPS_47) build\$(CONFIG)\obj\me.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libmpr-openssl.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libgdi32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libeay32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libssleay32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_47 = $(LIBS_47) libzlib.lib
!ENDIF
LIBS_47 = $(LIBS_47) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libmpr-openssl.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_47 = $(LIBS_47) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_47 = $(LIBS_47) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_47 = $(LIBS_47) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_47 = $(LIBS_47) libpcre.lib
!ENDIF
LIBS_47 = $(LIBS_47) libmpr.lib
!IF "$(ME_COM_EJSCRIPT)" == "1"
LIBS_47 = $(LIBS_47) libejs.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_47 = $(LIBS_47) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\me.exe: $(DEPS_47)
	@echo ..... [Link] build\$(CONFIG)\bin\me.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\me.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\me.obj" $(LIBPATHS_47) $(LIBS_47) $(LIBS_47) $(LIBS)  $(LOG)

#
#   testme.mod
#
DEPS_48 = $(DEPS_48) src\tm\testme.es
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_48 = $(DEPS_48) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\testme.mod: $(DEPS_48)
	cd src\tm
	@echo .. [Compile] testme.mod
	"../../$(BUILD)/bin/ejsc" --debug --out "../../$(BUILD)/bin/testme.mod" --optimize 9 testme.es
	cd ..\..

#
#   testme.obj
#
DEPS_49 = $(DEPS_49) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\testme.obj: \
    src\tm\testme.c $(DEPS_49)
	@echo .. [Compile] build\$(CONFIG)\obj\testme.obj
	"$(CC)" -c -Fo$(BUILD)\obj\testme.obj -Fd$(BUILD)\obj\testme.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\tm\testme.c $(LOG)

#
#   testme
#
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\testme.mod
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\ejs.testme.mod
DEPS_50 = $(DEPS_50) build\$(CONFIG)\obj\testme.obj

!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libmpr-openssl.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libgdi32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libeay32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libssleay32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF
LIBS_50 = $(LIBS_50) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libmpr-openssl.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_50 = $(LIBS_50) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_50 = $(LIBS_50) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_50 = $(LIBS_50) libpcre.lib
!ENDIF
LIBS_50 = $(LIBS_50) libmpr.lib
!IF "$(ME_COM_EJSCRIPT)" == "1"
LIBS_50 = $(LIBS_50) libejs.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_50 = $(LIBS_50) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\testme.exe: $(DEPS_50)
	@echo ..... [Link] build\$(CONFIG)\bin\testme.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\testme.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\testme.obj" $(LIBPATHS_50) $(LIBS_50) $(LIBS_50) $(LIBS)  $(LOG)

#
#   testme.es
#
DEPS_51 = $(DEPS_51) src\tm\testme.es

build\$(CONFIG)\bin\testme.es: $(DEPS_51)
	@echo ..... [Copy] build\$(CONFIG)\bin\testme.es
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\tm\testme.es+modified build\$(CONFIG)\bin\testme.es $(LOG)

